// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bada_sdk.proto

#ifndef PROTOBUF_bada_5fsdk_2eproto__INCLUDED
#define PROTOBUF_bada_5fsdk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bada_5fsdk_2eproto();
void protobuf_AssignDesc_bada_5fsdk_2eproto();
void protobuf_ShutdownFile_bada_5fsdk_2eproto();

class SdkInvalidOperation;
class SdkSet;
class SdkSetRet;
class SdkCas;
class SdkCasRet;
class SdkGet;
class SdkGetRet;
class SdkGetV;
class SdkGetVRet;
class SdkDelete;
class SdkDeleteRet;
class SdkPing;
class SdkPingRet;
class SdkGetIfAll;
class SdkGetIfAllRet;
class SdkMGet;
class SdkMGetRet;
class SdkMGetRet_KeyValue;
class GetMetadata4SDK2;
class Rint32;
class GetMetadata4SDK3;
class GetMetadata4SDK3_NPs;
class GetPrimary4SDK2;
class GetPrimary4SDK3;
class SdkHGet;
class SdkHGetRet;
class SdkHPut;
class SdkHPutRet;
class SdkHDelete;
class SdkHDeleteRet;
class SdkHGetAllKeysByName;
class SdkHGetAllKeysByNameRet;
class SdkHGetAllKVsByName;
class SdkHGetAllKVsByNameRet;
class SdkHGetAllKVsByNameRet_HKeyValue;
class SdkHMput;
class SdkHMput_HKeyValue;
class SdkHMputRet;
class SdkHMputRet_HKeyRetval;
class SdkHMget;
class SdkHMgetRet;
class SdkHMgetRet_HKeyValue;
class SdkSetWithTTL;
class SdkSetWithTTLRet;
class SdkLSize;
class SdkLSizeRet;
class SdkLGet;
class SdkLGetRet;
class SdkLPut;
class SdkLPutRet;
class SdkLPop;
class SdkLPopRet;
class SdkLIndex;
class SdkLIndexRet;
class SdkLRange;
class SdkLRangeRet;

// ===================================================================

class SdkInvalidOperation : public ::google::protobuf::Message {
 public:
  SdkInvalidOperation();
  virtual ~SdkInvalidOperation();

  SdkInvalidOperation(const SdkInvalidOperation& from);

  inline SdkInvalidOperation& operator=(const SdkInvalidOperation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkInvalidOperation& default_instance();

  void Swap(SdkInvalidOperation* other);

  // implements Message ----------------------------------------------

  SdkInvalidOperation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkInvalidOperation& from);
  void MergeFrom(const SdkInvalidOperation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required int32 what = 2;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 2;
  inline ::google::protobuf::int32 what() const;
  inline void set_what(::google::protobuf::int32 value);

  // required bytes why = 3;
  inline bool has_why() const;
  inline void clear_why();
  static const int kWhyFieldNumber = 3;
  inline const ::std::string& why() const;
  inline void set_why(const ::std::string& value);
  inline void set_why(const char* value);
  inline void set_why(const void* value, size_t size);
  inline ::std::string* mutable_why();
  inline ::std::string* release_why();
  inline void set_allocated_why(::std::string* why);

  // @@protoc_insertion_point(class_scope:SdkInvalidOperation)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_what();
  inline void clear_has_what();
  inline void set_has_why();
  inline void clear_has_why();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 what_;
  ::std::string* why_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkInvalidOperation* default_instance_;
};
// -------------------------------------------------------------------

class SdkSet : public ::google::protobuf::Message {
 public:
  SdkSet();
  virtual ~SdkSet();

  SdkSet(const SdkSet& from);

  inline SdkSet& operator=(const SdkSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkSet& default_instance();

  void Swap(SdkSet* other);

  // implements Message ----------------------------------------------

  SdkSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkSet& from);
  void MergeFrom(const SdkSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional int32 writesrc = 5 [default = 0];
  inline bool has_writesrc() const;
  inline void clear_writesrc();
  static const int kWritesrcFieldNumber = 5;
  inline ::google::protobuf::int32 writesrc() const;
  inline void set_writesrc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkSet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_writesrc();
  inline void clear_has_writesrc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* key_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 writesrc_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkSet* default_instance_;
};
// -------------------------------------------------------------------

class SdkSetRet : public ::google::protobuf::Message {
 public:
  SdkSetRet();
  virtual ~SdkSetRet();

  SdkSetRet(const SdkSetRet& from);

  inline SdkSetRet& operator=(const SdkSetRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkSetRet& default_instance();

  void Swap(SdkSetRet* other);

  // implements Message ----------------------------------------------

  SdkSetRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkSetRet& from);
  void MergeFrom(const SdkSetRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bool status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline bool status() const;
  inline void set_status(bool value);

  // optional string master = 3;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 3;
  inline const ::std::string& master() const;
  inline void set_master(const ::std::string& value);
  inline void set_master(const char* value);
  inline void set_master(const char* value, size_t size);
  inline ::std::string* mutable_master();
  inline ::std::string* release_master();
  inline void set_allocated_master(::std::string* master);

  // @@protoc_insertion_point(class_scope:SdkSetRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_master();
  inline void clear_has_master();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opcode_;
  bool status_;
  ::std::string* master_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkSetRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkCas : public ::google::protobuf::Message {
 public:
  SdkCas();
  virtual ~SdkCas();

  SdkCas(const SdkCas& from);

  inline SdkCas& operator=(const SdkCas& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkCas& default_instance();

  void Swap(SdkCas* other);

  // implements Message ----------------------------------------------

  SdkCas* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkCas& from);
  void MergeFrom(const SdkCas& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required int32 version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 writesrc = 6 [default = 0];
  inline bool has_writesrc() const;
  inline void clear_writesrc();
  static const int kWritesrcFieldNumber = 6;
  inline ::google::protobuf::int32 writesrc() const;
  inline void set_writesrc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkCas)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_writesrc();
  inline void clear_has_writesrc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* key_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 version_;
  ::std::string* value_;
  ::google::protobuf::int32 writesrc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkCas* default_instance_;
};
// -------------------------------------------------------------------

class SdkCasRet : public ::google::protobuf::Message {
 public:
  SdkCasRet();
  virtual ~SdkCasRet();

  SdkCasRet(const SdkCasRet& from);

  inline SdkCasRet& operator=(const SdkCasRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkCasRet& default_instance();

  void Swap(SdkCasRet* other);

  // implements Message ----------------------------------------------

  SdkCasRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkCasRet& from);
  void MergeFrom(const SdkCasRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bool status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline bool status() const;
  inline void set_status(bool value);

  // optional string master = 3;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 3;
  inline const ::std::string& master() const;
  inline void set_master(const ::std::string& value);
  inline void set_master(const char* value);
  inline void set_master(const char* value, size_t size);
  inline ::std::string* mutable_master();
  inline ::std::string* release_master();
  inline void set_allocated_master(::std::string* master);

  // @@protoc_insertion_point(class_scope:SdkCasRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_master();
  inline void clear_has_master();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opcode_;
  bool status_;
  ::std::string* master_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkCasRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkGet : public ::google::protobuf::Message {
 public:
  SdkGet();
  virtual ~SdkGet();

  SdkGet(const SdkGet& from);

  inline SdkGet& operator=(const SdkGet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkGet& default_instance();

  void Swap(SdkGet* other);

  // implements Message ----------------------------------------------

  SdkGet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkGet& from);
  void MergeFrom(const SdkGet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:SdkGet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* key_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkGet* default_instance_;
};
// -------------------------------------------------------------------

class SdkGetRet : public ::google::protobuf::Message {
 public:
  SdkGetRet();
  virtual ~SdkGetRet();

  SdkGetRet(const SdkGetRet& from);

  inline SdkGetRet& operator=(const SdkGetRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkGetRet& default_instance();

  void Swap(SdkGetRet* other);

  // implements Message ----------------------------------------------

  SdkGetRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkGetRet& from);
  void MergeFrom(const SdkGetRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional string master = 3;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 3;
  inline const ::std::string& master() const;
  inline void set_master(const ::std::string& value);
  inline void set_master(const char* value);
  inline void set_master(const char* value, size_t size);
  inline ::std::string* mutable_master();
  inline ::std::string* release_master();
  inline void set_allocated_master(::std::string* master);

  // @@protoc_insertion_point(class_scope:SdkGetRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_master();
  inline void clear_has_master();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  ::std::string* master_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkGetRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkGetV : public ::google::protobuf::Message {
 public:
  SdkGetV();
  virtual ~SdkGetV();

  SdkGetV(const SdkGetV& from);

  inline SdkGetV& operator=(const SdkGetV& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkGetV& default_instance();

  void Swap(SdkGetV* other);

  // implements Message ----------------------------------------------

  SdkGetV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkGetV& from);
  void MergeFrom(const SdkGetV& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:SdkGetV)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* key_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkGetV* default_instance_;
};
// -------------------------------------------------------------------

class SdkGetVRet : public ::google::protobuf::Message {
 public:
  SdkGetVRet();
  virtual ~SdkGetVRet();

  SdkGetVRet(const SdkGetVRet& from);

  inline SdkGetVRet& operator=(const SdkGetVRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkGetVRet& default_instance();

  void Swap(SdkGetVRet* other);

  // implements Message ----------------------------------------------

  SdkGetVRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkGetVRet& from);
  void MergeFrom(const SdkGetVRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required int32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional string master = 4;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 4;
  inline const ::std::string& master() const;
  inline void set_master(const ::std::string& value);
  inline void set_master(const char* value);
  inline void set_master(const char* value, size_t size);
  inline ::std::string* mutable_master();
  inline ::std::string* release_master();
  inline void set_allocated_master(::std::string* master);

  // @@protoc_insertion_point(class_scope:SdkGetVRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_master();
  inline void clear_has_master();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 version_;
  ::std::string* master_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkGetVRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkDelete : public ::google::protobuf::Message {
 public:
  SdkDelete();
  virtual ~SdkDelete();

  SdkDelete(const SdkDelete& from);

  inline SdkDelete& operator=(const SdkDelete& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkDelete& default_instance();

  void Swap(SdkDelete* other);

  // implements Message ----------------------------------------------

  SdkDelete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkDelete& from);
  void MergeFrom(const SdkDelete& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional int32 writesrc = 4 [default = 0];
  inline bool has_writesrc() const;
  inline void clear_writesrc();
  static const int kWritesrcFieldNumber = 4;
  inline ::google::protobuf::int32 writesrc() const;
  inline void set_writesrc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkDelete)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_writesrc();
  inline void clear_has_writesrc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 writesrc_;
  ::std::string* key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkDelete* default_instance_;
};
// -------------------------------------------------------------------

class SdkDeleteRet : public ::google::protobuf::Message {
 public:
  SdkDeleteRet();
  virtual ~SdkDeleteRet();

  SdkDeleteRet(const SdkDeleteRet& from);

  inline SdkDeleteRet& operator=(const SdkDeleteRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkDeleteRet& default_instance();

  void Swap(SdkDeleteRet* other);

  // implements Message ----------------------------------------------

  SdkDeleteRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkDeleteRet& from);
  void MergeFrom(const SdkDeleteRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bool status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline bool status() const;
  inline void set_status(bool value);

  // optional string master = 3;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 3;
  inline const ::std::string& master() const;
  inline void set_master(const ::std::string& value);
  inline void set_master(const char* value);
  inline void set_master(const char* value, size_t size);
  inline ::std::string* mutable_master();
  inline ::std::string* release_master();
  inline void set_allocated_master(::std::string* master);

  // @@protoc_insertion_point(class_scope:SdkDeleteRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_master();
  inline void clear_has_master();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opcode_;
  bool status_;
  ::std::string* master_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkDeleteRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkPing : public ::google::protobuf::Message {
 public:
  SdkPing();
  virtual ~SdkPing();

  SdkPing(const SdkPing& from);

  inline SdkPing& operator=(const SdkPing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkPing& default_instance();

  void Swap(SdkPing* other);

  // implements Message ----------------------------------------------

  SdkPing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkPing& from);
  void MergeFrom(const SdkPing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkPing)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkPing* default_instance_;
};
// -------------------------------------------------------------------

class SdkPingRet : public ::google::protobuf::Message {
 public:
  SdkPingRet();
  virtual ~SdkPingRet();

  SdkPingRet(const SdkPingRet& from);

  inline SdkPingRet& operator=(const SdkPingRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkPingRet& default_instance();

  void Swap(SdkPingRet* other);

  // implements Message ----------------------------------------------

  SdkPingRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkPingRet& from);
  void MergeFrom(const SdkPingRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bool status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline bool status() const;
  inline void set_status(bool value);

  // @@protoc_insertion_point(class_scope:SdkPingRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opcode_;
  bool status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkPingRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkGetIfAll : public ::google::protobuf::Message {
 public:
  SdkGetIfAll();
  virtual ~SdkGetIfAll();

  SdkGetIfAll(const SdkGetIfAll& from);

  inline SdkGetIfAll& operator=(const SdkGetIfAll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkGetIfAll& default_instance();

  void Swap(SdkGetIfAll* other);

  // implements Message ----------------------------------------------

  SdkGetIfAll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkGetIfAll& from);
  void MergeFrom(const SdkGetIfAll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bool Strict = 4;
  inline bool has_strict() const;
  inline void clear_strict();
  static const int kStrictFieldNumber = 4;
  inline bool strict() const;
  inline void set_strict(bool value);

  // @@protoc_insertion_point(class_scope:SdkGetIfAll)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_strict();
  inline void clear_has_strict();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::google::protobuf::int32 opcode_;
  bool strict_;
  ::std::string* key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkGetIfAll* default_instance_;
};
// -------------------------------------------------------------------

class SdkGetIfAllRet : public ::google::protobuf::Message {
 public:
  SdkGetIfAllRet();
  virtual ~SdkGetIfAllRet();

  SdkGetIfAllRet(const SdkGetIfAllRet& from);

  inline SdkGetIfAllRet& operator=(const SdkGetIfAllRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkGetIfAllRet& default_instance();

  void Swap(SdkGetIfAllRet* other);

  // implements Message ----------------------------------------------

  SdkGetIfAllRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkGetIfAllRet& from);
  void MergeFrom(const SdkGetIfAllRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required int32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional string master = 4;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 4;
  inline const ::std::string& master() const;
  inline void set_master(const ::std::string& value);
  inline void set_master(const char* value);
  inline void set_master(const char* value, size_t size);
  inline ::std::string* mutable_master();
  inline ::std::string* release_master();
  inline void set_allocated_master(::std::string* master);

  // @@protoc_insertion_point(class_scope:SdkGetIfAllRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_master();
  inline void clear_has_master();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 version_;
  ::std::string* master_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkGetIfAllRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkMGet : public ::google::protobuf::Message {
 public:
  SdkMGet();
  virtual ~SdkMGet();

  SdkMGet(const SdkMGet& from);

  inline SdkMGet& operator=(const SdkMGet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkMGet& default_instance();

  void Swap(SdkMGet* other);

  // implements Message ----------------------------------------------

  SdkMGet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkMGet& from);
  void MergeFrom(const SdkMGet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // repeated bytes key = 3;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key(int index) const;
  inline ::std::string* mutable_key(int index);
  inline void set_key(int index, const ::std::string& value);
  inline void set_key(int index, const char* value);
  inline void set_key(int index, const void* value, size_t size);
  inline ::std::string* add_key();
  inline void add_key(const ::std::string& value);
  inline void add_key(const char* value);
  inline void add_key(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // @@protoc_insertion_point(class_scope:SdkMGet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkMGet* default_instance_;
};
// -------------------------------------------------------------------

class SdkMGetRet_KeyValue : public ::google::protobuf::Message {
 public:
  SdkMGetRet_KeyValue();
  virtual ~SdkMGetRet_KeyValue();

  SdkMGetRet_KeyValue(const SdkMGetRet_KeyValue& from);

  inline SdkMGetRet_KeyValue& operator=(const SdkMGetRet_KeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkMGetRet_KeyValue& default_instance();

  void Swap(SdkMGetRet_KeyValue* other);

  // implements Message ----------------------------------------------

  SdkMGetRet_KeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkMGetRet_KeyValue& from);
  void MergeFrom(const SdkMGetRet_KeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required int32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkMGetRet.KeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkMGetRet_KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class SdkMGetRet : public ::google::protobuf::Message {
 public:
  SdkMGetRet();
  virtual ~SdkMGetRet();

  SdkMGetRet(const SdkMGetRet& from);

  inline SdkMGetRet& operator=(const SdkMGetRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkMGetRet& default_instance();

  void Swap(SdkMGetRet* other);

  // implements Message ----------------------------------------------

  SdkMGetRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkMGetRet& from);
  void MergeFrom(const SdkMGetRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SdkMGetRet_KeyValue KeyValue;

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // repeated .SdkMGetRet.KeyValue rets = 2;
  inline int rets_size() const;
  inline void clear_rets();
  static const int kRetsFieldNumber = 2;
  inline const ::SdkMGetRet_KeyValue& rets(int index) const;
  inline ::SdkMGetRet_KeyValue* mutable_rets(int index);
  inline ::SdkMGetRet_KeyValue* add_rets();
  inline const ::google::protobuf::RepeatedPtrField< ::SdkMGetRet_KeyValue >&
      rets() const;
  inline ::google::protobuf::RepeatedPtrField< ::SdkMGetRet_KeyValue >*
      mutable_rets();

  // optional string master = 3;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 3;
  inline const ::std::string& master() const;
  inline void set_master(const ::std::string& value);
  inline void set_master(const char* value);
  inline void set_master(const char* value, size_t size);
  inline ::std::string* mutable_master();
  inline ::std::string* release_master();
  inline void set_allocated_master(::std::string* master);

  // @@protoc_insertion_point(class_scope:SdkMGetRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_master();
  inline void clear_has_master();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SdkMGetRet_KeyValue > rets_;
  ::std::string* master_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkMGetRet* default_instance_;
};
// -------------------------------------------------------------------

class GetMetadata4SDK2 : public ::google::protobuf::Message {
 public:
  GetMetadata4SDK2();
  virtual ~GetMetadata4SDK2();

  GetMetadata4SDK2(const GetMetadata4SDK2& from);

  inline GetMetadata4SDK2& operator=(const GetMetadata4SDK2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMetadata4SDK2& default_instance();

  void Swap(GetMetadata4SDK2* other);

  // implements Message ----------------------------------------------

  GetMetadata4SDK2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMetadata4SDK2& from);
  void MergeFrom(const GetMetadata4SDK2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);

  // required string table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const char* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // @@protoc_insertion_point(class_scope:GetMetadata4SDK2)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_table();
  inline void clear_has_table();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::google::protobuf::int32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static GetMetadata4SDK2* default_instance_;
};
// -------------------------------------------------------------------

class Rint32 : public ::google::protobuf::Message {
 public:
  Rint32();
  virtual ~Rint32();

  Rint32(const Rint32& from);

  inline Rint32& operator=(const Rint32& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rint32& default_instance();

  void Swap(Rint32* other);

  // implements Message ----------------------------------------------

  Rint32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rint32& from);
  void MergeFrom(const Rint32& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Rint32)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static Rint32* default_instance_;
};
// -------------------------------------------------------------------

class GetMetadata4SDK3_NPs : public ::google::protobuf::Message {
 public:
  GetMetadata4SDK3_NPs();
  virtual ~GetMetadata4SDK3_NPs();

  GetMetadata4SDK3_NPs(const GetMetadata4SDK3_NPs& from);

  inline GetMetadata4SDK3_NPs& operator=(const GetMetadata4SDK3_NPs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMetadata4SDK3_NPs& default_instance();

  void Swap(GetMetadata4SDK3_NPs* other);

  // implements Message ----------------------------------------------

  GetMetadata4SDK3_NPs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMetadata4SDK3_NPs& from);
  void MergeFrom(const GetMetadata4SDK3_NPs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // repeated .Rint32 partitions = 3;
  inline int partitions_size() const;
  inline void clear_partitions();
  static const int kPartitionsFieldNumber = 3;
  inline const ::Rint32& partitions(int index) const;
  inline ::Rint32* mutable_partitions(int index);
  inline ::Rint32* add_partitions();
  inline const ::google::protobuf::RepeatedPtrField< ::Rint32 >&
      partitions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Rint32 >*
      mutable_partitions();

  // @@protoc_insertion_point(class_scope:GetMetadata4SDK3.NPs)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* host_;
  ::google::protobuf::RepeatedPtrField< ::Rint32 > partitions_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static GetMetadata4SDK3_NPs* default_instance_;
};
// -------------------------------------------------------------------

class GetMetadata4SDK3 : public ::google::protobuf::Message {
 public:
  GetMetadata4SDK3();
  virtual ~GetMetadata4SDK3();

  GetMetadata4SDK3(const GetMetadata4SDK3& from);

  inline GetMetadata4SDK3& operator=(const GetMetadata4SDK3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMetadata4SDK3& default_instance();

  void Swap(GetMetadata4SDK3* other);

  // implements Message ----------------------------------------------

  GetMetadata4SDK3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMetadata4SDK3& from);
  void MergeFrom(const GetMetadata4SDK3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GetMetadata4SDK3_NPs NPs;

  // accessors -------------------------------------------------------

  // required int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);

  // repeated .GetMetadata4SDK3.NPs nps = 2;
  inline int nps_size() const;
  inline void clear_nps();
  static const int kNpsFieldNumber = 2;
  inline const ::GetMetadata4SDK3_NPs& nps(int index) const;
  inline ::GetMetadata4SDK3_NPs* mutable_nps(int index);
  inline ::GetMetadata4SDK3_NPs* add_nps();
  inline const ::google::protobuf::RepeatedPtrField< ::GetMetadata4SDK3_NPs >&
      nps() const;
  inline ::google::protobuf::RepeatedPtrField< ::GetMetadata4SDK3_NPs >*
      mutable_nps();

  // required int32 pcnt = 3;
  inline bool has_pcnt() const;
  inline void clear_pcnt();
  static const int kPcntFieldNumber = 3;
  inline ::google::protobuf::int32 pcnt() const;
  inline void set_pcnt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GetMetadata4SDK3)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_pcnt();
  inline void clear_has_pcnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GetMetadata4SDK3_NPs > nps_;
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 pcnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static GetMetadata4SDK3* default_instance_;
};
// -------------------------------------------------------------------

class GetPrimary4SDK2 : public ::google::protobuf::Message {
 public:
  GetPrimary4SDK2();
  virtual ~GetPrimary4SDK2();

  GetPrimary4SDK2(const GetPrimary4SDK2& from);

  inline GetPrimary4SDK2& operator=(const GetPrimary4SDK2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPrimary4SDK2& default_instance();

  void Swap(GetPrimary4SDK2* other);

  // implements Message ----------------------------------------------

  GetPrimary4SDK2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPrimary4SDK2& from);
  void MergeFrom(const GetPrimary4SDK2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);

  // required string table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const char* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required int32 partition = 3;
  inline bool has_partition() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 3;
  inline ::google::protobuf::int32 partition() const;
  inline void set_partition(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GetPrimary4SDK2)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_partition();
  inline void clear_has_partition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 partition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static GetPrimary4SDK2* default_instance_;
};
// -------------------------------------------------------------------

class GetPrimary4SDK3 : public ::google::protobuf::Message {
 public:
  GetPrimary4SDK3();
  virtual ~GetPrimary4SDK3();

  GetPrimary4SDK3(const GetPrimary4SDK3& from);

  inline GetPrimary4SDK3& operator=(const GetPrimary4SDK3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPrimary4SDK3& default_instance();

  void Swap(GetPrimary4SDK3* other);

  // implements Message ----------------------------------------------

  GetPrimary4SDK3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPrimary4SDK3& from);
  void MergeFrom(const GetPrimary4SDK3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);

  // required string host = 2;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 2;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GetPrimary4SDK3)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* host_;
  ::google::protobuf::int32 cmd_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static GetPrimary4SDK3* default_instance_;
};
// -------------------------------------------------------------------

class SdkHGet : public ::google::protobuf::Message {
 public:
  SdkHGet();
  virtual ~SdkHGet();

  SdkHGet(const SdkHGet& from);

  inline SdkHGet& operator=(const SdkHGet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHGet& default_instance();

  void Swap(SdkHGet* other);

  // implements Message ----------------------------------------------

  SdkHGet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHGet& from);
  void MergeFrom(const SdkHGet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes hname = 3;
  inline bool has_hname() const;
  inline void clear_hname();
  static const int kHnameFieldNumber = 3;
  inline const ::std::string& hname() const;
  inline void set_hname(const ::std::string& value);
  inline void set_hname(const char* value);
  inline void set_hname(const void* value, size_t size);
  inline ::std::string* mutable_hname();
  inline ::std::string* release_hname();
  inline void set_allocated_hname(::std::string* hname);

  // required bytes key = 4;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 4;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:SdkHGet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_hname();
  inline void clear_has_hname();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* hname_;
  ::std::string* key_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHGet* default_instance_;
};
// -------------------------------------------------------------------

class SdkHGetRet : public ::google::protobuf::Message {
 public:
  SdkHGetRet();
  virtual ~SdkHGetRet();

  SdkHGetRet(const SdkHGetRet& from);

  inline SdkHGetRet& operator=(const SdkHGetRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHGetRet& default_instance();

  void Swap(SdkHGetRet* other);

  // implements Message ----------------------------------------------

  SdkHGetRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHGetRet& from);
  void MergeFrom(const SdkHGetRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:SdkHGetRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHGetRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkHPut : public ::google::protobuf::Message {
 public:
  SdkHPut();
  virtual ~SdkHPut();

  SdkHPut(const SdkHPut& from);

  inline SdkHPut& operator=(const SdkHPut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHPut& default_instance();

  void Swap(SdkHPut* other);

  // implements Message ----------------------------------------------

  SdkHPut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHPut& from);
  void MergeFrom(const SdkHPut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes hname = 3;
  inline bool has_hname() const;
  inline void clear_hname();
  static const int kHnameFieldNumber = 3;
  inline const ::std::string& hname() const;
  inline void set_hname(const ::std::string& value);
  inline void set_hname(const char* value);
  inline void set_hname(const void* value, size_t size);
  inline ::std::string* mutable_hname();
  inline ::std::string* release_hname();
  inline void set_allocated_hname(::std::string* hname);

  // required bytes key = 4;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 4;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional int32 writesrc = 6 [default = 0];
  inline bool has_writesrc() const;
  inline void clear_writesrc();
  static const int kWritesrcFieldNumber = 6;
  inline ::google::protobuf::int32 writesrc() const;
  inline void set_writesrc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkHPut)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_hname();
  inline void clear_has_hname();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_writesrc();
  inline void clear_has_writesrc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* hname_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 writesrc_;
  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHPut* default_instance_;
};
// -------------------------------------------------------------------

class SdkHPutRet : public ::google::protobuf::Message {
 public:
  SdkHPutRet();
  virtual ~SdkHPutRet();

  SdkHPutRet(const SdkHPutRet& from);

  inline SdkHPutRet& operator=(const SdkHPutRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHPutRet& default_instance();

  void Swap(SdkHPutRet* other);

  // implements Message ----------------------------------------------

  SdkHPutRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHPutRet& from);
  void MergeFrom(const SdkHPutRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bool status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline bool status() const;
  inline void set_status(bool value);

  // @@protoc_insertion_point(class_scope:SdkHPutRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opcode_;
  bool status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHPutRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkHDelete : public ::google::protobuf::Message {
 public:
  SdkHDelete();
  virtual ~SdkHDelete();

  SdkHDelete(const SdkHDelete& from);

  inline SdkHDelete& operator=(const SdkHDelete& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHDelete& default_instance();

  void Swap(SdkHDelete* other);

  // implements Message ----------------------------------------------

  SdkHDelete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHDelete& from);
  void MergeFrom(const SdkHDelete& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes hname = 3;
  inline bool has_hname() const;
  inline void clear_hname();
  static const int kHnameFieldNumber = 3;
  inline const ::std::string& hname() const;
  inline void set_hname(const ::std::string& value);
  inline void set_hname(const char* value);
  inline void set_hname(const void* value, size_t size);
  inline ::std::string* mutable_hname();
  inline ::std::string* release_hname();
  inline void set_allocated_hname(::std::string* hname);

  // required bytes key = 4;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 4;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional int32 writesrc = 5 [default = 0];
  inline bool has_writesrc() const;
  inline void clear_writesrc();
  static const int kWritesrcFieldNumber = 5;
  inline ::google::protobuf::int32 writesrc() const;
  inline void set_writesrc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkHDelete)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_hname();
  inline void clear_has_hname();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_writesrc();
  inline void clear_has_writesrc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* hname_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 writesrc_;
  ::std::string* key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHDelete* default_instance_;
};
// -------------------------------------------------------------------

class SdkHDeleteRet : public ::google::protobuf::Message {
 public:
  SdkHDeleteRet();
  virtual ~SdkHDeleteRet();

  SdkHDeleteRet(const SdkHDeleteRet& from);

  inline SdkHDeleteRet& operator=(const SdkHDeleteRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHDeleteRet& default_instance();

  void Swap(SdkHDeleteRet* other);

  // implements Message ----------------------------------------------

  SdkHDeleteRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHDeleteRet& from);
  void MergeFrom(const SdkHDeleteRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bool status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline bool status() const;
  inline void set_status(bool value);

  // @@protoc_insertion_point(class_scope:SdkHDeleteRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opcode_;
  bool status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHDeleteRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkHGetAllKeysByName : public ::google::protobuf::Message {
 public:
  SdkHGetAllKeysByName();
  virtual ~SdkHGetAllKeysByName();

  SdkHGetAllKeysByName(const SdkHGetAllKeysByName& from);

  inline SdkHGetAllKeysByName& operator=(const SdkHGetAllKeysByName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHGetAllKeysByName& default_instance();

  void Swap(SdkHGetAllKeysByName* other);

  // implements Message ----------------------------------------------

  SdkHGetAllKeysByName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHGetAllKeysByName& from);
  void MergeFrom(const SdkHGetAllKeysByName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes hname = 3;
  inline bool has_hname() const;
  inline void clear_hname();
  static const int kHnameFieldNumber = 3;
  inline const ::std::string& hname() const;
  inline void set_hname(const ::std::string& value);
  inline void set_hname(const char* value);
  inline void set_hname(const void* value, size_t size);
  inline ::std::string* mutable_hname();
  inline ::std::string* release_hname();
  inline void set_allocated_hname(::std::string* hname);

  // @@protoc_insertion_point(class_scope:SdkHGetAllKeysByName)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_hname();
  inline void clear_has_hname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* hname_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHGetAllKeysByName* default_instance_;
};
// -------------------------------------------------------------------

class SdkHGetAllKeysByNameRet : public ::google::protobuf::Message {
 public:
  SdkHGetAllKeysByNameRet();
  virtual ~SdkHGetAllKeysByNameRet();

  SdkHGetAllKeysByNameRet(const SdkHGetAllKeysByNameRet& from);

  inline SdkHGetAllKeysByNameRet& operator=(const SdkHGetAllKeysByNameRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHGetAllKeysByNameRet& default_instance();

  void Swap(SdkHGetAllKeysByNameRet* other);

  // implements Message ----------------------------------------------

  SdkHGetAllKeysByNameRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHGetAllKeysByNameRet& from);
  void MergeFrom(const SdkHGetAllKeysByNameRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // repeated bytes keys = 2;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 2;
  inline const ::std::string& keys(int index) const;
  inline ::std::string* mutable_keys(int index);
  inline void set_keys(int index, const ::std::string& value);
  inline void set_keys(int index, const char* value);
  inline void set_keys(int index, const void* value, size_t size);
  inline ::std::string* add_keys();
  inline void add_keys(const ::std::string& value);
  inline void add_keys(const char* value);
  inline void add_keys(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // @@protoc_insertion_point(class_scope:SdkHGetAllKeysByNameRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHGetAllKeysByNameRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkHGetAllKVsByName : public ::google::protobuf::Message {
 public:
  SdkHGetAllKVsByName();
  virtual ~SdkHGetAllKVsByName();

  SdkHGetAllKVsByName(const SdkHGetAllKVsByName& from);

  inline SdkHGetAllKVsByName& operator=(const SdkHGetAllKVsByName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHGetAllKVsByName& default_instance();

  void Swap(SdkHGetAllKVsByName* other);

  // implements Message ----------------------------------------------

  SdkHGetAllKVsByName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHGetAllKVsByName& from);
  void MergeFrom(const SdkHGetAllKVsByName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes hname = 3;
  inline bool has_hname() const;
  inline void clear_hname();
  static const int kHnameFieldNumber = 3;
  inline const ::std::string& hname() const;
  inline void set_hname(const ::std::string& value);
  inline void set_hname(const char* value);
  inline void set_hname(const void* value, size_t size);
  inline ::std::string* mutable_hname();
  inline ::std::string* release_hname();
  inline void set_allocated_hname(::std::string* hname);

  // @@protoc_insertion_point(class_scope:SdkHGetAllKVsByName)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_hname();
  inline void clear_has_hname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* hname_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHGetAllKVsByName* default_instance_;
};
// -------------------------------------------------------------------

class SdkHGetAllKVsByNameRet_HKeyValue : public ::google::protobuf::Message {
 public:
  SdkHGetAllKVsByNameRet_HKeyValue();
  virtual ~SdkHGetAllKVsByNameRet_HKeyValue();

  SdkHGetAllKVsByNameRet_HKeyValue(const SdkHGetAllKVsByNameRet_HKeyValue& from);

  inline SdkHGetAllKVsByNameRet_HKeyValue& operator=(const SdkHGetAllKVsByNameRet_HKeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHGetAllKVsByNameRet_HKeyValue& default_instance();

  void Swap(SdkHGetAllKVsByNameRet_HKeyValue* other);

  // implements Message ----------------------------------------------

  SdkHGetAllKVsByNameRet_HKeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHGetAllKVsByNameRet_HKeyValue& from);
  void MergeFrom(const SdkHGetAllKVsByNameRet_HKeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:SdkHGetAllKVsByNameRet.HKeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHGetAllKVsByNameRet_HKeyValue* default_instance_;
};
// -------------------------------------------------------------------

class SdkHGetAllKVsByNameRet : public ::google::protobuf::Message {
 public:
  SdkHGetAllKVsByNameRet();
  virtual ~SdkHGetAllKVsByNameRet();

  SdkHGetAllKVsByNameRet(const SdkHGetAllKVsByNameRet& from);

  inline SdkHGetAllKVsByNameRet& operator=(const SdkHGetAllKVsByNameRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHGetAllKVsByNameRet& default_instance();

  void Swap(SdkHGetAllKVsByNameRet* other);

  // implements Message ----------------------------------------------

  SdkHGetAllKVsByNameRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHGetAllKVsByNameRet& from);
  void MergeFrom(const SdkHGetAllKVsByNameRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SdkHGetAllKVsByNameRet_HKeyValue HKeyValue;

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // repeated .SdkHGetAllKVsByNameRet.HKeyValue rets = 2;
  inline int rets_size() const;
  inline void clear_rets();
  static const int kRetsFieldNumber = 2;
  inline const ::SdkHGetAllKVsByNameRet_HKeyValue& rets(int index) const;
  inline ::SdkHGetAllKVsByNameRet_HKeyValue* mutable_rets(int index);
  inline ::SdkHGetAllKVsByNameRet_HKeyValue* add_rets();
  inline const ::google::protobuf::RepeatedPtrField< ::SdkHGetAllKVsByNameRet_HKeyValue >&
      rets() const;
  inline ::google::protobuf::RepeatedPtrField< ::SdkHGetAllKVsByNameRet_HKeyValue >*
      mutable_rets();

  // @@protoc_insertion_point(class_scope:SdkHGetAllKVsByNameRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SdkHGetAllKVsByNameRet_HKeyValue > rets_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHGetAllKVsByNameRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkHMput_HKeyValue : public ::google::protobuf::Message {
 public:
  SdkHMput_HKeyValue();
  virtual ~SdkHMput_HKeyValue();

  SdkHMput_HKeyValue(const SdkHMput_HKeyValue& from);

  inline SdkHMput_HKeyValue& operator=(const SdkHMput_HKeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHMput_HKeyValue& default_instance();

  void Swap(SdkHMput_HKeyValue* other);

  // implements Message ----------------------------------------------

  SdkHMput_HKeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHMput_HKeyValue& from);
  void MergeFrom(const SdkHMput_HKeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:SdkHMput.HKeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHMput_HKeyValue* default_instance_;
};
// -------------------------------------------------------------------

class SdkHMput : public ::google::protobuf::Message {
 public:
  SdkHMput();
  virtual ~SdkHMput();

  SdkHMput(const SdkHMput& from);

  inline SdkHMput& operator=(const SdkHMput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHMput& default_instance();

  void Swap(SdkHMput* other);

  // implements Message ----------------------------------------------

  SdkHMput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHMput& from);
  void MergeFrom(const SdkHMput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SdkHMput_HKeyValue HKeyValue;

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes hname = 3;
  inline bool has_hname() const;
  inline void clear_hname();
  static const int kHnameFieldNumber = 3;
  inline const ::std::string& hname() const;
  inline void set_hname(const ::std::string& value);
  inline void set_hname(const char* value);
  inline void set_hname(const void* value, size_t size);
  inline ::std::string* mutable_hname();
  inline ::std::string* release_hname();
  inline void set_allocated_hname(::std::string* hname);

  // repeated .SdkHMput.HKeyValue kvs = 4;
  inline int kvs_size() const;
  inline void clear_kvs();
  static const int kKvsFieldNumber = 4;
  inline const ::SdkHMput_HKeyValue& kvs(int index) const;
  inline ::SdkHMput_HKeyValue* mutable_kvs(int index);
  inline ::SdkHMput_HKeyValue* add_kvs();
  inline const ::google::protobuf::RepeatedPtrField< ::SdkHMput_HKeyValue >&
      kvs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SdkHMput_HKeyValue >*
      mutable_kvs();

  // optional int32 writesrc = 5 [default = 0];
  inline bool has_writesrc() const;
  inline void clear_writesrc();
  static const int kWritesrcFieldNumber = 5;
  inline ::google::protobuf::int32 writesrc() const;
  inline void set_writesrc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkHMput)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_hname();
  inline void clear_has_hname();
  inline void set_has_writesrc();
  inline void clear_has_writesrc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* hname_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 writesrc_;
  ::google::protobuf::RepeatedPtrField< ::SdkHMput_HKeyValue > kvs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHMput* default_instance_;
};
// -------------------------------------------------------------------

class SdkHMputRet_HKeyRetval : public ::google::protobuf::Message {
 public:
  SdkHMputRet_HKeyRetval();
  virtual ~SdkHMputRet_HKeyRetval();

  SdkHMputRet_HKeyRetval(const SdkHMputRet_HKeyRetval& from);

  inline SdkHMputRet_HKeyRetval& operator=(const SdkHMputRet_HKeyRetval& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHMputRet_HKeyRetval& default_instance();

  void Swap(SdkHMputRet_HKeyRetval* other);

  // implements Message ----------------------------------------------

  SdkHMputRet_HKeyRetval* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHMputRet_HKeyRetval& from);
  void MergeFrom(const SdkHMputRet_HKeyRetval& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required int32 retval = 2;
  inline bool has_retval() const;
  inline void clear_retval();
  static const int kRetvalFieldNumber = 2;
  inline ::google::protobuf::int32 retval() const;
  inline void set_retval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkHMputRet.HKeyRetval)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_retval();
  inline void clear_has_retval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::google::protobuf::int32 retval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHMputRet_HKeyRetval* default_instance_;
};
// -------------------------------------------------------------------

class SdkHMputRet : public ::google::protobuf::Message {
 public:
  SdkHMputRet();
  virtual ~SdkHMputRet();

  SdkHMputRet(const SdkHMputRet& from);

  inline SdkHMputRet& operator=(const SdkHMputRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHMputRet& default_instance();

  void Swap(SdkHMputRet* other);

  // implements Message ----------------------------------------------

  SdkHMputRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHMputRet& from);
  void MergeFrom(const SdkHMputRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SdkHMputRet_HKeyRetval HKeyRetval;

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // repeated .SdkHMputRet.HKeyRetval krvs = 2;
  inline int krvs_size() const;
  inline void clear_krvs();
  static const int kKrvsFieldNumber = 2;
  inline const ::SdkHMputRet_HKeyRetval& krvs(int index) const;
  inline ::SdkHMputRet_HKeyRetval* mutable_krvs(int index);
  inline ::SdkHMputRet_HKeyRetval* add_krvs();
  inline const ::google::protobuf::RepeatedPtrField< ::SdkHMputRet_HKeyRetval >&
      krvs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SdkHMputRet_HKeyRetval >*
      mutable_krvs();

  // @@protoc_insertion_point(class_scope:SdkHMputRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SdkHMputRet_HKeyRetval > krvs_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHMputRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkHMget : public ::google::protobuf::Message {
 public:
  SdkHMget();
  virtual ~SdkHMget();

  SdkHMget(const SdkHMget& from);

  inline SdkHMget& operator=(const SdkHMget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHMget& default_instance();

  void Swap(SdkHMget* other);

  // implements Message ----------------------------------------------

  SdkHMget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHMget& from);
  void MergeFrom(const SdkHMget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes hname = 3;
  inline bool has_hname() const;
  inline void clear_hname();
  static const int kHnameFieldNumber = 3;
  inline const ::std::string& hname() const;
  inline void set_hname(const ::std::string& value);
  inline void set_hname(const char* value);
  inline void set_hname(const void* value, size_t size);
  inline ::std::string* mutable_hname();
  inline ::std::string* release_hname();
  inline void set_allocated_hname(::std::string* hname);

  // repeated bytes keys = 4;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 4;
  inline const ::std::string& keys(int index) const;
  inline ::std::string* mutable_keys(int index);
  inline void set_keys(int index, const ::std::string& value);
  inline void set_keys(int index, const char* value);
  inline void set_keys(int index, const void* value, size_t size);
  inline ::std::string* add_keys();
  inline void add_keys(const ::std::string& value);
  inline void add_keys(const char* value);
  inline void add_keys(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // @@protoc_insertion_point(class_scope:SdkHMget)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_hname();
  inline void clear_has_hname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* hname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHMget* default_instance_;
};
// -------------------------------------------------------------------

class SdkHMgetRet_HKeyValue : public ::google::protobuf::Message {
 public:
  SdkHMgetRet_HKeyValue();
  virtual ~SdkHMgetRet_HKeyValue();

  SdkHMgetRet_HKeyValue(const SdkHMgetRet_HKeyValue& from);

  inline SdkHMgetRet_HKeyValue& operator=(const SdkHMgetRet_HKeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHMgetRet_HKeyValue& default_instance();

  void Swap(SdkHMgetRet_HKeyValue* other);

  // implements Message ----------------------------------------------

  SdkHMgetRet_HKeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHMgetRet_HKeyValue& from);
  void MergeFrom(const SdkHMgetRet_HKeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required int32 retval = 3;
  inline bool has_retval() const;
  inline void clear_retval();
  static const int kRetvalFieldNumber = 3;
  inline ::google::protobuf::int32 retval() const;
  inline void set_retval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkHMgetRet.HKeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_retval();
  inline void clear_has_retval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;
  ::google::protobuf::int32 retval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHMgetRet_HKeyValue* default_instance_;
};
// -------------------------------------------------------------------

class SdkHMgetRet : public ::google::protobuf::Message {
 public:
  SdkHMgetRet();
  virtual ~SdkHMgetRet();

  SdkHMgetRet(const SdkHMgetRet& from);

  inline SdkHMgetRet& operator=(const SdkHMgetRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkHMgetRet& default_instance();

  void Swap(SdkHMgetRet* other);

  // implements Message ----------------------------------------------

  SdkHMgetRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkHMgetRet& from);
  void MergeFrom(const SdkHMgetRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SdkHMgetRet_HKeyValue HKeyValue;

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // repeated .SdkHMgetRet.HKeyValue kvs = 2;
  inline int kvs_size() const;
  inline void clear_kvs();
  static const int kKvsFieldNumber = 2;
  inline const ::SdkHMgetRet_HKeyValue& kvs(int index) const;
  inline ::SdkHMgetRet_HKeyValue* mutable_kvs(int index);
  inline ::SdkHMgetRet_HKeyValue* add_kvs();
  inline const ::google::protobuf::RepeatedPtrField< ::SdkHMgetRet_HKeyValue >&
      kvs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SdkHMgetRet_HKeyValue >*
      mutable_kvs();

  // @@protoc_insertion_point(class_scope:SdkHMgetRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SdkHMgetRet_HKeyValue > kvs_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkHMgetRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkSetWithTTL : public ::google::protobuf::Message {
 public:
  SdkSetWithTTL();
  virtual ~SdkSetWithTTL();

  SdkSetWithTTL(const SdkSetWithTTL& from);

  inline SdkSetWithTTL& operator=(const SdkSetWithTTL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkSetWithTTL& default_instance();

  void Swap(SdkSetWithTTL* other);

  // implements Message ----------------------------------------------

  SdkSetWithTTL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkSetWithTTL& from);
  void MergeFrom(const SdkSetWithTTL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required int32 ttl = 5;
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 5;
  inline ::google::protobuf::int32 ttl() const;
  inline void set_ttl(::google::protobuf::int32 value);

  // optional int32 writesrc = 6 [default = 0];
  inline bool has_writesrc() const;
  inline void clear_writesrc();
  static const int kWritesrcFieldNumber = 6;
  inline ::google::protobuf::int32 writesrc() const;
  inline void set_writesrc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkSetWithTTL)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_ttl();
  inline void clear_has_ttl();
  inline void set_has_writesrc();
  inline void clear_has_writesrc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* key_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 ttl_;
  ::std::string* value_;
  ::google::protobuf::int32 writesrc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkSetWithTTL* default_instance_;
};
// -------------------------------------------------------------------

class SdkSetWithTTLRet : public ::google::protobuf::Message {
 public:
  SdkSetWithTTLRet();
  virtual ~SdkSetWithTTLRet();

  SdkSetWithTTLRet(const SdkSetWithTTLRet& from);

  inline SdkSetWithTTLRet& operator=(const SdkSetWithTTLRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkSetWithTTLRet& default_instance();

  void Swap(SdkSetWithTTLRet* other);

  // implements Message ----------------------------------------------

  SdkSetWithTTLRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkSetWithTTLRet& from);
  void MergeFrom(const SdkSetWithTTLRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bool status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline bool status() const;
  inline void set_status(bool value);

  // optional string master = 3;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 3;
  inline const ::std::string& master() const;
  inline void set_master(const ::std::string& value);
  inline void set_master(const char* value);
  inline void set_master(const char* value, size_t size);
  inline ::std::string* mutable_master();
  inline ::std::string* release_master();
  inline void set_allocated_master(::std::string* master);

  // @@protoc_insertion_point(class_scope:SdkSetWithTTLRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_master();
  inline void clear_has_master();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opcode_;
  bool status_;
  ::std::string* master_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkSetWithTTLRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkLSize : public ::google::protobuf::Message {
 public:
  SdkLSize();
  virtual ~SdkLSize();

  SdkLSize(const SdkLSize& from);

  inline SdkLSize& operator=(const SdkLSize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkLSize& default_instance();

  void Swap(SdkLSize* other);

  // implements Message ----------------------------------------------

  SdkLSize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkLSize& from);
  void MergeFrom(const SdkLSize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:SdkLSize)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* name_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkLSize* default_instance_;
};
// -------------------------------------------------------------------

class SdkLSizeRet : public ::google::protobuf::Message {
 public:
  SdkLSizeRet();
  virtual ~SdkLSizeRet();

  SdkLSizeRet(const SdkLSizeRet& from);

  inline SdkLSizeRet& operator=(const SdkLSizeRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkLSizeRet& default_instance();

  void Swap(SdkLSizeRet* other);

  // implements Message ----------------------------------------------

  SdkLSizeRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkLSizeRet& from);
  void MergeFrom(const SdkLSizeRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required uint64 size_r = 2;
  inline bool has_size_r() const;
  inline void clear_size_r();
  static const int kSizeRFieldNumber = 2;
  inline ::google::protobuf::uint64 size_r() const;
  inline void set_size_r(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SdkLSizeRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_size_r();
  inline void clear_has_size_r();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 size_r_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkLSizeRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkLGet : public ::google::protobuf::Message {
 public:
  SdkLGet();
  virtual ~SdkLGet();

  SdkLGet(const SdkLGet& from);

  inline SdkLGet& operator=(const SdkLGet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkLGet& default_instance();

  void Swap(SdkLGet* other);

  // implements Message ----------------------------------------------

  SdkLGet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkLGet& from);
  void MergeFrom(const SdkLGet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 frontorback = 4;
  inline bool has_frontorback() const;
  inline void clear_frontorback();
  static const int kFrontorbackFieldNumber = 4;
  inline ::google::protobuf::int32 frontorback() const;
  inline void set_frontorback(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkLGet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_frontorback();
  inline void clear_has_frontorback();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 frontorback_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkLGet* default_instance_;
};
// -------------------------------------------------------------------

class SdkLGetRet : public ::google::protobuf::Message {
 public:
  SdkLGetRet();
  virtual ~SdkLGetRet();

  SdkLGetRet(const SdkLGetRet& from);

  inline SdkLGetRet& operator=(const SdkLGetRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkLGetRet& default_instance();

  void Swap(SdkLGetRet* other);

  // implements Message ----------------------------------------------

  SdkLGetRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkLGetRet& from);
  void MergeFrom(const SdkLGetRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:SdkLGetRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkLGetRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkLPut : public ::google::protobuf::Message {
 public:
  SdkLPut();
  virtual ~SdkLPut();

  SdkLPut(const SdkLPut& from);

  inline SdkLPut& operator=(const SdkLPut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkLPut& default_instance();

  void Swap(SdkLPut* other);

  // implements Message ----------------------------------------------

  SdkLPut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkLPut& from);
  void MergeFrom(const SdkLPut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required int32 frontorback = 5;
  inline bool has_frontorback() const;
  inline void clear_frontorback();
  static const int kFrontorbackFieldNumber = 5;
  inline ::google::protobuf::int32 frontorback() const;
  inline void set_frontorback(::google::protobuf::int32 value);

  // optional int32 writesrc = 6 [default = 0];
  inline bool has_writesrc() const;
  inline void clear_writesrc();
  static const int kWritesrcFieldNumber = 6;
  inline ::google::protobuf::int32 writesrc() const;
  inline void set_writesrc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkLPut)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_frontorback();
  inline void clear_has_frontorback();
  inline void set_has_writesrc();
  inline void clear_has_writesrc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* name_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 frontorback_;
  ::std::string* value_;
  ::google::protobuf::int32 writesrc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkLPut* default_instance_;
};
// -------------------------------------------------------------------

class SdkLPutRet : public ::google::protobuf::Message {
 public:
  SdkLPutRet();
  virtual ~SdkLPutRet();

  SdkLPutRet(const SdkLPutRet& from);

  inline SdkLPutRet& operator=(const SdkLPutRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkLPutRet& default_instance();

  void Swap(SdkLPutRet* other);

  // implements Message ----------------------------------------------

  SdkLPutRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkLPutRet& from);
  void MergeFrom(const SdkLPutRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bool status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline bool status() const;
  inline void set_status(bool value);

  // @@protoc_insertion_point(class_scope:SdkLPutRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opcode_;
  bool status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkLPutRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkLPop : public ::google::protobuf::Message {
 public:
  SdkLPop();
  virtual ~SdkLPop();

  SdkLPop(const SdkLPop& from);

  inline SdkLPop& operator=(const SdkLPop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkLPop& default_instance();

  void Swap(SdkLPop* other);

  // implements Message ----------------------------------------------

  SdkLPop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkLPop& from);
  void MergeFrom(const SdkLPop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 frontorback = 4;
  inline bool has_frontorback() const;
  inline void clear_frontorback();
  static const int kFrontorbackFieldNumber = 4;
  inline ::google::protobuf::int32 frontorback() const;
  inline void set_frontorback(::google::protobuf::int32 value);

  // optional int32 writesrc = 5 [default = 0];
  inline bool has_writesrc() const;
  inline void clear_writesrc();
  static const int kWritesrcFieldNumber = 5;
  inline ::google::protobuf::int32 writesrc() const;
  inline void set_writesrc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkLPop)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_frontorback();
  inline void clear_has_frontorback();
  inline void set_has_writesrc();
  inline void clear_has_writesrc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 frontorback_;
  ::std::string* name_;
  ::google::protobuf::int32 writesrc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkLPop* default_instance_;
};
// -------------------------------------------------------------------

class SdkLPopRet : public ::google::protobuf::Message {
 public:
  SdkLPopRet();
  virtual ~SdkLPopRet();

  SdkLPopRet(const SdkLPopRet& from);

  inline SdkLPopRet& operator=(const SdkLPopRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkLPopRet& default_instance();

  void Swap(SdkLPopRet* other);

  // implements Message ----------------------------------------------

  SdkLPopRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkLPopRet& from);
  void MergeFrom(const SdkLPopRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:SdkLPopRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkLPopRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkLIndex : public ::google::protobuf::Message {
 public:
  SdkLIndex();
  virtual ~SdkLIndex();

  SdkLIndex(const SdkLIndex& from);

  inline SdkLIndex& operator=(const SdkLIndex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkLIndex& default_instance();

  void Swap(SdkLIndex* other);

  // implements Message ----------------------------------------------

  SdkLIndex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkLIndex& from);
  void MergeFrom(const SdkLIndex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint64 index = 4;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 4;
  inline ::google::protobuf::uint64 index() const;
  inline void set_index(::google::protobuf::uint64 value);

  // required int32 frontorback = 5;
  inline bool has_frontorback() const;
  inline void clear_frontorback();
  static const int kFrontorbackFieldNumber = 5;
  inline ::google::protobuf::int32 frontorback() const;
  inline void set_frontorback(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkLIndex)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_frontorback();
  inline void clear_has_frontorback();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* name_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 frontorback_;
  ::google::protobuf::uint64 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkLIndex* default_instance_;
};
// -------------------------------------------------------------------

class SdkLIndexRet : public ::google::protobuf::Message {
 public:
  SdkLIndexRet();
  virtual ~SdkLIndexRet();

  SdkLIndexRet(const SdkLIndexRet& from);

  inline SdkLIndexRet& operator=(const SdkLIndexRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkLIndexRet& default_instance();

  void Swap(SdkLIndexRet* other);

  // implements Message ----------------------------------------------

  SdkLIndexRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkLIndexRet& from);
  void MergeFrom(const SdkLIndexRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:SdkLIndexRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkLIndexRet* default_instance_;
};
// -------------------------------------------------------------------

class SdkLRange : public ::google::protobuf::Message {
 public:
  SdkLRange();
  virtual ~SdkLRange();

  SdkLRange(const SdkLRange& from);

  inline SdkLRange& operator=(const SdkLRange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkLRange& default_instance();

  void Swap(SdkLRange* other);

  // implements Message ----------------------------------------------

  SdkLRange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkLRange& from);
  void MergeFrom(const SdkLRange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // required bytes table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const void* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint64 from = 4;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 4;
  inline ::google::protobuf::uint64 from() const;
  inline void set_from(::google::protobuf::uint64 value);

  // required uint64 to = 5;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 5;
  inline ::google::protobuf::uint64 to() const;
  inline void set_to(::google::protobuf::uint64 value);

  // required int32 frontorback = 6;
  inline bool has_frontorback() const;
  inline void clear_frontorback();
  static const int kFrontorbackFieldNumber = 6;
  inline ::google::protobuf::int32 frontorback() const;
  inline void set_frontorback(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SdkLRange)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_frontorback();
  inline void clear_has_frontorback();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_;
  ::std::string* name_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 frontorback_;
  ::google::protobuf::uint64 from_;
  ::google::protobuf::uint64 to_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkLRange* default_instance_;
};
// -------------------------------------------------------------------

class SdkLRangeRet : public ::google::protobuf::Message {
 public:
  SdkLRangeRet();
  virtual ~SdkLRangeRet();

  SdkLRangeRet(const SdkLRangeRet& from);

  inline SdkLRangeRet& operator=(const SdkLRangeRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SdkLRangeRet& default_instance();

  void Swap(SdkLRangeRet* other);

  // implements Message ----------------------------------------------

  SdkLRangeRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SdkLRangeRet& from);
  void MergeFrom(const SdkLRangeRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::int32 opcode() const;
  inline void set_opcode(::google::protobuf::int32 value);

  // repeated bytes value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const void* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // @@protoc_insertion_point(class_scope:SdkLRangeRet)
 private:
  inline void set_has_opcode();
  inline void clear_has_opcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  ::google::protobuf::int32 opcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fsdk_2eproto();
  friend void protobuf_AssignDesc_bada_5fsdk_2eproto();
  friend void protobuf_ShutdownFile_bada_5fsdk_2eproto();

  void InitAsDefaultInstance();
  static SdkLRangeRet* default_instance_;
};
// ===================================================================


// ===================================================================

// SdkInvalidOperation

// required int32 opcode = 1;
inline bool SdkInvalidOperation::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkInvalidOperation::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkInvalidOperation::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkInvalidOperation::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkInvalidOperation::opcode() const {
  return opcode_;
}
inline void SdkInvalidOperation::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required int32 what = 2;
inline bool SdkInvalidOperation::has_what() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkInvalidOperation::set_has_what() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkInvalidOperation::clear_has_what() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkInvalidOperation::clear_what() {
  what_ = 0;
  clear_has_what();
}
inline ::google::protobuf::int32 SdkInvalidOperation::what() const {
  return what_;
}
inline void SdkInvalidOperation::set_what(::google::protobuf::int32 value) {
  set_has_what();
  what_ = value;
}

// required bytes why = 3;
inline bool SdkInvalidOperation::has_why() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkInvalidOperation::set_has_why() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkInvalidOperation::clear_has_why() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkInvalidOperation::clear_why() {
  if (why_ != &::google::protobuf::internal::kEmptyString) {
    why_->clear();
  }
  clear_has_why();
}
inline const ::std::string& SdkInvalidOperation::why() const {
  return *why_;
}
inline void SdkInvalidOperation::set_why(const ::std::string& value) {
  set_has_why();
  if (why_ == &::google::protobuf::internal::kEmptyString) {
    why_ = new ::std::string;
  }
  why_->assign(value);
}
inline void SdkInvalidOperation::set_why(const char* value) {
  set_has_why();
  if (why_ == &::google::protobuf::internal::kEmptyString) {
    why_ = new ::std::string;
  }
  why_->assign(value);
}
inline void SdkInvalidOperation::set_why(const void* value, size_t size) {
  set_has_why();
  if (why_ == &::google::protobuf::internal::kEmptyString) {
    why_ = new ::std::string;
  }
  why_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkInvalidOperation::mutable_why() {
  set_has_why();
  if (why_ == &::google::protobuf::internal::kEmptyString) {
    why_ = new ::std::string;
  }
  return why_;
}
inline ::std::string* SdkInvalidOperation::release_why() {
  clear_has_why();
  if (why_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = why_;
    why_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkInvalidOperation::set_allocated_why(::std::string* why) {
  if (why_ != &::google::protobuf::internal::kEmptyString) {
    delete why_;
  }
  if (why) {
    set_has_why();
    why_ = why;
  } else {
    clear_has_why();
    why_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkSet

// required int32 opcode = 1;
inline bool SdkSet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkSet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkSet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkSet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkSet::opcode() const {
  return opcode_;
}
inline void SdkSet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkSet::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkSet::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkSet::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkSet::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkSet::table() const {
  return *table_;
}
inline void SdkSet::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkSet::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkSet::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkSet::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkSet::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkSet::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes key = 3;
inline bool SdkSet::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkSet::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkSet::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkSet::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkSet::key() const {
  return *key_;
}
inline void SdkSet::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkSet::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkSet::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkSet::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkSet::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkSet::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 4;
inline bool SdkSet::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkSet::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkSet::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkSet::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkSet::value() const {
  return *value_;
}
inline void SdkSet::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkSet::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkSet::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkSet::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkSet::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkSet::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 writesrc = 5 [default = 0];
inline bool SdkSet::has_writesrc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdkSet::set_has_writesrc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SdkSet::clear_has_writesrc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SdkSet::clear_writesrc() {
  writesrc_ = 0;
  clear_has_writesrc();
}
inline ::google::protobuf::int32 SdkSet::writesrc() const {
  return writesrc_;
}
inline void SdkSet::set_writesrc(::google::protobuf::int32 value) {
  set_has_writesrc();
  writesrc_ = value;
}

// -------------------------------------------------------------------

// SdkSetRet

// required int32 opcode = 1;
inline bool SdkSetRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkSetRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkSetRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkSetRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkSetRet::opcode() const {
  return opcode_;
}
inline void SdkSetRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bool status = 2;
inline bool SdkSetRet::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkSetRet::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkSetRet::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkSetRet::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool SdkSetRet::status() const {
  return status_;
}
inline void SdkSetRet::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// optional string master = 3;
inline bool SdkSetRet::has_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkSetRet::set_has_master() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkSetRet::clear_has_master() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkSetRet::clear_master() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    master_->clear();
  }
  clear_has_master();
}
inline const ::std::string& SdkSetRet::master() const {
  return *master_;
}
inline void SdkSetRet::set_master(const ::std::string& value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkSetRet::set_master(const char* value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkSetRet::set_master(const char* value, size_t size) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkSetRet::mutable_master() {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  return master_;
}
inline ::std::string* SdkSetRet::release_master() {
  clear_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_;
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkSetRet::set_allocated_master(::std::string* master) {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (master) {
    set_has_master();
    master_ = master;
  } else {
    clear_has_master();
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkCas

// required int32 opcode = 1;
inline bool SdkCas::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkCas::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkCas::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkCas::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkCas::opcode() const {
  return opcode_;
}
inline void SdkCas::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkCas::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkCas::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkCas::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkCas::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkCas::table() const {
  return *table_;
}
inline void SdkCas::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkCas::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkCas::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkCas::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkCas::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkCas::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes key = 3;
inline bool SdkCas::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkCas::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkCas::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkCas::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkCas::key() const {
  return *key_;
}
inline void SdkCas::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkCas::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkCas::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkCas::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkCas::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkCas::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 4;
inline bool SdkCas::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkCas::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkCas::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkCas::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkCas::value() const {
  return *value_;
}
inline void SdkCas::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkCas::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkCas::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkCas::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkCas::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkCas::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 version = 5;
inline bool SdkCas::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdkCas::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SdkCas::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SdkCas::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 SdkCas::version() const {
  return version_;
}
inline void SdkCas::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional int32 writesrc = 6 [default = 0];
inline bool SdkCas::has_writesrc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SdkCas::set_has_writesrc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SdkCas::clear_has_writesrc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SdkCas::clear_writesrc() {
  writesrc_ = 0;
  clear_has_writesrc();
}
inline ::google::protobuf::int32 SdkCas::writesrc() const {
  return writesrc_;
}
inline void SdkCas::set_writesrc(::google::protobuf::int32 value) {
  set_has_writesrc();
  writesrc_ = value;
}

// -------------------------------------------------------------------

// SdkCasRet

// required int32 opcode = 1;
inline bool SdkCasRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkCasRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkCasRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkCasRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkCasRet::opcode() const {
  return opcode_;
}
inline void SdkCasRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bool status = 2;
inline bool SdkCasRet::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkCasRet::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkCasRet::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkCasRet::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool SdkCasRet::status() const {
  return status_;
}
inline void SdkCasRet::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// optional string master = 3;
inline bool SdkCasRet::has_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkCasRet::set_has_master() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkCasRet::clear_has_master() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkCasRet::clear_master() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    master_->clear();
  }
  clear_has_master();
}
inline const ::std::string& SdkCasRet::master() const {
  return *master_;
}
inline void SdkCasRet::set_master(const ::std::string& value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkCasRet::set_master(const char* value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkCasRet::set_master(const char* value, size_t size) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkCasRet::mutable_master() {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  return master_;
}
inline ::std::string* SdkCasRet::release_master() {
  clear_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_;
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkCasRet::set_allocated_master(::std::string* master) {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (master) {
    set_has_master();
    master_ = master;
  } else {
    clear_has_master();
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkGet

// required int32 opcode = 1;
inline bool SdkGet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkGet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkGet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkGet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkGet::opcode() const {
  return opcode_;
}
inline void SdkGet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkGet::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkGet::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkGet::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkGet::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkGet::table() const {
  return *table_;
}
inline void SdkGet::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkGet::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkGet::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkGet::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkGet::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkGet::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes key = 3;
inline bool SdkGet::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkGet::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkGet::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkGet::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkGet::key() const {
  return *key_;
}
inline void SdkGet::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkGet::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkGet::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkGet::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkGet::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkGet::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkGetRet

// required int32 opcode = 1;
inline bool SdkGetRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkGetRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkGetRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkGetRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkGetRet::opcode() const {
  return opcode_;
}
inline void SdkGetRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes value = 2;
inline bool SdkGetRet::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkGetRet::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkGetRet::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkGetRet::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkGetRet::value() const {
  return *value_;
}
inline void SdkGetRet::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkGetRet::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkGetRet::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkGetRet::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkGetRet::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkGetRet::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string master = 3;
inline bool SdkGetRet::has_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkGetRet::set_has_master() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkGetRet::clear_has_master() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkGetRet::clear_master() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    master_->clear();
  }
  clear_has_master();
}
inline const ::std::string& SdkGetRet::master() const {
  return *master_;
}
inline void SdkGetRet::set_master(const ::std::string& value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkGetRet::set_master(const char* value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkGetRet::set_master(const char* value, size_t size) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkGetRet::mutable_master() {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  return master_;
}
inline ::std::string* SdkGetRet::release_master() {
  clear_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_;
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkGetRet::set_allocated_master(::std::string* master) {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (master) {
    set_has_master();
    master_ = master;
  } else {
    clear_has_master();
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkGetV

// required int32 opcode = 1;
inline bool SdkGetV::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkGetV::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkGetV::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkGetV::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkGetV::opcode() const {
  return opcode_;
}
inline void SdkGetV::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkGetV::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkGetV::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkGetV::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkGetV::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkGetV::table() const {
  return *table_;
}
inline void SdkGetV::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkGetV::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkGetV::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkGetV::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkGetV::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkGetV::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes key = 3;
inline bool SdkGetV::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkGetV::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkGetV::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkGetV::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkGetV::key() const {
  return *key_;
}
inline void SdkGetV::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkGetV::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkGetV::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkGetV::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkGetV::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkGetV::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkGetVRet

// required int32 opcode = 1;
inline bool SdkGetVRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkGetVRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkGetVRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkGetVRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkGetVRet::opcode() const {
  return opcode_;
}
inline void SdkGetVRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes value = 2;
inline bool SdkGetVRet::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkGetVRet::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkGetVRet::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkGetVRet::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkGetVRet::value() const {
  return *value_;
}
inline void SdkGetVRet::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkGetVRet::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkGetVRet::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkGetVRet::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkGetVRet::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkGetVRet::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 version = 3;
inline bool SdkGetVRet::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkGetVRet::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkGetVRet::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkGetVRet::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 SdkGetVRet::version() const {
  return version_;
}
inline void SdkGetVRet::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional string master = 4;
inline bool SdkGetVRet::has_master() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkGetVRet::set_has_master() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkGetVRet::clear_has_master() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkGetVRet::clear_master() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    master_->clear();
  }
  clear_has_master();
}
inline const ::std::string& SdkGetVRet::master() const {
  return *master_;
}
inline void SdkGetVRet::set_master(const ::std::string& value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkGetVRet::set_master(const char* value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkGetVRet::set_master(const char* value, size_t size) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkGetVRet::mutable_master() {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  return master_;
}
inline ::std::string* SdkGetVRet::release_master() {
  clear_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_;
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkGetVRet::set_allocated_master(::std::string* master) {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (master) {
    set_has_master();
    master_ = master;
  } else {
    clear_has_master();
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkDelete

// required int32 opcode = 1;
inline bool SdkDelete::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkDelete::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkDelete::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkDelete::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkDelete::opcode() const {
  return opcode_;
}
inline void SdkDelete::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkDelete::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkDelete::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkDelete::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkDelete::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkDelete::table() const {
  return *table_;
}
inline void SdkDelete::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkDelete::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkDelete::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkDelete::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkDelete::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkDelete::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes key = 3;
inline bool SdkDelete::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkDelete::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkDelete::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkDelete::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkDelete::key() const {
  return *key_;
}
inline void SdkDelete::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkDelete::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkDelete::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkDelete::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkDelete::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkDelete::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 writesrc = 4 [default = 0];
inline bool SdkDelete::has_writesrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkDelete::set_has_writesrc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkDelete::clear_has_writesrc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkDelete::clear_writesrc() {
  writesrc_ = 0;
  clear_has_writesrc();
}
inline ::google::protobuf::int32 SdkDelete::writesrc() const {
  return writesrc_;
}
inline void SdkDelete::set_writesrc(::google::protobuf::int32 value) {
  set_has_writesrc();
  writesrc_ = value;
}

// -------------------------------------------------------------------

// SdkDeleteRet

// required int32 opcode = 1;
inline bool SdkDeleteRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkDeleteRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkDeleteRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkDeleteRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkDeleteRet::opcode() const {
  return opcode_;
}
inline void SdkDeleteRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bool status = 2;
inline bool SdkDeleteRet::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkDeleteRet::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkDeleteRet::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkDeleteRet::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool SdkDeleteRet::status() const {
  return status_;
}
inline void SdkDeleteRet::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// optional string master = 3;
inline bool SdkDeleteRet::has_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkDeleteRet::set_has_master() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkDeleteRet::clear_has_master() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkDeleteRet::clear_master() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    master_->clear();
  }
  clear_has_master();
}
inline const ::std::string& SdkDeleteRet::master() const {
  return *master_;
}
inline void SdkDeleteRet::set_master(const ::std::string& value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkDeleteRet::set_master(const char* value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkDeleteRet::set_master(const char* value, size_t size) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkDeleteRet::mutable_master() {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  return master_;
}
inline ::std::string* SdkDeleteRet::release_master() {
  clear_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_;
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkDeleteRet::set_allocated_master(::std::string* master) {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (master) {
    set_has_master();
    master_ = master;
  } else {
    clear_has_master();
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkPing

// required int32 opcode = 1;
inline bool SdkPing::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkPing::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkPing::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkPing::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkPing::opcode() const {
  return opcode_;
}
inline void SdkPing::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// -------------------------------------------------------------------

// SdkPingRet

// required int32 opcode = 1;
inline bool SdkPingRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkPingRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkPingRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkPingRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkPingRet::opcode() const {
  return opcode_;
}
inline void SdkPingRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bool status = 2;
inline bool SdkPingRet::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkPingRet::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkPingRet::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkPingRet::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool SdkPingRet::status() const {
  return status_;
}
inline void SdkPingRet::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// SdkGetIfAll

// required int32 opcode = 1;
inline bool SdkGetIfAll::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkGetIfAll::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkGetIfAll::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkGetIfAll::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkGetIfAll::opcode() const {
  return opcode_;
}
inline void SdkGetIfAll::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkGetIfAll::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkGetIfAll::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkGetIfAll::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkGetIfAll::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkGetIfAll::table() const {
  return *table_;
}
inline void SdkGetIfAll::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkGetIfAll::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkGetIfAll::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkGetIfAll::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkGetIfAll::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkGetIfAll::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes key = 3;
inline bool SdkGetIfAll::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkGetIfAll::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkGetIfAll::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkGetIfAll::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkGetIfAll::key() const {
  return *key_;
}
inline void SdkGetIfAll::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkGetIfAll::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkGetIfAll::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkGetIfAll::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkGetIfAll::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkGetIfAll::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool Strict = 4;
inline bool SdkGetIfAll::has_strict() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkGetIfAll::set_has_strict() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkGetIfAll::clear_has_strict() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkGetIfAll::clear_strict() {
  strict_ = false;
  clear_has_strict();
}
inline bool SdkGetIfAll::strict() const {
  return strict_;
}
inline void SdkGetIfAll::set_strict(bool value) {
  set_has_strict();
  strict_ = value;
}

// -------------------------------------------------------------------

// SdkGetIfAllRet

// required int32 opcode = 1;
inline bool SdkGetIfAllRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkGetIfAllRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkGetIfAllRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkGetIfAllRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkGetIfAllRet::opcode() const {
  return opcode_;
}
inline void SdkGetIfAllRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes value = 2;
inline bool SdkGetIfAllRet::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkGetIfAllRet::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkGetIfAllRet::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkGetIfAllRet::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkGetIfAllRet::value() const {
  return *value_;
}
inline void SdkGetIfAllRet::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkGetIfAllRet::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkGetIfAllRet::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkGetIfAllRet::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkGetIfAllRet::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkGetIfAllRet::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 version = 3;
inline bool SdkGetIfAllRet::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkGetIfAllRet::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkGetIfAllRet::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkGetIfAllRet::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 SdkGetIfAllRet::version() const {
  return version_;
}
inline void SdkGetIfAllRet::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional string master = 4;
inline bool SdkGetIfAllRet::has_master() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkGetIfAllRet::set_has_master() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkGetIfAllRet::clear_has_master() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkGetIfAllRet::clear_master() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    master_->clear();
  }
  clear_has_master();
}
inline const ::std::string& SdkGetIfAllRet::master() const {
  return *master_;
}
inline void SdkGetIfAllRet::set_master(const ::std::string& value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkGetIfAllRet::set_master(const char* value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkGetIfAllRet::set_master(const char* value, size_t size) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkGetIfAllRet::mutable_master() {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  return master_;
}
inline ::std::string* SdkGetIfAllRet::release_master() {
  clear_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_;
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkGetIfAllRet::set_allocated_master(::std::string* master) {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (master) {
    set_has_master();
    master_ = master;
  } else {
    clear_has_master();
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkMGet

// required int32 opcode = 1;
inline bool SdkMGet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkMGet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkMGet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkMGet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkMGet::opcode() const {
  return opcode_;
}
inline void SdkMGet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkMGet::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkMGet::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkMGet::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkMGet::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkMGet::table() const {
  return *table_;
}
inline void SdkMGet::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkMGet::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkMGet::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkMGet::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkMGet::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkMGet::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bytes key = 3;
inline int SdkMGet::key_size() const {
  return key_.size();
}
inline void SdkMGet::clear_key() {
  key_.Clear();
}
inline const ::std::string& SdkMGet::key(int index) const {
  return key_.Get(index);
}
inline ::std::string* SdkMGet::mutable_key(int index) {
  return key_.Mutable(index);
}
inline void SdkMGet::set_key(int index, const ::std::string& value) {
  key_.Mutable(index)->assign(value);
}
inline void SdkMGet::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
}
inline void SdkMGet::set_key(int index, const void* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkMGet::add_key() {
  return key_.Add();
}
inline void SdkMGet::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
}
inline void SdkMGet::add_key(const char* value) {
  key_.Add()->assign(value);
}
inline void SdkMGet::add_key(const void* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SdkMGet::key() const {
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SdkMGet::mutable_key() {
  return &key_;
}

// -------------------------------------------------------------------

// SdkMGetRet_KeyValue

// required bytes key = 1;
inline bool SdkMGetRet_KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkMGetRet_KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkMGetRet_KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkMGetRet_KeyValue::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkMGetRet_KeyValue::key() const {
  return *key_;
}
inline void SdkMGetRet_KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkMGetRet_KeyValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkMGetRet_KeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkMGetRet_KeyValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkMGetRet_KeyValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkMGetRet_KeyValue::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 2;
inline bool SdkMGetRet_KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkMGetRet_KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkMGetRet_KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkMGetRet_KeyValue::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkMGetRet_KeyValue::value() const {
  return *value_;
}
inline void SdkMGetRet_KeyValue::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkMGetRet_KeyValue::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkMGetRet_KeyValue::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkMGetRet_KeyValue::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkMGetRet_KeyValue::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkMGetRet_KeyValue::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 status = 3;
inline bool SdkMGetRet_KeyValue::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkMGetRet_KeyValue::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkMGetRet_KeyValue::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkMGetRet_KeyValue::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 SdkMGetRet_KeyValue::status() const {
  return status_;
}
inline void SdkMGetRet_KeyValue::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// SdkMGetRet

// required int32 opcode = 1;
inline bool SdkMGetRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkMGetRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkMGetRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkMGetRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkMGetRet::opcode() const {
  return opcode_;
}
inline void SdkMGetRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// repeated .SdkMGetRet.KeyValue rets = 2;
inline int SdkMGetRet::rets_size() const {
  return rets_.size();
}
inline void SdkMGetRet::clear_rets() {
  rets_.Clear();
}
inline const ::SdkMGetRet_KeyValue& SdkMGetRet::rets(int index) const {
  return rets_.Get(index);
}
inline ::SdkMGetRet_KeyValue* SdkMGetRet::mutable_rets(int index) {
  return rets_.Mutable(index);
}
inline ::SdkMGetRet_KeyValue* SdkMGetRet::add_rets() {
  return rets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SdkMGetRet_KeyValue >&
SdkMGetRet::rets() const {
  return rets_;
}
inline ::google::protobuf::RepeatedPtrField< ::SdkMGetRet_KeyValue >*
SdkMGetRet::mutable_rets() {
  return &rets_;
}

// optional string master = 3;
inline bool SdkMGetRet::has_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkMGetRet::set_has_master() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkMGetRet::clear_has_master() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkMGetRet::clear_master() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    master_->clear();
  }
  clear_has_master();
}
inline const ::std::string& SdkMGetRet::master() const {
  return *master_;
}
inline void SdkMGetRet::set_master(const ::std::string& value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkMGetRet::set_master(const char* value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkMGetRet::set_master(const char* value, size_t size) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkMGetRet::mutable_master() {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  return master_;
}
inline ::std::string* SdkMGetRet::release_master() {
  clear_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_;
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkMGetRet::set_allocated_master(::std::string* master) {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (master) {
    set_has_master();
    master_ = master;
  } else {
    clear_has_master();
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetMetadata4SDK2

// required int32 cmd = 1;
inline bool GetMetadata4SDK2::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMetadata4SDK2::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMetadata4SDK2::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMetadata4SDK2::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 GetMetadata4SDK2::cmd() const {
  return cmd_;
}
inline void GetMetadata4SDK2::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// required string table = 2;
inline bool GetMetadata4SDK2::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMetadata4SDK2::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMetadata4SDK2::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMetadata4SDK2::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& GetMetadata4SDK2::table() const {
  return *table_;
}
inline void GetMetadata4SDK2::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void GetMetadata4SDK2::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void GetMetadata4SDK2::set_table(const char* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetMetadata4SDK2::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* GetMetadata4SDK2::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetMetadata4SDK2::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Rint32

// required int32 id = 1;
inline bool Rint32::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rint32::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rint32::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rint32::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Rint32::id() const {
  return id_;
}
inline void Rint32::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// GetMetadata4SDK3_NPs

// required string host = 1;
inline bool GetMetadata4SDK3_NPs::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMetadata4SDK3_NPs::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMetadata4SDK3_NPs::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMetadata4SDK3_NPs::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& GetMetadata4SDK3_NPs::host() const {
  return *host_;
}
inline void GetMetadata4SDK3_NPs::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void GetMetadata4SDK3_NPs::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void GetMetadata4SDK3_NPs::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetMetadata4SDK3_NPs::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* GetMetadata4SDK3_NPs::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetMetadata4SDK3_NPs::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool GetMetadata4SDK3_NPs::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMetadata4SDK3_NPs::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMetadata4SDK3_NPs::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMetadata4SDK3_NPs::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 GetMetadata4SDK3_NPs::port() const {
  return port_;
}
inline void GetMetadata4SDK3_NPs::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// repeated .Rint32 partitions = 3;
inline int GetMetadata4SDK3_NPs::partitions_size() const {
  return partitions_.size();
}
inline void GetMetadata4SDK3_NPs::clear_partitions() {
  partitions_.Clear();
}
inline const ::Rint32& GetMetadata4SDK3_NPs::partitions(int index) const {
  return partitions_.Get(index);
}
inline ::Rint32* GetMetadata4SDK3_NPs::mutable_partitions(int index) {
  return partitions_.Mutable(index);
}
inline ::Rint32* GetMetadata4SDK3_NPs::add_partitions() {
  return partitions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Rint32 >&
GetMetadata4SDK3_NPs::partitions() const {
  return partitions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Rint32 >*
GetMetadata4SDK3_NPs::mutable_partitions() {
  return &partitions_;
}

// -------------------------------------------------------------------

// GetMetadata4SDK3

// required int32 cmd = 1;
inline bool GetMetadata4SDK3::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMetadata4SDK3::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMetadata4SDK3::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMetadata4SDK3::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 GetMetadata4SDK3::cmd() const {
  return cmd_;
}
inline void GetMetadata4SDK3::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// repeated .GetMetadata4SDK3.NPs nps = 2;
inline int GetMetadata4SDK3::nps_size() const {
  return nps_.size();
}
inline void GetMetadata4SDK3::clear_nps() {
  nps_.Clear();
}
inline const ::GetMetadata4SDK3_NPs& GetMetadata4SDK3::nps(int index) const {
  return nps_.Get(index);
}
inline ::GetMetadata4SDK3_NPs* GetMetadata4SDK3::mutable_nps(int index) {
  return nps_.Mutable(index);
}
inline ::GetMetadata4SDK3_NPs* GetMetadata4SDK3::add_nps() {
  return nps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GetMetadata4SDK3_NPs >&
GetMetadata4SDK3::nps() const {
  return nps_;
}
inline ::google::protobuf::RepeatedPtrField< ::GetMetadata4SDK3_NPs >*
GetMetadata4SDK3::mutable_nps() {
  return &nps_;
}

// required int32 pcnt = 3;
inline bool GetMetadata4SDK3::has_pcnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetMetadata4SDK3::set_has_pcnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetMetadata4SDK3::clear_has_pcnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetMetadata4SDK3::clear_pcnt() {
  pcnt_ = 0;
  clear_has_pcnt();
}
inline ::google::protobuf::int32 GetMetadata4SDK3::pcnt() const {
  return pcnt_;
}
inline void GetMetadata4SDK3::set_pcnt(::google::protobuf::int32 value) {
  set_has_pcnt();
  pcnt_ = value;
}

// -------------------------------------------------------------------

// GetPrimary4SDK2

// required int32 cmd = 1;
inline bool GetPrimary4SDK2::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPrimary4SDK2::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPrimary4SDK2::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPrimary4SDK2::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 GetPrimary4SDK2::cmd() const {
  return cmd_;
}
inline void GetPrimary4SDK2::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// required string table = 2;
inline bool GetPrimary4SDK2::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPrimary4SDK2::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPrimary4SDK2::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPrimary4SDK2::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& GetPrimary4SDK2::table() const {
  return *table_;
}
inline void GetPrimary4SDK2::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void GetPrimary4SDK2::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void GetPrimary4SDK2::set_table(const char* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetPrimary4SDK2::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* GetPrimary4SDK2::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetPrimary4SDK2::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 partition = 3;
inline bool GetPrimary4SDK2::has_partition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPrimary4SDK2::set_has_partition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPrimary4SDK2::clear_has_partition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPrimary4SDK2::clear_partition() {
  partition_ = 0;
  clear_has_partition();
}
inline ::google::protobuf::int32 GetPrimary4SDK2::partition() const {
  return partition_;
}
inline void GetPrimary4SDK2::set_partition(::google::protobuf::int32 value) {
  set_has_partition();
  partition_ = value;
}

// -------------------------------------------------------------------

// GetPrimary4SDK3

// required int32 cmd = 1;
inline bool GetPrimary4SDK3::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPrimary4SDK3::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPrimary4SDK3::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPrimary4SDK3::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 GetPrimary4SDK3::cmd() const {
  return cmd_;
}
inline void GetPrimary4SDK3::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// required string host = 2;
inline bool GetPrimary4SDK3::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPrimary4SDK3::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPrimary4SDK3::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPrimary4SDK3::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& GetPrimary4SDK3::host() const {
  return *host_;
}
inline void GetPrimary4SDK3::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void GetPrimary4SDK3::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void GetPrimary4SDK3::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetPrimary4SDK3::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* GetPrimary4SDK3::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetPrimary4SDK3::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 3;
inline bool GetPrimary4SDK3::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPrimary4SDK3::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPrimary4SDK3::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPrimary4SDK3::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 GetPrimary4SDK3::port() const {
  return port_;
}
inline void GetPrimary4SDK3::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// SdkHGet

// required int32 opcode = 1;
inline bool SdkHGet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHGet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHGet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHGet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkHGet::opcode() const {
  return opcode_;
}
inline void SdkHGet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkHGet::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkHGet::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkHGet::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkHGet::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkHGet::table() const {
  return *table_;
}
inline void SdkHGet::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkHGet::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkHGet::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHGet::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkHGet::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHGet::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes hname = 3;
inline bool SdkHGet::has_hname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkHGet::set_has_hname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkHGet::clear_has_hname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkHGet::clear_hname() {
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    hname_->clear();
  }
  clear_has_hname();
}
inline const ::std::string& SdkHGet::hname() const {
  return *hname_;
}
inline void SdkHGet::set_hname(const ::std::string& value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
}
inline void SdkHGet::set_hname(const char* value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
}
inline void SdkHGet::set_hname(const void* value, size_t size) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHGet::mutable_hname() {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  return hname_;
}
inline ::std::string* SdkHGet::release_hname() {
  clear_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hname_;
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHGet::set_allocated_hname(::std::string* hname) {
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (hname) {
    set_has_hname();
    hname_ = hname;
  } else {
    clear_has_hname();
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes key = 4;
inline bool SdkHGet::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkHGet::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkHGet::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkHGet::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkHGet::key() const {
  return *key_;
}
inline void SdkHGet::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkHGet::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkHGet::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHGet::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkHGet::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHGet::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkHGetRet

// required int32 opcode = 1;
inline bool SdkHGetRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHGetRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHGetRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHGetRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkHGetRet::opcode() const {
  return opcode_;
}
inline void SdkHGetRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes value = 2;
inline bool SdkHGetRet::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkHGetRet::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkHGetRet::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkHGetRet::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkHGetRet::value() const {
  return *value_;
}
inline void SdkHGetRet::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkHGetRet::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkHGetRet::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHGetRet::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkHGetRet::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHGetRet::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkHPut

// required int32 opcode = 1;
inline bool SdkHPut::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHPut::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHPut::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHPut::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkHPut::opcode() const {
  return opcode_;
}
inline void SdkHPut::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkHPut::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkHPut::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkHPut::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkHPut::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkHPut::table() const {
  return *table_;
}
inline void SdkHPut::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkHPut::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkHPut::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHPut::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkHPut::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHPut::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes hname = 3;
inline bool SdkHPut::has_hname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkHPut::set_has_hname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkHPut::clear_has_hname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkHPut::clear_hname() {
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    hname_->clear();
  }
  clear_has_hname();
}
inline const ::std::string& SdkHPut::hname() const {
  return *hname_;
}
inline void SdkHPut::set_hname(const ::std::string& value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
}
inline void SdkHPut::set_hname(const char* value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
}
inline void SdkHPut::set_hname(const void* value, size_t size) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHPut::mutable_hname() {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  return hname_;
}
inline ::std::string* SdkHPut::release_hname() {
  clear_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hname_;
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHPut::set_allocated_hname(::std::string* hname) {
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (hname) {
    set_has_hname();
    hname_ = hname;
  } else {
    clear_has_hname();
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes key = 4;
inline bool SdkHPut::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkHPut::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkHPut::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkHPut::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkHPut::key() const {
  return *key_;
}
inline void SdkHPut::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkHPut::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkHPut::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHPut::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkHPut::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHPut::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 5;
inline bool SdkHPut::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdkHPut::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SdkHPut::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SdkHPut::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkHPut::value() const {
  return *value_;
}
inline void SdkHPut::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkHPut::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkHPut::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHPut::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkHPut::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHPut::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 writesrc = 6 [default = 0];
inline bool SdkHPut::has_writesrc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SdkHPut::set_has_writesrc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SdkHPut::clear_has_writesrc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SdkHPut::clear_writesrc() {
  writesrc_ = 0;
  clear_has_writesrc();
}
inline ::google::protobuf::int32 SdkHPut::writesrc() const {
  return writesrc_;
}
inline void SdkHPut::set_writesrc(::google::protobuf::int32 value) {
  set_has_writesrc();
  writesrc_ = value;
}

// -------------------------------------------------------------------

// SdkHPutRet

// required int32 opcode = 1;
inline bool SdkHPutRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHPutRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHPutRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHPutRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkHPutRet::opcode() const {
  return opcode_;
}
inline void SdkHPutRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bool status = 2;
inline bool SdkHPutRet::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkHPutRet::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkHPutRet::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkHPutRet::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool SdkHPutRet::status() const {
  return status_;
}
inline void SdkHPutRet::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// SdkHDelete

// required int32 opcode = 1;
inline bool SdkHDelete::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHDelete::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHDelete::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHDelete::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkHDelete::opcode() const {
  return opcode_;
}
inline void SdkHDelete::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkHDelete::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkHDelete::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkHDelete::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkHDelete::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkHDelete::table() const {
  return *table_;
}
inline void SdkHDelete::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkHDelete::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkHDelete::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHDelete::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkHDelete::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHDelete::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes hname = 3;
inline bool SdkHDelete::has_hname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkHDelete::set_has_hname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkHDelete::clear_has_hname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkHDelete::clear_hname() {
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    hname_->clear();
  }
  clear_has_hname();
}
inline const ::std::string& SdkHDelete::hname() const {
  return *hname_;
}
inline void SdkHDelete::set_hname(const ::std::string& value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
}
inline void SdkHDelete::set_hname(const char* value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
}
inline void SdkHDelete::set_hname(const void* value, size_t size) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHDelete::mutable_hname() {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  return hname_;
}
inline ::std::string* SdkHDelete::release_hname() {
  clear_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hname_;
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHDelete::set_allocated_hname(::std::string* hname) {
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (hname) {
    set_has_hname();
    hname_ = hname;
  } else {
    clear_has_hname();
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes key = 4;
inline bool SdkHDelete::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkHDelete::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkHDelete::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkHDelete::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkHDelete::key() const {
  return *key_;
}
inline void SdkHDelete::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkHDelete::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkHDelete::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHDelete::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkHDelete::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHDelete::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 writesrc = 5 [default = 0];
inline bool SdkHDelete::has_writesrc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdkHDelete::set_has_writesrc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SdkHDelete::clear_has_writesrc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SdkHDelete::clear_writesrc() {
  writesrc_ = 0;
  clear_has_writesrc();
}
inline ::google::protobuf::int32 SdkHDelete::writesrc() const {
  return writesrc_;
}
inline void SdkHDelete::set_writesrc(::google::protobuf::int32 value) {
  set_has_writesrc();
  writesrc_ = value;
}

// -------------------------------------------------------------------

// SdkHDeleteRet

// required int32 opcode = 1;
inline bool SdkHDeleteRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHDeleteRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHDeleteRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHDeleteRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkHDeleteRet::opcode() const {
  return opcode_;
}
inline void SdkHDeleteRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bool status = 2;
inline bool SdkHDeleteRet::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkHDeleteRet::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkHDeleteRet::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkHDeleteRet::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool SdkHDeleteRet::status() const {
  return status_;
}
inline void SdkHDeleteRet::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// SdkHGetAllKeysByName

// required int32 opcode = 1;
inline bool SdkHGetAllKeysByName::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHGetAllKeysByName::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHGetAllKeysByName::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHGetAllKeysByName::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkHGetAllKeysByName::opcode() const {
  return opcode_;
}
inline void SdkHGetAllKeysByName::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkHGetAllKeysByName::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkHGetAllKeysByName::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkHGetAllKeysByName::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkHGetAllKeysByName::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkHGetAllKeysByName::table() const {
  return *table_;
}
inline void SdkHGetAllKeysByName::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkHGetAllKeysByName::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkHGetAllKeysByName::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHGetAllKeysByName::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkHGetAllKeysByName::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHGetAllKeysByName::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes hname = 3;
inline bool SdkHGetAllKeysByName::has_hname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkHGetAllKeysByName::set_has_hname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkHGetAllKeysByName::clear_has_hname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkHGetAllKeysByName::clear_hname() {
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    hname_->clear();
  }
  clear_has_hname();
}
inline const ::std::string& SdkHGetAllKeysByName::hname() const {
  return *hname_;
}
inline void SdkHGetAllKeysByName::set_hname(const ::std::string& value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
}
inline void SdkHGetAllKeysByName::set_hname(const char* value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
}
inline void SdkHGetAllKeysByName::set_hname(const void* value, size_t size) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHGetAllKeysByName::mutable_hname() {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  return hname_;
}
inline ::std::string* SdkHGetAllKeysByName::release_hname() {
  clear_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hname_;
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHGetAllKeysByName::set_allocated_hname(::std::string* hname) {
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (hname) {
    set_has_hname();
    hname_ = hname;
  } else {
    clear_has_hname();
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkHGetAllKeysByNameRet

// required int32 opcode = 1;
inline bool SdkHGetAllKeysByNameRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHGetAllKeysByNameRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHGetAllKeysByNameRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHGetAllKeysByNameRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkHGetAllKeysByNameRet::opcode() const {
  return opcode_;
}
inline void SdkHGetAllKeysByNameRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// repeated bytes keys = 2;
inline int SdkHGetAllKeysByNameRet::keys_size() const {
  return keys_.size();
}
inline void SdkHGetAllKeysByNameRet::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& SdkHGetAllKeysByNameRet::keys(int index) const {
  return keys_.Get(index);
}
inline ::std::string* SdkHGetAllKeysByNameRet::mutable_keys(int index) {
  return keys_.Mutable(index);
}
inline void SdkHGetAllKeysByNameRet::set_keys(int index, const ::std::string& value) {
  keys_.Mutable(index)->assign(value);
}
inline void SdkHGetAllKeysByNameRet::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
}
inline void SdkHGetAllKeysByNameRet::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHGetAllKeysByNameRet::add_keys() {
  return keys_.Add();
}
inline void SdkHGetAllKeysByNameRet::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
}
inline void SdkHGetAllKeysByNameRet::add_keys(const char* value) {
  keys_.Add()->assign(value);
}
inline void SdkHGetAllKeysByNameRet::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SdkHGetAllKeysByNameRet::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SdkHGetAllKeysByNameRet::mutable_keys() {
  return &keys_;
}

// -------------------------------------------------------------------

// SdkHGetAllKVsByName

// required int32 opcode = 1;
inline bool SdkHGetAllKVsByName::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHGetAllKVsByName::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHGetAllKVsByName::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHGetAllKVsByName::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkHGetAllKVsByName::opcode() const {
  return opcode_;
}
inline void SdkHGetAllKVsByName::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkHGetAllKVsByName::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkHGetAllKVsByName::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkHGetAllKVsByName::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkHGetAllKVsByName::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkHGetAllKVsByName::table() const {
  return *table_;
}
inline void SdkHGetAllKVsByName::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkHGetAllKVsByName::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkHGetAllKVsByName::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHGetAllKVsByName::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkHGetAllKVsByName::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHGetAllKVsByName::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes hname = 3;
inline bool SdkHGetAllKVsByName::has_hname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkHGetAllKVsByName::set_has_hname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkHGetAllKVsByName::clear_has_hname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkHGetAllKVsByName::clear_hname() {
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    hname_->clear();
  }
  clear_has_hname();
}
inline const ::std::string& SdkHGetAllKVsByName::hname() const {
  return *hname_;
}
inline void SdkHGetAllKVsByName::set_hname(const ::std::string& value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
}
inline void SdkHGetAllKVsByName::set_hname(const char* value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
}
inline void SdkHGetAllKVsByName::set_hname(const void* value, size_t size) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHGetAllKVsByName::mutable_hname() {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  return hname_;
}
inline ::std::string* SdkHGetAllKVsByName::release_hname() {
  clear_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hname_;
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHGetAllKVsByName::set_allocated_hname(::std::string* hname) {
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (hname) {
    set_has_hname();
    hname_ = hname;
  } else {
    clear_has_hname();
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkHGetAllKVsByNameRet_HKeyValue

// required bytes key = 1;
inline bool SdkHGetAllKVsByNameRet_HKeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHGetAllKVsByNameRet_HKeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHGetAllKVsByNameRet_HKeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHGetAllKVsByNameRet_HKeyValue::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkHGetAllKVsByNameRet_HKeyValue::key() const {
  return *key_;
}
inline void SdkHGetAllKVsByNameRet_HKeyValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkHGetAllKVsByNameRet_HKeyValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkHGetAllKVsByNameRet_HKeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHGetAllKVsByNameRet_HKeyValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkHGetAllKVsByNameRet_HKeyValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHGetAllKVsByNameRet_HKeyValue::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 2;
inline bool SdkHGetAllKVsByNameRet_HKeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkHGetAllKVsByNameRet_HKeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkHGetAllKVsByNameRet_HKeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkHGetAllKVsByNameRet_HKeyValue::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkHGetAllKVsByNameRet_HKeyValue::value() const {
  return *value_;
}
inline void SdkHGetAllKVsByNameRet_HKeyValue::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkHGetAllKVsByNameRet_HKeyValue::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkHGetAllKVsByNameRet_HKeyValue::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHGetAllKVsByNameRet_HKeyValue::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkHGetAllKVsByNameRet_HKeyValue::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHGetAllKVsByNameRet_HKeyValue::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkHGetAllKVsByNameRet

// required int32 opcode = 1;
inline bool SdkHGetAllKVsByNameRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHGetAllKVsByNameRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHGetAllKVsByNameRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHGetAllKVsByNameRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkHGetAllKVsByNameRet::opcode() const {
  return opcode_;
}
inline void SdkHGetAllKVsByNameRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// repeated .SdkHGetAllKVsByNameRet.HKeyValue rets = 2;
inline int SdkHGetAllKVsByNameRet::rets_size() const {
  return rets_.size();
}
inline void SdkHGetAllKVsByNameRet::clear_rets() {
  rets_.Clear();
}
inline const ::SdkHGetAllKVsByNameRet_HKeyValue& SdkHGetAllKVsByNameRet::rets(int index) const {
  return rets_.Get(index);
}
inline ::SdkHGetAllKVsByNameRet_HKeyValue* SdkHGetAllKVsByNameRet::mutable_rets(int index) {
  return rets_.Mutable(index);
}
inline ::SdkHGetAllKVsByNameRet_HKeyValue* SdkHGetAllKVsByNameRet::add_rets() {
  return rets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SdkHGetAllKVsByNameRet_HKeyValue >&
SdkHGetAllKVsByNameRet::rets() const {
  return rets_;
}
inline ::google::protobuf::RepeatedPtrField< ::SdkHGetAllKVsByNameRet_HKeyValue >*
SdkHGetAllKVsByNameRet::mutable_rets() {
  return &rets_;
}

// -------------------------------------------------------------------

// SdkHMput_HKeyValue

// required bytes key = 1;
inline bool SdkHMput_HKeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHMput_HKeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHMput_HKeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHMput_HKeyValue::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkHMput_HKeyValue::key() const {
  return *key_;
}
inline void SdkHMput_HKeyValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkHMput_HKeyValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkHMput_HKeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHMput_HKeyValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkHMput_HKeyValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHMput_HKeyValue::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 2;
inline bool SdkHMput_HKeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkHMput_HKeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkHMput_HKeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkHMput_HKeyValue::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkHMput_HKeyValue::value() const {
  return *value_;
}
inline void SdkHMput_HKeyValue::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkHMput_HKeyValue::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkHMput_HKeyValue::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHMput_HKeyValue::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkHMput_HKeyValue::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHMput_HKeyValue::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkHMput

// required int32 opcode = 1;
inline bool SdkHMput::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHMput::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHMput::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHMput::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkHMput::opcode() const {
  return opcode_;
}
inline void SdkHMput::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkHMput::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkHMput::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkHMput::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkHMput::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkHMput::table() const {
  return *table_;
}
inline void SdkHMput::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkHMput::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkHMput::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHMput::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkHMput::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHMput::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes hname = 3;
inline bool SdkHMput::has_hname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkHMput::set_has_hname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkHMput::clear_has_hname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkHMput::clear_hname() {
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    hname_->clear();
  }
  clear_has_hname();
}
inline const ::std::string& SdkHMput::hname() const {
  return *hname_;
}
inline void SdkHMput::set_hname(const ::std::string& value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
}
inline void SdkHMput::set_hname(const char* value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
}
inline void SdkHMput::set_hname(const void* value, size_t size) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHMput::mutable_hname() {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  return hname_;
}
inline ::std::string* SdkHMput::release_hname() {
  clear_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hname_;
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHMput::set_allocated_hname(::std::string* hname) {
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (hname) {
    set_has_hname();
    hname_ = hname;
  } else {
    clear_has_hname();
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .SdkHMput.HKeyValue kvs = 4;
inline int SdkHMput::kvs_size() const {
  return kvs_.size();
}
inline void SdkHMput::clear_kvs() {
  kvs_.Clear();
}
inline const ::SdkHMput_HKeyValue& SdkHMput::kvs(int index) const {
  return kvs_.Get(index);
}
inline ::SdkHMput_HKeyValue* SdkHMput::mutable_kvs(int index) {
  return kvs_.Mutable(index);
}
inline ::SdkHMput_HKeyValue* SdkHMput::add_kvs() {
  return kvs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SdkHMput_HKeyValue >&
SdkHMput::kvs() const {
  return kvs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SdkHMput_HKeyValue >*
SdkHMput::mutable_kvs() {
  return &kvs_;
}

// optional int32 writesrc = 5 [default = 0];
inline bool SdkHMput::has_writesrc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdkHMput::set_has_writesrc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SdkHMput::clear_has_writesrc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SdkHMput::clear_writesrc() {
  writesrc_ = 0;
  clear_has_writesrc();
}
inline ::google::protobuf::int32 SdkHMput::writesrc() const {
  return writesrc_;
}
inline void SdkHMput::set_writesrc(::google::protobuf::int32 value) {
  set_has_writesrc();
  writesrc_ = value;
}

// -------------------------------------------------------------------

// SdkHMputRet_HKeyRetval

// required bytes key = 1;
inline bool SdkHMputRet_HKeyRetval::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHMputRet_HKeyRetval::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHMputRet_HKeyRetval::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHMputRet_HKeyRetval::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkHMputRet_HKeyRetval::key() const {
  return *key_;
}
inline void SdkHMputRet_HKeyRetval::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkHMputRet_HKeyRetval::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkHMputRet_HKeyRetval::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHMputRet_HKeyRetval::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkHMputRet_HKeyRetval::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHMputRet_HKeyRetval::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 retval = 2;
inline bool SdkHMputRet_HKeyRetval::has_retval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkHMputRet_HKeyRetval::set_has_retval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkHMputRet_HKeyRetval::clear_has_retval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkHMputRet_HKeyRetval::clear_retval() {
  retval_ = 0;
  clear_has_retval();
}
inline ::google::protobuf::int32 SdkHMputRet_HKeyRetval::retval() const {
  return retval_;
}
inline void SdkHMputRet_HKeyRetval::set_retval(::google::protobuf::int32 value) {
  set_has_retval();
  retval_ = value;
}

// -------------------------------------------------------------------

// SdkHMputRet

// required int32 opcode = 1;
inline bool SdkHMputRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHMputRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHMputRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHMputRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkHMputRet::opcode() const {
  return opcode_;
}
inline void SdkHMputRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// repeated .SdkHMputRet.HKeyRetval krvs = 2;
inline int SdkHMputRet::krvs_size() const {
  return krvs_.size();
}
inline void SdkHMputRet::clear_krvs() {
  krvs_.Clear();
}
inline const ::SdkHMputRet_HKeyRetval& SdkHMputRet::krvs(int index) const {
  return krvs_.Get(index);
}
inline ::SdkHMputRet_HKeyRetval* SdkHMputRet::mutable_krvs(int index) {
  return krvs_.Mutable(index);
}
inline ::SdkHMputRet_HKeyRetval* SdkHMputRet::add_krvs() {
  return krvs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SdkHMputRet_HKeyRetval >&
SdkHMputRet::krvs() const {
  return krvs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SdkHMputRet_HKeyRetval >*
SdkHMputRet::mutable_krvs() {
  return &krvs_;
}

// -------------------------------------------------------------------

// SdkHMget

// required int32 opcode = 1;
inline bool SdkHMget::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHMget::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHMget::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHMget::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkHMget::opcode() const {
  return opcode_;
}
inline void SdkHMget::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkHMget::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkHMget::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkHMget::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkHMget::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkHMget::table() const {
  return *table_;
}
inline void SdkHMget::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkHMget::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkHMget::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHMget::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkHMget::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHMget::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes hname = 3;
inline bool SdkHMget::has_hname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkHMget::set_has_hname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkHMget::clear_has_hname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkHMget::clear_hname() {
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    hname_->clear();
  }
  clear_has_hname();
}
inline const ::std::string& SdkHMget::hname() const {
  return *hname_;
}
inline void SdkHMget::set_hname(const ::std::string& value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
}
inline void SdkHMget::set_hname(const char* value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
}
inline void SdkHMget::set_hname(const void* value, size_t size) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  hname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHMget::mutable_hname() {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    hname_ = new ::std::string;
  }
  return hname_;
}
inline ::std::string* SdkHMget::release_hname() {
  clear_has_hname();
  if (hname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hname_;
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHMget::set_allocated_hname(::std::string* hname) {
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (hname) {
    set_has_hname();
    hname_ = hname;
  } else {
    clear_has_hname();
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bytes keys = 4;
inline int SdkHMget::keys_size() const {
  return keys_.size();
}
inline void SdkHMget::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& SdkHMget::keys(int index) const {
  return keys_.Get(index);
}
inline ::std::string* SdkHMget::mutable_keys(int index) {
  return keys_.Mutable(index);
}
inline void SdkHMget::set_keys(int index, const ::std::string& value) {
  keys_.Mutable(index)->assign(value);
}
inline void SdkHMget::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
}
inline void SdkHMget::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHMget::add_keys() {
  return keys_.Add();
}
inline void SdkHMget::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
}
inline void SdkHMget::add_keys(const char* value) {
  keys_.Add()->assign(value);
}
inline void SdkHMget::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SdkHMget::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SdkHMget::mutable_keys() {
  return &keys_;
}

// -------------------------------------------------------------------

// SdkHMgetRet_HKeyValue

// required bytes key = 1;
inline bool SdkHMgetRet_HKeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHMgetRet_HKeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHMgetRet_HKeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHMgetRet_HKeyValue::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkHMgetRet_HKeyValue::key() const {
  return *key_;
}
inline void SdkHMgetRet_HKeyValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkHMgetRet_HKeyValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkHMgetRet_HKeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHMgetRet_HKeyValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkHMgetRet_HKeyValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHMgetRet_HKeyValue::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 2;
inline bool SdkHMgetRet_HKeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkHMgetRet_HKeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkHMgetRet_HKeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkHMgetRet_HKeyValue::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkHMgetRet_HKeyValue::value() const {
  return *value_;
}
inline void SdkHMgetRet_HKeyValue::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkHMgetRet_HKeyValue::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkHMgetRet_HKeyValue::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkHMgetRet_HKeyValue::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkHMgetRet_HKeyValue::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkHMgetRet_HKeyValue::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 retval = 3;
inline bool SdkHMgetRet_HKeyValue::has_retval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkHMgetRet_HKeyValue::set_has_retval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkHMgetRet_HKeyValue::clear_has_retval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkHMgetRet_HKeyValue::clear_retval() {
  retval_ = 0;
  clear_has_retval();
}
inline ::google::protobuf::int32 SdkHMgetRet_HKeyValue::retval() const {
  return retval_;
}
inline void SdkHMgetRet_HKeyValue::set_retval(::google::protobuf::int32 value) {
  set_has_retval();
  retval_ = value;
}

// -------------------------------------------------------------------

// SdkHMgetRet

// required int32 opcode = 1;
inline bool SdkHMgetRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkHMgetRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkHMgetRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkHMgetRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkHMgetRet::opcode() const {
  return opcode_;
}
inline void SdkHMgetRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// repeated .SdkHMgetRet.HKeyValue kvs = 2;
inline int SdkHMgetRet::kvs_size() const {
  return kvs_.size();
}
inline void SdkHMgetRet::clear_kvs() {
  kvs_.Clear();
}
inline const ::SdkHMgetRet_HKeyValue& SdkHMgetRet::kvs(int index) const {
  return kvs_.Get(index);
}
inline ::SdkHMgetRet_HKeyValue* SdkHMgetRet::mutable_kvs(int index) {
  return kvs_.Mutable(index);
}
inline ::SdkHMgetRet_HKeyValue* SdkHMgetRet::add_kvs() {
  return kvs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SdkHMgetRet_HKeyValue >&
SdkHMgetRet::kvs() const {
  return kvs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SdkHMgetRet_HKeyValue >*
SdkHMgetRet::mutable_kvs() {
  return &kvs_;
}

// -------------------------------------------------------------------

// SdkSetWithTTL

// required int32 opcode = 1;
inline bool SdkSetWithTTL::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkSetWithTTL::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkSetWithTTL::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkSetWithTTL::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkSetWithTTL::opcode() const {
  return opcode_;
}
inline void SdkSetWithTTL::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkSetWithTTL::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkSetWithTTL::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkSetWithTTL::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkSetWithTTL::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkSetWithTTL::table() const {
  return *table_;
}
inline void SdkSetWithTTL::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkSetWithTTL::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkSetWithTTL::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkSetWithTTL::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkSetWithTTL::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkSetWithTTL::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes key = 3;
inline bool SdkSetWithTTL::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkSetWithTTL::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkSetWithTTL::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkSetWithTTL::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SdkSetWithTTL::key() const {
  return *key_;
}
inline void SdkSetWithTTL::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkSetWithTTL::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void SdkSetWithTTL::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkSetWithTTL::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* SdkSetWithTTL::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkSetWithTTL::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 4;
inline bool SdkSetWithTTL::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkSetWithTTL::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkSetWithTTL::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkSetWithTTL::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkSetWithTTL::value() const {
  return *value_;
}
inline void SdkSetWithTTL::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkSetWithTTL::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkSetWithTTL::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkSetWithTTL::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkSetWithTTL::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkSetWithTTL::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 ttl = 5;
inline bool SdkSetWithTTL::has_ttl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdkSetWithTTL::set_has_ttl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SdkSetWithTTL::clear_has_ttl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SdkSetWithTTL::clear_ttl() {
  ttl_ = 0;
  clear_has_ttl();
}
inline ::google::protobuf::int32 SdkSetWithTTL::ttl() const {
  return ttl_;
}
inline void SdkSetWithTTL::set_ttl(::google::protobuf::int32 value) {
  set_has_ttl();
  ttl_ = value;
}

// optional int32 writesrc = 6 [default = 0];
inline bool SdkSetWithTTL::has_writesrc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SdkSetWithTTL::set_has_writesrc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SdkSetWithTTL::clear_has_writesrc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SdkSetWithTTL::clear_writesrc() {
  writesrc_ = 0;
  clear_has_writesrc();
}
inline ::google::protobuf::int32 SdkSetWithTTL::writesrc() const {
  return writesrc_;
}
inline void SdkSetWithTTL::set_writesrc(::google::protobuf::int32 value) {
  set_has_writesrc();
  writesrc_ = value;
}

// -------------------------------------------------------------------

// SdkSetWithTTLRet

// required int32 opcode = 1;
inline bool SdkSetWithTTLRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkSetWithTTLRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkSetWithTTLRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkSetWithTTLRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkSetWithTTLRet::opcode() const {
  return opcode_;
}
inline void SdkSetWithTTLRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bool status = 2;
inline bool SdkSetWithTTLRet::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkSetWithTTLRet::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkSetWithTTLRet::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkSetWithTTLRet::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool SdkSetWithTTLRet::status() const {
  return status_;
}
inline void SdkSetWithTTLRet::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// optional string master = 3;
inline bool SdkSetWithTTLRet::has_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkSetWithTTLRet::set_has_master() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkSetWithTTLRet::clear_has_master() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkSetWithTTLRet::clear_master() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    master_->clear();
  }
  clear_has_master();
}
inline const ::std::string& SdkSetWithTTLRet::master() const {
  return *master_;
}
inline void SdkSetWithTTLRet::set_master(const ::std::string& value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkSetWithTTLRet::set_master(const char* value) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(value);
}
inline void SdkSetWithTTLRet::set_master(const char* value, size_t size) {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  master_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkSetWithTTLRet::mutable_master() {
  set_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    master_ = new ::std::string;
  }
  return master_;
}
inline ::std::string* SdkSetWithTTLRet::release_master() {
  clear_has_master();
  if (master_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_;
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkSetWithTTLRet::set_allocated_master(::std::string* master) {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (master) {
    set_has_master();
    master_ = master;
  } else {
    clear_has_master();
    master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkLSize

// required int32 opcode = 1;
inline bool SdkLSize::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkLSize::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkLSize::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkLSize::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkLSize::opcode() const {
  return opcode_;
}
inline void SdkLSize::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkLSize::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkLSize::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkLSize::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkLSize::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkLSize::table() const {
  return *table_;
}
inline void SdkLSize::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkLSize::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkLSize::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLSize::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkLSize::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLSize::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes name = 3;
inline bool SdkLSize::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkLSize::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkLSize::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkLSize::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SdkLSize::name() const {
  return *name_;
}
inline void SdkLSize::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SdkLSize::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SdkLSize::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLSize::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SdkLSize::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLSize::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkLSizeRet

// required int32 opcode = 1;
inline bool SdkLSizeRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkLSizeRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkLSizeRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkLSizeRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkLSizeRet::opcode() const {
  return opcode_;
}
inline void SdkLSizeRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required uint64 size_r = 2;
inline bool SdkLSizeRet::has_size_r() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkLSizeRet::set_has_size_r() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkLSizeRet::clear_has_size_r() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkLSizeRet::clear_size_r() {
  size_r_ = GOOGLE_ULONGLONG(0);
  clear_has_size_r();
}
inline ::google::protobuf::uint64 SdkLSizeRet::size_r() const {
  return size_r_;
}
inline void SdkLSizeRet::set_size_r(::google::protobuf::uint64 value) {
  set_has_size_r();
  size_r_ = value;
}

// -------------------------------------------------------------------

// SdkLGet

// required int32 opcode = 1;
inline bool SdkLGet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkLGet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkLGet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkLGet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkLGet::opcode() const {
  return opcode_;
}
inline void SdkLGet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkLGet::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkLGet::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkLGet::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkLGet::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkLGet::table() const {
  return *table_;
}
inline void SdkLGet::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkLGet::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkLGet::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLGet::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkLGet::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLGet::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes name = 3;
inline bool SdkLGet::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkLGet::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkLGet::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkLGet::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SdkLGet::name() const {
  return *name_;
}
inline void SdkLGet::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SdkLGet::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SdkLGet::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLGet::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SdkLGet::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLGet::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 frontorback = 4;
inline bool SdkLGet::has_frontorback() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkLGet::set_has_frontorback() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkLGet::clear_has_frontorback() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkLGet::clear_frontorback() {
  frontorback_ = 0;
  clear_has_frontorback();
}
inline ::google::protobuf::int32 SdkLGet::frontorback() const {
  return frontorback_;
}
inline void SdkLGet::set_frontorback(::google::protobuf::int32 value) {
  set_has_frontorback();
  frontorback_ = value;
}

// -------------------------------------------------------------------

// SdkLGetRet

// required int32 opcode = 1;
inline bool SdkLGetRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkLGetRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkLGetRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkLGetRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkLGetRet::opcode() const {
  return opcode_;
}
inline void SdkLGetRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes value = 2;
inline bool SdkLGetRet::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkLGetRet::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkLGetRet::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkLGetRet::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkLGetRet::value() const {
  return *value_;
}
inline void SdkLGetRet::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkLGetRet::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkLGetRet::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLGetRet::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkLGetRet::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLGetRet::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkLPut

// required int32 opcode = 1;
inline bool SdkLPut::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkLPut::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkLPut::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkLPut::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkLPut::opcode() const {
  return opcode_;
}
inline void SdkLPut::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkLPut::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkLPut::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkLPut::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkLPut::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkLPut::table() const {
  return *table_;
}
inline void SdkLPut::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkLPut::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkLPut::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLPut::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkLPut::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLPut::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes name = 3;
inline bool SdkLPut::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkLPut::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkLPut::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkLPut::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SdkLPut::name() const {
  return *name_;
}
inline void SdkLPut::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SdkLPut::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SdkLPut::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLPut::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SdkLPut::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLPut::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 4;
inline bool SdkLPut::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkLPut::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkLPut::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkLPut::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkLPut::value() const {
  return *value_;
}
inline void SdkLPut::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkLPut::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkLPut::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLPut::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkLPut::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLPut::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 frontorback = 5;
inline bool SdkLPut::has_frontorback() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdkLPut::set_has_frontorback() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SdkLPut::clear_has_frontorback() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SdkLPut::clear_frontorback() {
  frontorback_ = 0;
  clear_has_frontorback();
}
inline ::google::protobuf::int32 SdkLPut::frontorback() const {
  return frontorback_;
}
inline void SdkLPut::set_frontorback(::google::protobuf::int32 value) {
  set_has_frontorback();
  frontorback_ = value;
}

// optional int32 writesrc = 6 [default = 0];
inline bool SdkLPut::has_writesrc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SdkLPut::set_has_writesrc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SdkLPut::clear_has_writesrc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SdkLPut::clear_writesrc() {
  writesrc_ = 0;
  clear_has_writesrc();
}
inline ::google::protobuf::int32 SdkLPut::writesrc() const {
  return writesrc_;
}
inline void SdkLPut::set_writesrc(::google::protobuf::int32 value) {
  set_has_writesrc();
  writesrc_ = value;
}

// -------------------------------------------------------------------

// SdkLPutRet

// required int32 opcode = 1;
inline bool SdkLPutRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkLPutRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkLPutRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkLPutRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkLPutRet::opcode() const {
  return opcode_;
}
inline void SdkLPutRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bool status = 2;
inline bool SdkLPutRet::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkLPutRet::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkLPutRet::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkLPutRet::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool SdkLPutRet::status() const {
  return status_;
}
inline void SdkLPutRet::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// SdkLPop

// required int32 opcode = 1;
inline bool SdkLPop::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkLPop::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkLPop::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkLPop::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkLPop::opcode() const {
  return opcode_;
}
inline void SdkLPop::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkLPop::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkLPop::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkLPop::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkLPop::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkLPop::table() const {
  return *table_;
}
inline void SdkLPop::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkLPop::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkLPop::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLPop::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkLPop::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLPop::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes name = 3;
inline bool SdkLPop::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkLPop::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkLPop::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkLPop::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SdkLPop::name() const {
  return *name_;
}
inline void SdkLPop::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SdkLPop::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SdkLPop::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLPop::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SdkLPop::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLPop::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 frontorback = 4;
inline bool SdkLPop::has_frontorback() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkLPop::set_has_frontorback() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkLPop::clear_has_frontorback() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkLPop::clear_frontorback() {
  frontorback_ = 0;
  clear_has_frontorback();
}
inline ::google::protobuf::int32 SdkLPop::frontorback() const {
  return frontorback_;
}
inline void SdkLPop::set_frontorback(::google::protobuf::int32 value) {
  set_has_frontorback();
  frontorback_ = value;
}

// optional int32 writesrc = 5 [default = 0];
inline bool SdkLPop::has_writesrc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdkLPop::set_has_writesrc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SdkLPop::clear_has_writesrc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SdkLPop::clear_writesrc() {
  writesrc_ = 0;
  clear_has_writesrc();
}
inline ::google::protobuf::int32 SdkLPop::writesrc() const {
  return writesrc_;
}
inline void SdkLPop::set_writesrc(::google::protobuf::int32 value) {
  set_has_writesrc();
  writesrc_ = value;
}

// -------------------------------------------------------------------

// SdkLPopRet

// required int32 opcode = 1;
inline bool SdkLPopRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkLPopRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkLPopRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkLPopRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkLPopRet::opcode() const {
  return opcode_;
}
inline void SdkLPopRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes value = 2;
inline bool SdkLPopRet::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkLPopRet::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkLPopRet::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkLPopRet::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkLPopRet::value() const {
  return *value_;
}
inline void SdkLPopRet::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkLPopRet::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkLPopRet::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLPopRet::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkLPopRet::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLPopRet::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkLIndex

// required int32 opcode = 1;
inline bool SdkLIndex::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkLIndex::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkLIndex::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkLIndex::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkLIndex::opcode() const {
  return opcode_;
}
inline void SdkLIndex::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkLIndex::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkLIndex::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkLIndex::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkLIndex::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkLIndex::table() const {
  return *table_;
}
inline void SdkLIndex::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkLIndex::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkLIndex::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLIndex::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkLIndex::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLIndex::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes name = 3;
inline bool SdkLIndex::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkLIndex::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkLIndex::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkLIndex::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SdkLIndex::name() const {
  return *name_;
}
inline void SdkLIndex::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SdkLIndex::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SdkLIndex::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLIndex::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SdkLIndex::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLIndex::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 index = 4;
inline bool SdkLIndex::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkLIndex::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkLIndex::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkLIndex::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::uint64 SdkLIndex::index() const {
  return index_;
}
inline void SdkLIndex::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
}

// required int32 frontorback = 5;
inline bool SdkLIndex::has_frontorback() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdkLIndex::set_has_frontorback() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SdkLIndex::clear_has_frontorback() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SdkLIndex::clear_frontorback() {
  frontorback_ = 0;
  clear_has_frontorback();
}
inline ::google::protobuf::int32 SdkLIndex::frontorback() const {
  return frontorback_;
}
inline void SdkLIndex::set_frontorback(::google::protobuf::int32 value) {
  set_has_frontorback();
  frontorback_ = value;
}

// -------------------------------------------------------------------

// SdkLIndexRet

// required int32 opcode = 1;
inline bool SdkLIndexRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkLIndexRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkLIndexRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkLIndexRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkLIndexRet::opcode() const {
  return opcode_;
}
inline void SdkLIndexRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes value = 2;
inline bool SdkLIndexRet::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkLIndexRet::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkLIndexRet::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkLIndexRet::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SdkLIndexRet::value() const {
  return *value_;
}
inline void SdkLIndexRet::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkLIndexRet::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SdkLIndexRet::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLIndexRet::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SdkLIndexRet::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLIndexRet::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SdkLRange

// required int32 opcode = 1;
inline bool SdkLRange::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkLRange::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkLRange::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkLRange::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkLRange::opcode() const {
  return opcode_;
}
inline void SdkLRange::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// required bytes table = 2;
inline bool SdkLRange::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdkLRange::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SdkLRange::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SdkLRange::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& SdkLRange::table() const {
  return *table_;
}
inline void SdkLRange::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkLRange::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void SdkLRange::set_table(const void* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLRange::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* SdkLRange::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLRange::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes name = 3;
inline bool SdkLRange::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdkLRange::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SdkLRange::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SdkLRange::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SdkLRange::name() const {
  return *name_;
}
inline void SdkLRange::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SdkLRange::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SdkLRange::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLRange::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SdkLRange::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SdkLRange::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 from = 4;
inline bool SdkLRange::has_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdkLRange::set_has_from() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SdkLRange::clear_has_from() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SdkLRange::clear_from() {
  from_ = GOOGLE_ULONGLONG(0);
  clear_has_from();
}
inline ::google::protobuf::uint64 SdkLRange::from() const {
  return from_;
}
inline void SdkLRange::set_from(::google::protobuf::uint64 value) {
  set_has_from();
  from_ = value;
}

// required uint64 to = 5;
inline bool SdkLRange::has_to() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdkLRange::set_has_to() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SdkLRange::clear_has_to() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SdkLRange::clear_to() {
  to_ = GOOGLE_ULONGLONG(0);
  clear_has_to();
}
inline ::google::protobuf::uint64 SdkLRange::to() const {
  return to_;
}
inline void SdkLRange::set_to(::google::protobuf::uint64 value) {
  set_has_to();
  to_ = value;
}

// required int32 frontorback = 6;
inline bool SdkLRange::has_frontorback() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SdkLRange::set_has_frontorback() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SdkLRange::clear_has_frontorback() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SdkLRange::clear_frontorback() {
  frontorback_ = 0;
  clear_has_frontorback();
}
inline ::google::protobuf::int32 SdkLRange::frontorback() const {
  return frontorback_;
}
inline void SdkLRange::set_frontorback(::google::protobuf::int32 value) {
  set_has_frontorback();
  frontorback_ = value;
}

// -------------------------------------------------------------------

// SdkLRangeRet

// required int32 opcode = 1;
inline bool SdkLRangeRet::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdkLRangeRet::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SdkLRangeRet::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SdkLRangeRet::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 SdkLRangeRet::opcode() const {
  return opcode_;
}
inline void SdkLRangeRet::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
}

// repeated bytes value = 2;
inline int SdkLRangeRet::value_size() const {
  return value_.size();
}
inline void SdkLRangeRet::clear_value() {
  value_.Clear();
}
inline const ::std::string& SdkLRangeRet::value(int index) const {
  return value_.Get(index);
}
inline ::std::string* SdkLRangeRet::mutable_value(int index) {
  return value_.Mutable(index);
}
inline void SdkLRangeRet::set_value(int index, const ::std::string& value) {
  value_.Mutable(index)->assign(value);
}
inline void SdkLRangeRet::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
}
inline void SdkLRangeRet::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SdkLRangeRet::add_value() {
  return value_.Add();
}
inline void SdkLRangeRet::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
}
inline void SdkLRangeRet::add_value(const char* value) {
  value_.Add()->assign(value);
}
inline void SdkLRangeRet::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SdkLRangeRet::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SdkLRangeRet::mutable_value() {
  return &value_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bada_5fsdk_2eproto__INCLUDED
