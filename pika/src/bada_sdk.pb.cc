// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bada_sdk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bada_sdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SdkInvalidOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkInvalidOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkSetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkSetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkCas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkCas_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkCasRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkCasRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkGetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkGetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkGetV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkGetV_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkGetVRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkGetVRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkDelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkDeleteRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkDeleteRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkPingRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkPingRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkGetIfAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkGetIfAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkGetIfAllRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkGetIfAllRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkMGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkMGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkMGetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkMGetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkMGetRet_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkMGetRet_KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMetadata4SDK2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMetadata4SDK2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rint32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rint32_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMetadata4SDK3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMetadata4SDK3_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMetadata4SDK3_NPs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMetadata4SDK3_NPs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPrimary4SDK2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPrimary4SDK2_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPrimary4SDK3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPrimary4SDK3_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHGetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHGetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHPut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHPut_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHPutRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHPutRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHDelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHDeleteRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHDeleteRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHGetAllKeysByName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHGetAllKeysByName_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHGetAllKeysByNameRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHGetAllKeysByNameRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHGetAllKVsByName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHGetAllKVsByName_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHGetAllKVsByNameRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHGetAllKVsByNameRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHGetAllKVsByNameRet_HKeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHGetAllKVsByNameRet_HKeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHMput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHMput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHMput_HKeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHMput_HKeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHMputRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHMputRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHMputRet_HKeyRetval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHMputRet_HKeyRetval_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHMget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHMget_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHMgetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHMgetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkHMgetRet_HKeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkHMgetRet_HKeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkSetWithTTL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkSetWithTTL_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkSetWithTTLRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkSetWithTTLRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkLSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLSizeRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkLSizeRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkLGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLGetRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkLGetRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLPut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkLPut_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLPutRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkLPutRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLPop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkLPop_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLPopRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkLPopRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkLIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLIndexRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkLIndexRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkLRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdkLRangeRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdkLRangeRet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bada_5fsdk_2eproto() {
  protobuf_AddDesc_bada_5fsdk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bada_sdk.proto");
  GOOGLE_CHECK(file != NULL);
  SdkInvalidOperation_descriptor_ = file->message_type(0);
  static const int SdkInvalidOperation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkInvalidOperation, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkInvalidOperation, what_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkInvalidOperation, why_),
  };
  SdkInvalidOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkInvalidOperation_descriptor_,
      SdkInvalidOperation::default_instance_,
      SdkInvalidOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkInvalidOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkInvalidOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkInvalidOperation));
  SdkSet_descriptor_ = file->message_type(1);
  static const int SdkSet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSet, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSet, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSet, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSet, writesrc_),
  };
  SdkSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkSet_descriptor_,
      SdkSet::default_instance_,
      SdkSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkSet));
  SdkSetRet_descriptor_ = file->message_type(2);
  static const int SdkSetRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetRet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetRet, master_),
  };
  SdkSetRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkSetRet_descriptor_,
      SdkSetRet::default_instance_,
      SdkSetRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkSetRet));
  SdkCas_descriptor_ = file->message_type(3);
  static const int SdkCas_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, writesrc_),
  };
  SdkCas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkCas_descriptor_,
      SdkCas::default_instance_,
      SdkCas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkCas));
  SdkCasRet_descriptor_ = file->message_type(4);
  static const int SdkCasRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCasRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCasRet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCasRet, master_),
  };
  SdkCasRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkCasRet_descriptor_,
      SdkCasRet::default_instance_,
      SdkCasRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCasRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkCasRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkCasRet));
  SdkGet_descriptor_ = file->message_type(5);
  static const int SdkGet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGet, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGet, key_),
  };
  SdkGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkGet_descriptor_,
      SdkGet::default_instance_,
      SdkGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkGet));
  SdkGetRet_descriptor_ = file->message_type(6);
  static const int SdkGetRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetRet, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetRet, master_),
  };
  SdkGetRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkGetRet_descriptor_,
      SdkGetRet::default_instance_,
      SdkGetRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkGetRet));
  SdkGetV_descriptor_ = file->message_type(7);
  static const int SdkGetV_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetV, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetV, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetV, key_),
  };
  SdkGetV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkGetV_descriptor_,
      SdkGetV::default_instance_,
      SdkGetV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkGetV));
  SdkGetVRet_descriptor_ = file->message_type(8);
  static const int SdkGetVRet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetVRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetVRet, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetVRet, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetVRet, master_),
  };
  SdkGetVRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkGetVRet_descriptor_,
      SdkGetVRet::default_instance_,
      SdkGetVRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetVRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetVRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkGetVRet));
  SdkDelete_descriptor_ = file->message_type(9);
  static const int SdkDelete_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDelete, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDelete, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDelete, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDelete, writesrc_),
  };
  SdkDelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkDelete_descriptor_,
      SdkDelete::default_instance_,
      SdkDelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkDelete));
  SdkDeleteRet_descriptor_ = file->message_type(10);
  static const int SdkDeleteRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDeleteRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDeleteRet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDeleteRet, master_),
  };
  SdkDeleteRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkDeleteRet_descriptor_,
      SdkDeleteRet::default_instance_,
      SdkDeleteRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDeleteRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkDeleteRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkDeleteRet));
  SdkPing_descriptor_ = file->message_type(11);
  static const int SdkPing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkPing, opcode_),
  };
  SdkPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkPing_descriptor_,
      SdkPing::default_instance_,
      SdkPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkPing));
  SdkPingRet_descriptor_ = file->message_type(12);
  static const int SdkPingRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkPingRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkPingRet, status_),
  };
  SdkPingRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkPingRet_descriptor_,
      SdkPingRet::default_instance_,
      SdkPingRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkPingRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkPingRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkPingRet));
  SdkGetIfAll_descriptor_ = file->message_type(13);
  static const int SdkGetIfAll_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAll, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAll, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAll, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAll, strict_),
  };
  SdkGetIfAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkGetIfAll_descriptor_,
      SdkGetIfAll::default_instance_,
      SdkGetIfAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkGetIfAll));
  SdkGetIfAllRet_descriptor_ = file->message_type(14);
  static const int SdkGetIfAllRet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAllRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAllRet, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAllRet, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAllRet, master_),
  };
  SdkGetIfAllRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkGetIfAllRet_descriptor_,
      SdkGetIfAllRet::default_instance_,
      SdkGetIfAllRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAllRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkGetIfAllRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkGetIfAllRet));
  SdkMGet_descriptor_ = file->message_type(15);
  static const int SdkMGet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGet, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGet, key_),
  };
  SdkMGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkMGet_descriptor_,
      SdkMGet::default_instance_,
      SdkMGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkMGet));
  SdkMGetRet_descriptor_ = file->message_type(16);
  static const int SdkMGetRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet, rets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet, master_),
  };
  SdkMGetRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkMGetRet_descriptor_,
      SdkMGetRet::default_instance_,
      SdkMGetRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkMGetRet));
  SdkMGetRet_KeyValue_descriptor_ = SdkMGetRet_descriptor_->nested_type(0);
  static const int SdkMGetRet_KeyValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet_KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet_KeyValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet_KeyValue, status_),
  };
  SdkMGetRet_KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkMGetRet_KeyValue_descriptor_,
      SdkMGetRet_KeyValue::default_instance_,
      SdkMGetRet_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet_KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkMGetRet_KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkMGetRet_KeyValue));
  GetMetadata4SDK2_descriptor_ = file->message_type(17);
  static const int GetMetadata4SDK2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK2, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK2, table_),
  };
  GetMetadata4SDK2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMetadata4SDK2_descriptor_,
      GetMetadata4SDK2::default_instance_,
      GetMetadata4SDK2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMetadata4SDK2));
  Rint32_descriptor_ = file->message_type(18);
  static const int Rint32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rint32, id_),
  };
  Rint32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rint32_descriptor_,
      Rint32::default_instance_,
      Rint32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rint32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rint32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rint32));
  GetMetadata4SDK3_descriptor_ = file->message_type(19);
  static const int GetMetadata4SDK3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3, nps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3, pcnt_),
  };
  GetMetadata4SDK3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMetadata4SDK3_descriptor_,
      GetMetadata4SDK3::default_instance_,
      GetMetadata4SDK3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMetadata4SDK3));
  GetMetadata4SDK3_NPs_descriptor_ = GetMetadata4SDK3_descriptor_->nested_type(0);
  static const int GetMetadata4SDK3_NPs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3_NPs, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3_NPs, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3_NPs, partitions_),
  };
  GetMetadata4SDK3_NPs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMetadata4SDK3_NPs_descriptor_,
      GetMetadata4SDK3_NPs::default_instance_,
      GetMetadata4SDK3_NPs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3_NPs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadata4SDK3_NPs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMetadata4SDK3_NPs));
  GetPrimary4SDK2_descriptor_ = file->message_type(20);
  static const int GetPrimary4SDK2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK2, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK2, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK2, partition_),
  };
  GetPrimary4SDK2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPrimary4SDK2_descriptor_,
      GetPrimary4SDK2::default_instance_,
      GetPrimary4SDK2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPrimary4SDK2));
  GetPrimary4SDK3_descriptor_ = file->message_type(21);
  static const int GetPrimary4SDK3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK3, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK3, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK3, port_),
  };
  GetPrimary4SDK3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPrimary4SDK3_descriptor_,
      GetPrimary4SDK3::default_instance_,
      GetPrimary4SDK3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimary4SDK3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPrimary4SDK3));
  SdkHGet_descriptor_ = file->message_type(22);
  static const int SdkHGet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGet, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGet, hname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGet, key_),
  };
  SdkHGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHGet_descriptor_,
      SdkHGet::default_instance_,
      SdkHGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHGet));
  SdkHGetRet_descriptor_ = file->message_type(23);
  static const int SdkHGetRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetRet, value_),
  };
  SdkHGetRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHGetRet_descriptor_,
      SdkHGetRet::default_instance_,
      SdkHGetRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHGetRet));
  SdkHPut_descriptor_ = file->message_type(24);
  static const int SdkHPut_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut, hname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut, writesrc_),
  };
  SdkHPut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHPut_descriptor_,
      SdkHPut::default_instance_,
      SdkHPut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHPut));
  SdkHPutRet_descriptor_ = file->message_type(25);
  static const int SdkHPutRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPutRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPutRet, status_),
  };
  SdkHPutRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHPutRet_descriptor_,
      SdkHPutRet::default_instance_,
      SdkHPutRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPutRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHPutRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHPutRet));
  SdkHDelete_descriptor_ = file->message_type(26);
  static const int SdkHDelete_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDelete, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDelete, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDelete, hname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDelete, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDelete, writesrc_),
  };
  SdkHDelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHDelete_descriptor_,
      SdkHDelete::default_instance_,
      SdkHDelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHDelete));
  SdkHDeleteRet_descriptor_ = file->message_type(27);
  static const int SdkHDeleteRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDeleteRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDeleteRet, status_),
  };
  SdkHDeleteRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHDeleteRet_descriptor_,
      SdkHDeleteRet::default_instance_,
      SdkHDeleteRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDeleteRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHDeleteRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHDeleteRet));
  SdkHGetAllKeysByName_descriptor_ = file->message_type(28);
  static const int SdkHGetAllKeysByName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByName, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByName, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByName, hname_),
  };
  SdkHGetAllKeysByName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHGetAllKeysByName_descriptor_,
      SdkHGetAllKeysByName::default_instance_,
      SdkHGetAllKeysByName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHGetAllKeysByName));
  SdkHGetAllKeysByNameRet_descriptor_ = file->message_type(29);
  static const int SdkHGetAllKeysByNameRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByNameRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByNameRet, keys_),
  };
  SdkHGetAllKeysByNameRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHGetAllKeysByNameRet_descriptor_,
      SdkHGetAllKeysByNameRet::default_instance_,
      SdkHGetAllKeysByNameRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByNameRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKeysByNameRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHGetAllKeysByNameRet));
  SdkHGetAllKVsByName_descriptor_ = file->message_type(30);
  static const int SdkHGetAllKVsByName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByName, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByName, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByName, hname_),
  };
  SdkHGetAllKVsByName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHGetAllKVsByName_descriptor_,
      SdkHGetAllKVsByName::default_instance_,
      SdkHGetAllKVsByName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHGetAllKVsByName));
  SdkHGetAllKVsByNameRet_descriptor_ = file->message_type(31);
  static const int SdkHGetAllKVsByNameRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByNameRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByNameRet, rets_),
  };
  SdkHGetAllKVsByNameRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHGetAllKVsByNameRet_descriptor_,
      SdkHGetAllKVsByNameRet::default_instance_,
      SdkHGetAllKVsByNameRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByNameRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByNameRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHGetAllKVsByNameRet));
  SdkHGetAllKVsByNameRet_HKeyValue_descriptor_ = SdkHGetAllKVsByNameRet_descriptor_->nested_type(0);
  static const int SdkHGetAllKVsByNameRet_HKeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByNameRet_HKeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByNameRet_HKeyValue, value_),
  };
  SdkHGetAllKVsByNameRet_HKeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHGetAllKVsByNameRet_HKeyValue_descriptor_,
      SdkHGetAllKVsByNameRet_HKeyValue::default_instance_,
      SdkHGetAllKVsByNameRet_HKeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByNameRet_HKeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHGetAllKVsByNameRet_HKeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHGetAllKVsByNameRet_HKeyValue));
  SdkHMput_descriptor_ = file->message_type(32);
  static const int SdkHMput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput, hname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput, kvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput, writesrc_),
  };
  SdkHMput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHMput_descriptor_,
      SdkHMput::default_instance_,
      SdkHMput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHMput));
  SdkHMput_HKeyValue_descriptor_ = SdkHMput_descriptor_->nested_type(0);
  static const int SdkHMput_HKeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput_HKeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput_HKeyValue, value_),
  };
  SdkHMput_HKeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHMput_HKeyValue_descriptor_,
      SdkHMput_HKeyValue::default_instance_,
      SdkHMput_HKeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput_HKeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMput_HKeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHMput_HKeyValue));
  SdkHMputRet_descriptor_ = file->message_type(33);
  static const int SdkHMputRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet, krvs_),
  };
  SdkHMputRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHMputRet_descriptor_,
      SdkHMputRet::default_instance_,
      SdkHMputRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHMputRet));
  SdkHMputRet_HKeyRetval_descriptor_ = SdkHMputRet_descriptor_->nested_type(0);
  static const int SdkHMputRet_HKeyRetval_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet_HKeyRetval, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet_HKeyRetval, retval_),
  };
  SdkHMputRet_HKeyRetval_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHMputRet_HKeyRetval_descriptor_,
      SdkHMputRet_HKeyRetval::default_instance_,
      SdkHMputRet_HKeyRetval_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet_HKeyRetval, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMputRet_HKeyRetval, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHMputRet_HKeyRetval));
  SdkHMget_descriptor_ = file->message_type(34);
  static const int SdkHMget_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMget, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMget, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMget, hname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMget, keys_),
  };
  SdkHMget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHMget_descriptor_,
      SdkHMget::default_instance_,
      SdkHMget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHMget));
  SdkHMgetRet_descriptor_ = file->message_type(35);
  static const int SdkHMgetRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet, kvs_),
  };
  SdkHMgetRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHMgetRet_descriptor_,
      SdkHMgetRet::default_instance_,
      SdkHMgetRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHMgetRet));
  SdkHMgetRet_HKeyValue_descriptor_ = SdkHMgetRet_descriptor_->nested_type(0);
  static const int SdkHMgetRet_HKeyValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet_HKeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet_HKeyValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet_HKeyValue, retval_),
  };
  SdkHMgetRet_HKeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkHMgetRet_HKeyValue_descriptor_,
      SdkHMgetRet_HKeyValue::default_instance_,
      SdkHMgetRet_HKeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet_HKeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkHMgetRet_HKeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkHMgetRet_HKeyValue));
  SdkSetWithTTL_descriptor_ = file->message_type(36);
  static const int SdkSetWithTTL_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL, writesrc_),
  };
  SdkSetWithTTL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkSetWithTTL_descriptor_,
      SdkSetWithTTL::default_instance_,
      SdkSetWithTTL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkSetWithTTL));
  SdkSetWithTTLRet_descriptor_ = file->message_type(37);
  static const int SdkSetWithTTLRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTLRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTLRet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTLRet, master_),
  };
  SdkSetWithTTLRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkSetWithTTLRet_descriptor_,
      SdkSetWithTTLRet::default_instance_,
      SdkSetWithTTLRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTLRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkSetWithTTLRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkSetWithTTLRet));
  SdkLSize_descriptor_ = file->message_type(38);
  static const int SdkLSize_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSize, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSize, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSize, name_),
  };
  SdkLSize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkLSize_descriptor_,
      SdkLSize::default_instance_,
      SdkLSize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkLSize));
  SdkLSizeRet_descriptor_ = file->message_type(39);
  static const int SdkLSizeRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSizeRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSizeRet, size_r_),
  };
  SdkLSizeRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkLSizeRet_descriptor_,
      SdkLSizeRet::default_instance_,
      SdkLSizeRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSizeRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLSizeRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkLSizeRet));
  SdkLGet_descriptor_ = file->message_type(40);
  static const int SdkLGet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGet, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGet, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGet, frontorback_),
  };
  SdkLGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkLGet_descriptor_,
      SdkLGet::default_instance_,
      SdkLGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkLGet));
  SdkLGetRet_descriptor_ = file->message_type(41);
  static const int SdkLGetRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGetRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGetRet, value_),
  };
  SdkLGetRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkLGetRet_descriptor_,
      SdkLGetRet::default_instance_,
      SdkLGetRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGetRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLGetRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkLGetRet));
  SdkLPut_descriptor_ = file->message_type(42);
  static const int SdkLPut_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut, frontorback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut, writesrc_),
  };
  SdkLPut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkLPut_descriptor_,
      SdkLPut::default_instance_,
      SdkLPut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkLPut));
  SdkLPutRet_descriptor_ = file->message_type(43);
  static const int SdkLPutRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPutRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPutRet, status_),
  };
  SdkLPutRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkLPutRet_descriptor_,
      SdkLPutRet::default_instance_,
      SdkLPutRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPutRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPutRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkLPutRet));
  SdkLPop_descriptor_ = file->message_type(44);
  static const int SdkLPop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPop, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPop, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPop, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPop, frontorback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPop, writesrc_),
  };
  SdkLPop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkLPop_descriptor_,
      SdkLPop::default_instance_,
      SdkLPop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkLPop));
  SdkLPopRet_descriptor_ = file->message_type(45);
  static const int SdkLPopRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPopRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPopRet, value_),
  };
  SdkLPopRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkLPopRet_descriptor_,
      SdkLPopRet::default_instance_,
      SdkLPopRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPopRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLPopRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkLPopRet));
  SdkLIndex_descriptor_ = file->message_type(46);
  static const int SdkLIndex_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndex, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndex, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndex, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndex, frontorback_),
  };
  SdkLIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkLIndex_descriptor_,
      SdkLIndex::default_instance_,
      SdkLIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkLIndex));
  SdkLIndexRet_descriptor_ = file->message_type(47);
  static const int SdkLIndexRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndexRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndexRet, value_),
  };
  SdkLIndexRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkLIndexRet_descriptor_,
      SdkLIndexRet::default_instance_,
      SdkLIndexRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndexRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLIndexRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkLIndexRet));
  SdkLRange_descriptor_ = file->message_type(48);
  static const int SdkLRange_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange, frontorback_),
  };
  SdkLRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkLRange_descriptor_,
      SdkLRange::default_instance_,
      SdkLRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkLRange));
  SdkLRangeRet_descriptor_ = file->message_type(49);
  static const int SdkLRangeRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRangeRet, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRangeRet, value_),
  };
  SdkLRangeRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SdkLRangeRet_descriptor_,
      SdkLRangeRet::default_instance_,
      SdkLRangeRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRangeRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdkLRangeRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SdkLRangeRet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bada_5fsdk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkInvalidOperation_descriptor_, &SdkInvalidOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkSet_descriptor_, &SdkSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkSetRet_descriptor_, &SdkSetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkCas_descriptor_, &SdkCas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkCasRet_descriptor_, &SdkCasRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkGet_descriptor_, &SdkGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkGetRet_descriptor_, &SdkGetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkGetV_descriptor_, &SdkGetV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkGetVRet_descriptor_, &SdkGetVRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkDelete_descriptor_, &SdkDelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkDeleteRet_descriptor_, &SdkDeleteRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkPing_descriptor_, &SdkPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkPingRet_descriptor_, &SdkPingRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkGetIfAll_descriptor_, &SdkGetIfAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkGetIfAllRet_descriptor_, &SdkGetIfAllRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkMGet_descriptor_, &SdkMGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkMGetRet_descriptor_, &SdkMGetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkMGetRet_KeyValue_descriptor_, &SdkMGetRet_KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMetadata4SDK2_descriptor_, &GetMetadata4SDK2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rint32_descriptor_, &Rint32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMetadata4SDK3_descriptor_, &GetMetadata4SDK3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMetadata4SDK3_NPs_descriptor_, &GetMetadata4SDK3_NPs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPrimary4SDK2_descriptor_, &GetPrimary4SDK2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPrimary4SDK3_descriptor_, &GetPrimary4SDK3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHGet_descriptor_, &SdkHGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHGetRet_descriptor_, &SdkHGetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHPut_descriptor_, &SdkHPut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHPutRet_descriptor_, &SdkHPutRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHDelete_descriptor_, &SdkHDelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHDeleteRet_descriptor_, &SdkHDeleteRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHGetAllKeysByName_descriptor_, &SdkHGetAllKeysByName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHGetAllKeysByNameRet_descriptor_, &SdkHGetAllKeysByNameRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHGetAllKVsByName_descriptor_, &SdkHGetAllKVsByName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHGetAllKVsByNameRet_descriptor_, &SdkHGetAllKVsByNameRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHGetAllKVsByNameRet_HKeyValue_descriptor_, &SdkHGetAllKVsByNameRet_HKeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHMput_descriptor_, &SdkHMput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHMput_HKeyValue_descriptor_, &SdkHMput_HKeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHMputRet_descriptor_, &SdkHMputRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHMputRet_HKeyRetval_descriptor_, &SdkHMputRet_HKeyRetval::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHMget_descriptor_, &SdkHMget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHMgetRet_descriptor_, &SdkHMgetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkHMgetRet_HKeyValue_descriptor_, &SdkHMgetRet_HKeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkSetWithTTL_descriptor_, &SdkSetWithTTL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkSetWithTTLRet_descriptor_, &SdkSetWithTTLRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkLSize_descriptor_, &SdkLSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkLSizeRet_descriptor_, &SdkLSizeRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkLGet_descriptor_, &SdkLGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkLGetRet_descriptor_, &SdkLGetRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkLPut_descriptor_, &SdkLPut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkLPutRet_descriptor_, &SdkLPutRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkLPop_descriptor_, &SdkLPop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkLPopRet_descriptor_, &SdkLPopRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkLIndex_descriptor_, &SdkLIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkLIndexRet_descriptor_, &SdkLIndexRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkLRange_descriptor_, &SdkLRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SdkLRangeRet_descriptor_, &SdkLRangeRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bada_5fsdk_2eproto() {
  delete SdkInvalidOperation::default_instance_;
  delete SdkInvalidOperation_reflection_;
  delete SdkSet::default_instance_;
  delete SdkSet_reflection_;
  delete SdkSetRet::default_instance_;
  delete SdkSetRet_reflection_;
  delete SdkCas::default_instance_;
  delete SdkCas_reflection_;
  delete SdkCasRet::default_instance_;
  delete SdkCasRet_reflection_;
  delete SdkGet::default_instance_;
  delete SdkGet_reflection_;
  delete SdkGetRet::default_instance_;
  delete SdkGetRet_reflection_;
  delete SdkGetV::default_instance_;
  delete SdkGetV_reflection_;
  delete SdkGetVRet::default_instance_;
  delete SdkGetVRet_reflection_;
  delete SdkDelete::default_instance_;
  delete SdkDelete_reflection_;
  delete SdkDeleteRet::default_instance_;
  delete SdkDeleteRet_reflection_;
  delete SdkPing::default_instance_;
  delete SdkPing_reflection_;
  delete SdkPingRet::default_instance_;
  delete SdkPingRet_reflection_;
  delete SdkGetIfAll::default_instance_;
  delete SdkGetIfAll_reflection_;
  delete SdkGetIfAllRet::default_instance_;
  delete SdkGetIfAllRet_reflection_;
  delete SdkMGet::default_instance_;
  delete SdkMGet_reflection_;
  delete SdkMGetRet::default_instance_;
  delete SdkMGetRet_reflection_;
  delete SdkMGetRet_KeyValue::default_instance_;
  delete SdkMGetRet_KeyValue_reflection_;
  delete GetMetadata4SDK2::default_instance_;
  delete GetMetadata4SDK2_reflection_;
  delete Rint32::default_instance_;
  delete Rint32_reflection_;
  delete GetMetadata4SDK3::default_instance_;
  delete GetMetadata4SDK3_reflection_;
  delete GetMetadata4SDK3_NPs::default_instance_;
  delete GetMetadata4SDK3_NPs_reflection_;
  delete GetPrimary4SDK2::default_instance_;
  delete GetPrimary4SDK2_reflection_;
  delete GetPrimary4SDK3::default_instance_;
  delete GetPrimary4SDK3_reflection_;
  delete SdkHGet::default_instance_;
  delete SdkHGet_reflection_;
  delete SdkHGetRet::default_instance_;
  delete SdkHGetRet_reflection_;
  delete SdkHPut::default_instance_;
  delete SdkHPut_reflection_;
  delete SdkHPutRet::default_instance_;
  delete SdkHPutRet_reflection_;
  delete SdkHDelete::default_instance_;
  delete SdkHDelete_reflection_;
  delete SdkHDeleteRet::default_instance_;
  delete SdkHDeleteRet_reflection_;
  delete SdkHGetAllKeysByName::default_instance_;
  delete SdkHGetAllKeysByName_reflection_;
  delete SdkHGetAllKeysByNameRet::default_instance_;
  delete SdkHGetAllKeysByNameRet_reflection_;
  delete SdkHGetAllKVsByName::default_instance_;
  delete SdkHGetAllKVsByName_reflection_;
  delete SdkHGetAllKVsByNameRet::default_instance_;
  delete SdkHGetAllKVsByNameRet_reflection_;
  delete SdkHGetAllKVsByNameRet_HKeyValue::default_instance_;
  delete SdkHGetAllKVsByNameRet_HKeyValue_reflection_;
  delete SdkHMput::default_instance_;
  delete SdkHMput_reflection_;
  delete SdkHMput_HKeyValue::default_instance_;
  delete SdkHMput_HKeyValue_reflection_;
  delete SdkHMputRet::default_instance_;
  delete SdkHMputRet_reflection_;
  delete SdkHMputRet_HKeyRetval::default_instance_;
  delete SdkHMputRet_HKeyRetval_reflection_;
  delete SdkHMget::default_instance_;
  delete SdkHMget_reflection_;
  delete SdkHMgetRet::default_instance_;
  delete SdkHMgetRet_reflection_;
  delete SdkHMgetRet_HKeyValue::default_instance_;
  delete SdkHMgetRet_HKeyValue_reflection_;
  delete SdkSetWithTTL::default_instance_;
  delete SdkSetWithTTL_reflection_;
  delete SdkSetWithTTLRet::default_instance_;
  delete SdkSetWithTTLRet_reflection_;
  delete SdkLSize::default_instance_;
  delete SdkLSize_reflection_;
  delete SdkLSizeRet::default_instance_;
  delete SdkLSizeRet_reflection_;
  delete SdkLGet::default_instance_;
  delete SdkLGet_reflection_;
  delete SdkLGetRet::default_instance_;
  delete SdkLGetRet_reflection_;
  delete SdkLPut::default_instance_;
  delete SdkLPut_reflection_;
  delete SdkLPutRet::default_instance_;
  delete SdkLPutRet_reflection_;
  delete SdkLPop::default_instance_;
  delete SdkLPop_reflection_;
  delete SdkLPopRet::default_instance_;
  delete SdkLPopRet_reflection_;
  delete SdkLIndex::default_instance_;
  delete SdkLIndex_reflection_;
  delete SdkLIndexRet::default_instance_;
  delete SdkLIndexRet_reflection_;
  delete SdkLRange::default_instance_;
  delete SdkLRange_reflection_;
  delete SdkLRangeRet::default_instance_;
  delete SdkLRangeRet_reflection_;
}

void protobuf_AddDesc_bada_5fsdk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016bada_sdk.proto\"@\n\023SdkInvalidOperation\022"
    "\016\n\006opcode\030\001 \002(\005\022\014\n\004what\030\002 \002(\005\022\013\n\003why\030\003 \002"
    "(\014\"X\n\006SdkSet\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 "
    "\002(\014\022\013\n\003key\030\003 \002(\014\022\r\n\005value\030\004 \002(\014\022\023\n\010write"
    "src\030\005 \001(\005:\0010\";\n\tSdkSetRet\022\016\n\006opcode\030\001 \002("
    "\005\022\016\n\006status\030\002 \002(\010\022\016\n\006master\030\003 \001(\t\"i\n\006Sdk"
    "Cas\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 \002(\014\022\013\n\003ke"
    "y\030\003 \002(\014\022\r\n\005value\030\004 \002(\014\022\017\n\007version\030\005 \002(\005\022"
    "\023\n\010writesrc\030\006 \001(\005:\0010\";\n\tSdkCasRet\022\016\n\006opc"
    "ode\030\001 \002(\005\022\016\n\006status\030\002 \002(\010\022\016\n\006master\030\003 \001("
    "\t\"4\n\006SdkGet\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 \002"
    "(\014\022\013\n\003key\030\003 \002(\014\":\n\tSdkGetRet\022\016\n\006opcode\030\001"
    " \002(\005\022\r\n\005value\030\002 \002(\014\022\016\n\006master\030\003 \001(\t\"5\n\007S"
    "dkGetV\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 \002(\014\022\013\n"
    "\003key\030\003 \002(\014\"L\n\nSdkGetVRet\022\016\n\006opcode\030\001 \002(\005"
    "\022\r\n\005value\030\002 \002(\014\022\017\n\007version\030\003 \002(\005\022\016\n\006mast"
    "er\030\004 \001(\t\"L\n\tSdkDelete\022\016\n\006opcode\030\001 \002(\005\022\r\n"
    "\005table\030\002 \002(\014\022\013\n\003key\030\003 \002(\014\022\023\n\010writesrc\030\004 "
    "\001(\005:\0010\">\n\014SdkDeleteRet\022\016\n\006opcode\030\001 \002(\005\022\016"
    "\n\006status\030\002 \002(\010\022\016\n\006master\030\003 \001(\t\"\031\n\007SdkPin"
    "g\022\016\n\006opcode\030\001 \002(\005\",\n\nSdkPingRet\022\016\n\006opcod"
    "e\030\001 \002(\005\022\016\n\006status\030\002 \002(\010\"I\n\013SdkGetIfAll\022\016"
    "\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 \002(\014\022\013\n\003key\030\003 \002"
    "(\014\022\016\n\006Strict\030\004 \002(\010\"P\n\016SdkGetIfAllRet\022\016\n\006"
    "opcode\030\001 \002(\005\022\r\n\005value\030\002 \002(\014\022\017\n\007version\030\003"
    " \002(\005\022\016\n\006master\030\004 \001(\t\"5\n\007SdkMGet\022\016\n\006opcod"
    "e\030\001 \002(\005\022\r\n\005table\030\002 \002(\014\022\013\n\003key\030\003 \003(\014\"\210\001\n\n"
    "SdkMGetRet\022\016\n\006opcode\030\001 \002(\005\022\"\n\004rets\030\002 \003(\013"
    "2\024.SdkMGetRet.KeyValue\022\016\n\006master\030\003 \001(\t\0326"
    "\n\010KeyValue\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \002(\014\022\016"
    "\n\006status\030\003 \002(\005\".\n\020GetMetadata4SDK2\022\013\n\003cm"
    "d\030\001 \002(\005\022\r\n\005table\030\002 \002(\t\"\024\n\006Rint32\022\n\n\002id\030\001"
    " \002(\005\"\221\001\n\020GetMetadata4SDK3\022\013\n\003cmd\030\001 \002(\005\022\""
    "\n\003nps\030\002 \003(\0132\025.GetMetadata4SDK3.NPs\022\014\n\004pc"
    "nt\030\003 \002(\005\032>\n\003NPs\022\014\n\004host\030\001 \002(\t\022\014\n\004port\030\002 "
    "\002(\005\022\033\n\npartitions\030\003 \003(\0132\007.Rint32\"@\n\017GetP"
    "rimary4SDK2\022\013\n\003cmd\030\001 \002(\005\022\r\n\005table\030\002 \002(\t\022"
    "\021\n\tpartition\030\003 \002(\005\":\n\017GetPrimary4SDK3\022\013\n"
    "\003cmd\030\001 \002(\005\022\014\n\004host\030\002 \002(\t\022\014\n\004port\030\003 \002(\005\"D"
    "\n\007SdkHGet\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 \002(\014"
    "\022\r\n\005hname\030\003 \002(\014\022\013\n\003key\030\004 \002(\014\"+\n\nSdkHGetR"
    "et\022\016\n\006opcode\030\001 \002(\005\022\r\n\005value\030\002 \002(\014\"h\n\007Sdk"
    "HPut\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 \002(\014\022\r\n\005h"
    "name\030\003 \002(\014\022\013\n\003key\030\004 \002(\014\022\r\n\005value\030\005 \002(\014\022\023"
    "\n\010writesrc\030\006 \001(\005:\0010\",\n\nSdkHPutRet\022\016\n\006opc"
    "ode\030\001 \002(\005\022\016\n\006status\030\002 \002(\010\"\\\n\nSdkHDelete\022"
    "\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 \002(\014\022\r\n\005hname\030"
    "\003 \002(\014\022\013\n\003key\030\004 \002(\014\022\023\n\010writesrc\030\005 \001(\005:\0010\""
    "/\n\rSdkHDeleteRet\022\016\n\006opcode\030\001 \002(\005\022\016\n\006stat"
    "us\030\002 \002(\010\"D\n\024SdkHGetAllKeysByName\022\016\n\006opco"
    "de\030\001 \002(\005\022\r\n\005table\030\002 \002(\014\022\r\n\005hname\030\003 \002(\014\"7"
    "\n\027SdkHGetAllKeysByNameRet\022\016\n\006opcode\030\001 \002("
    "\005\022\014\n\004keys\030\002 \003(\014\"C\n\023SdkHGetAllKVsByName\022\016"
    "\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 \002(\014\022\r\n\005hname\030\003"
    " \002(\014\"\202\001\n\026SdkHGetAllKVsByNameRet\022\016\n\006opcod"
    "e\030\001 \002(\005\022/\n\004rets\030\002 \003(\0132!.SdkHGetAllKVsByN"
    "ameRet.HKeyValue\032\'\n\tHKeyValue\022\013\n\003key\030\001 \002"
    "(\014\022\r\n\005value\030\002 \002(\014\"\230\001\n\010SdkHMput\022\016\n\006opcode"
    "\030\001 \002(\005\022\r\n\005table\030\002 \002(\014\022\r\n\005hname\030\003 \002(\014\022 \n\003"
    "kvs\030\004 \003(\0132\023.SdkHMput.HKeyValue\022\023\n\010writes"
    "rc\030\005 \001(\005:\0010\032\'\n\tHKeyValue\022\013\n\003key\030\001 \002(\014\022\r\n"
    "\005value\030\002 \002(\014\"o\n\013SdkHMputRet\022\016\n\006opcode\030\001 "
    "\002(\005\022%\n\004krvs\030\002 \003(\0132\027.SdkHMputRet.HKeyRetv"
    "al\032)\n\nHKeyRetval\022\013\n\003key\030\001 \002(\014\022\016\n\006retval\030"
    "\002 \002(\005\"F\n\010SdkHMget\022\016\n\006opcode\030\001 \002(\005\022\r\n\005tab"
    "le\030\002 \002(\014\022\r\n\005hname\030\003 \002(\014\022\014\n\004keys\030\004 \003(\014\"{\n"
    "\013SdkHMgetRet\022\016\n\006opcode\030\001 \002(\005\022#\n\003kvs\030\002 \003("
    "\0132\026.SdkHMgetRet.HKeyValue\0327\n\tHKeyValue\022\013"
    "\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \002(\014\022\016\n\006retval\030\003 \002"
    "(\005\"l\n\rSdkSetWithTTL\022\016\n\006opcode\030\001 \002(\005\022\r\n\005t"
    "able\030\002 \002(\014\022\013\n\003key\030\003 \002(\014\022\r\n\005value\030\004 \002(\014\022\013"
    "\n\003ttl\030\005 \002(\005\022\023\n\010writesrc\030\006 \001(\005:\0010\"B\n\020SdkS"
    "etWithTTLRet\022\016\n\006opcode\030\001 \002(\005\022\016\n\006status\030\002"
    " \002(\010\022\016\n\006master\030\003 \001(\t\"7\n\010SdkLSize\022\016\n\006opco"
    "de\030\001 \002(\005\022\r\n\005table\030\002 \002(\014\022\014\n\004name\030\003 \002(\014\"-\n"
    "\013SdkLSizeRet\022\016\n\006opcode\030\001 \002(\005\022\016\n\006size_r\030\002"
    " \002(\004\"K\n\007SdkLGet\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table"
    "\030\002 \002(\014\022\014\n\004name\030\003 \002(\014\022\023\n\013frontorback\030\004 \002("
    "\005\"+\n\nSdkLGetRet\022\016\n\006opcode\030\001 \002(\005\022\r\n\005value"
    "\030\002 \002(\014\"o\n\007SdkLPut\022\016\n\006opcode\030\001 \002(\005\022\r\n\005tab"
    "le\030\002 \002(\014\022\014\n\004name\030\003 \002(\014\022\r\n\005value\030\004 \002(\014\022\023\n"
    "\013frontorback\030\005 \002(\005\022\023\n\010writesrc\030\006 \001(\005:\0010\""
    ",\n\nSdkLPutRet\022\016\n\006opcode\030\001 \002(\005\022\016\n\006status\030"
    "\002 \002(\010\"`\n\007SdkLPop\022\016\n\006opcode\030\001 \002(\005\022\r\n\005tabl"
    "e\030\002 \002(\014\022\014\n\004name\030\003 \002(\014\022\023\n\013frontorback\030\004 \002"
    "(\005\022\023\n\010writesrc\030\005 \001(\005:\0010\"+\n\nSdkLPopRet\022\016\n"
    "\006opcode\030\001 \002(\005\022\r\n\005value\030\002 \002(\014\"\\\n\tSdkLInde"
    "x\022\016\n\006opcode\030\001 \002(\005\022\r\n\005table\030\002 \002(\014\022\014\n\004name"
    "\030\003 \002(\014\022\r\n\005index\030\004 \002(\004\022\023\n\013frontorback\030\005 \002"
    "(\005\"-\n\014SdkLIndexRet\022\016\n\006opcode\030\001 \002(\005\022\r\n\005va"
    "lue\030\002 \002(\014\"g\n\tSdkLRange\022\016\n\006opcode\030\001 \002(\005\022\r"
    "\n\005table\030\002 \002(\014\022\014\n\004name\030\003 \002(\014\022\014\n\004from\030\004 \002("
    "\004\022\n\n\002to\030\005 \002(\004\022\023\n\013frontorback\030\006 \002(\005\"-\n\014Sd"
    "kLRangeRet\022\016\n\006opcode\030\001 \002(\005\022\r\n\005value\030\002 \003("
    "\014", 3761);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bada_sdk.proto", &protobuf_RegisterTypes);
  SdkInvalidOperation::default_instance_ = new SdkInvalidOperation();
  SdkSet::default_instance_ = new SdkSet();
  SdkSetRet::default_instance_ = new SdkSetRet();
  SdkCas::default_instance_ = new SdkCas();
  SdkCasRet::default_instance_ = new SdkCasRet();
  SdkGet::default_instance_ = new SdkGet();
  SdkGetRet::default_instance_ = new SdkGetRet();
  SdkGetV::default_instance_ = new SdkGetV();
  SdkGetVRet::default_instance_ = new SdkGetVRet();
  SdkDelete::default_instance_ = new SdkDelete();
  SdkDeleteRet::default_instance_ = new SdkDeleteRet();
  SdkPing::default_instance_ = new SdkPing();
  SdkPingRet::default_instance_ = new SdkPingRet();
  SdkGetIfAll::default_instance_ = new SdkGetIfAll();
  SdkGetIfAllRet::default_instance_ = new SdkGetIfAllRet();
  SdkMGet::default_instance_ = new SdkMGet();
  SdkMGetRet::default_instance_ = new SdkMGetRet();
  SdkMGetRet_KeyValue::default_instance_ = new SdkMGetRet_KeyValue();
  GetMetadata4SDK2::default_instance_ = new GetMetadata4SDK2();
  Rint32::default_instance_ = new Rint32();
  GetMetadata4SDK3::default_instance_ = new GetMetadata4SDK3();
  GetMetadata4SDK3_NPs::default_instance_ = new GetMetadata4SDK3_NPs();
  GetPrimary4SDK2::default_instance_ = new GetPrimary4SDK2();
  GetPrimary4SDK3::default_instance_ = new GetPrimary4SDK3();
  SdkHGet::default_instance_ = new SdkHGet();
  SdkHGetRet::default_instance_ = new SdkHGetRet();
  SdkHPut::default_instance_ = new SdkHPut();
  SdkHPutRet::default_instance_ = new SdkHPutRet();
  SdkHDelete::default_instance_ = new SdkHDelete();
  SdkHDeleteRet::default_instance_ = new SdkHDeleteRet();
  SdkHGetAllKeysByName::default_instance_ = new SdkHGetAllKeysByName();
  SdkHGetAllKeysByNameRet::default_instance_ = new SdkHGetAllKeysByNameRet();
  SdkHGetAllKVsByName::default_instance_ = new SdkHGetAllKVsByName();
  SdkHGetAllKVsByNameRet::default_instance_ = new SdkHGetAllKVsByNameRet();
  SdkHGetAllKVsByNameRet_HKeyValue::default_instance_ = new SdkHGetAllKVsByNameRet_HKeyValue();
  SdkHMput::default_instance_ = new SdkHMput();
  SdkHMput_HKeyValue::default_instance_ = new SdkHMput_HKeyValue();
  SdkHMputRet::default_instance_ = new SdkHMputRet();
  SdkHMputRet_HKeyRetval::default_instance_ = new SdkHMputRet_HKeyRetval();
  SdkHMget::default_instance_ = new SdkHMget();
  SdkHMgetRet::default_instance_ = new SdkHMgetRet();
  SdkHMgetRet_HKeyValue::default_instance_ = new SdkHMgetRet_HKeyValue();
  SdkSetWithTTL::default_instance_ = new SdkSetWithTTL();
  SdkSetWithTTLRet::default_instance_ = new SdkSetWithTTLRet();
  SdkLSize::default_instance_ = new SdkLSize();
  SdkLSizeRet::default_instance_ = new SdkLSizeRet();
  SdkLGet::default_instance_ = new SdkLGet();
  SdkLGetRet::default_instance_ = new SdkLGetRet();
  SdkLPut::default_instance_ = new SdkLPut();
  SdkLPutRet::default_instance_ = new SdkLPutRet();
  SdkLPop::default_instance_ = new SdkLPop();
  SdkLPopRet::default_instance_ = new SdkLPopRet();
  SdkLIndex::default_instance_ = new SdkLIndex();
  SdkLIndexRet::default_instance_ = new SdkLIndexRet();
  SdkLRange::default_instance_ = new SdkLRange();
  SdkLRangeRet::default_instance_ = new SdkLRangeRet();
  SdkInvalidOperation::default_instance_->InitAsDefaultInstance();
  SdkSet::default_instance_->InitAsDefaultInstance();
  SdkSetRet::default_instance_->InitAsDefaultInstance();
  SdkCas::default_instance_->InitAsDefaultInstance();
  SdkCasRet::default_instance_->InitAsDefaultInstance();
  SdkGet::default_instance_->InitAsDefaultInstance();
  SdkGetRet::default_instance_->InitAsDefaultInstance();
  SdkGetV::default_instance_->InitAsDefaultInstance();
  SdkGetVRet::default_instance_->InitAsDefaultInstance();
  SdkDelete::default_instance_->InitAsDefaultInstance();
  SdkDeleteRet::default_instance_->InitAsDefaultInstance();
  SdkPing::default_instance_->InitAsDefaultInstance();
  SdkPingRet::default_instance_->InitAsDefaultInstance();
  SdkGetIfAll::default_instance_->InitAsDefaultInstance();
  SdkGetIfAllRet::default_instance_->InitAsDefaultInstance();
  SdkMGet::default_instance_->InitAsDefaultInstance();
  SdkMGetRet::default_instance_->InitAsDefaultInstance();
  SdkMGetRet_KeyValue::default_instance_->InitAsDefaultInstance();
  GetMetadata4SDK2::default_instance_->InitAsDefaultInstance();
  Rint32::default_instance_->InitAsDefaultInstance();
  GetMetadata4SDK3::default_instance_->InitAsDefaultInstance();
  GetMetadata4SDK3_NPs::default_instance_->InitAsDefaultInstance();
  GetPrimary4SDK2::default_instance_->InitAsDefaultInstance();
  GetPrimary4SDK3::default_instance_->InitAsDefaultInstance();
  SdkHGet::default_instance_->InitAsDefaultInstance();
  SdkHGetRet::default_instance_->InitAsDefaultInstance();
  SdkHPut::default_instance_->InitAsDefaultInstance();
  SdkHPutRet::default_instance_->InitAsDefaultInstance();
  SdkHDelete::default_instance_->InitAsDefaultInstance();
  SdkHDeleteRet::default_instance_->InitAsDefaultInstance();
  SdkHGetAllKeysByName::default_instance_->InitAsDefaultInstance();
  SdkHGetAllKeysByNameRet::default_instance_->InitAsDefaultInstance();
  SdkHGetAllKVsByName::default_instance_->InitAsDefaultInstance();
  SdkHGetAllKVsByNameRet::default_instance_->InitAsDefaultInstance();
  SdkHGetAllKVsByNameRet_HKeyValue::default_instance_->InitAsDefaultInstance();
  SdkHMput::default_instance_->InitAsDefaultInstance();
  SdkHMput_HKeyValue::default_instance_->InitAsDefaultInstance();
  SdkHMputRet::default_instance_->InitAsDefaultInstance();
  SdkHMputRet_HKeyRetval::default_instance_->InitAsDefaultInstance();
  SdkHMget::default_instance_->InitAsDefaultInstance();
  SdkHMgetRet::default_instance_->InitAsDefaultInstance();
  SdkHMgetRet_HKeyValue::default_instance_->InitAsDefaultInstance();
  SdkSetWithTTL::default_instance_->InitAsDefaultInstance();
  SdkSetWithTTLRet::default_instance_->InitAsDefaultInstance();
  SdkLSize::default_instance_->InitAsDefaultInstance();
  SdkLSizeRet::default_instance_->InitAsDefaultInstance();
  SdkLGet::default_instance_->InitAsDefaultInstance();
  SdkLGetRet::default_instance_->InitAsDefaultInstance();
  SdkLPut::default_instance_->InitAsDefaultInstance();
  SdkLPutRet::default_instance_->InitAsDefaultInstance();
  SdkLPop::default_instance_->InitAsDefaultInstance();
  SdkLPopRet::default_instance_->InitAsDefaultInstance();
  SdkLIndex::default_instance_->InitAsDefaultInstance();
  SdkLIndexRet::default_instance_->InitAsDefaultInstance();
  SdkLRange::default_instance_->InitAsDefaultInstance();
  SdkLRangeRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bada_5fsdk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bada_5fsdk_2eproto {
  StaticDescriptorInitializer_bada_5fsdk_2eproto() {
    protobuf_AddDesc_bada_5fsdk_2eproto();
  }
} static_descriptor_initializer_bada_5fsdk_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SdkInvalidOperation::kOpcodeFieldNumber;
const int SdkInvalidOperation::kWhatFieldNumber;
const int SdkInvalidOperation::kWhyFieldNumber;
#endif  // !_MSC_VER

SdkInvalidOperation::SdkInvalidOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkInvalidOperation::InitAsDefaultInstance() {
}

SdkInvalidOperation::SdkInvalidOperation(const SdkInvalidOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkInvalidOperation::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  what_ = 0;
  why_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkInvalidOperation::~SdkInvalidOperation() {
  SharedDtor();
}

void SdkInvalidOperation::SharedDtor() {
  if (why_ != &::google::protobuf::internal::kEmptyString) {
    delete why_;
  }
  if (this != default_instance_) {
  }
}

void SdkInvalidOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkInvalidOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkInvalidOperation_descriptor_;
}

const SdkInvalidOperation& SdkInvalidOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkInvalidOperation* SdkInvalidOperation::default_instance_ = NULL;

SdkInvalidOperation* SdkInvalidOperation::New() const {
  return new SdkInvalidOperation;
}

void SdkInvalidOperation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    what_ = 0;
    if (has_why()) {
      if (why_ != &::google::protobuf::internal::kEmptyString) {
        why_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkInvalidOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_what;
        break;
      }

      // required int32 what = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_what:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &what_)));
          set_has_what();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_why;
        break;
      }

      // required bytes why = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_why:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_why()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkInvalidOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required int32 what = 2;
  if (has_what()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->what(), output);
  }

  // required bytes why = 3;
  if (has_why()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->why(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkInvalidOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required int32 what = 2;
  if (has_what()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->what(), target);
  }

  // required bytes why = 3;
  if (has_why()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->why(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkInvalidOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required int32 what = 2;
    if (has_what()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->what());
    }

    // required bytes why = 3;
    if (has_why()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->why());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkInvalidOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkInvalidOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkInvalidOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkInvalidOperation::MergeFrom(const SdkInvalidOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_what()) {
      set_what(from.what());
    }
    if (from.has_why()) {
      set_why(from.why());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkInvalidOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkInvalidOperation::CopyFrom(const SdkInvalidOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkInvalidOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkInvalidOperation::Swap(SdkInvalidOperation* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(what_, other->what_);
    std::swap(why_, other->why_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkInvalidOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkInvalidOperation_descriptor_;
  metadata.reflection = SdkInvalidOperation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkSet::kOpcodeFieldNumber;
const int SdkSet::kTableFieldNumber;
const int SdkSet::kKeyFieldNumber;
const int SdkSet::kValueFieldNumber;
const int SdkSet::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkSet::SdkSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkSet::InitAsDefaultInstance() {
}

SdkSet::SdkSet(const SdkSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkSet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkSet::~SdkSet() {
  SharedDtor();
}

void SdkSet::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkSet_descriptor_;
}

const SdkSet& SdkSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkSet* SdkSet::default_instance_ = NULL;

SdkSet* SdkSet::New() const {
  return new SdkSet;
}

void SdkSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // required bytes value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->key(), output);
  }

  // required bytes value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->value(), output);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // required bytes value = 4;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional int32 writesrc = 5 [default = 0];
    if (has_writesrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writesrc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkSet::MergeFrom(const SdkSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkSet::CopyFrom(const SdkSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkSet::Swap(SdkSet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkSet_descriptor_;
  metadata.reflection = SdkSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkSetRet::kOpcodeFieldNumber;
const int SdkSetRet::kStatusFieldNumber;
const int SdkSetRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkSetRet::SdkSetRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkSetRet::InitAsDefaultInstance() {
}

SdkSetRet::SdkSetRet(const SdkSetRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkSetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkSetRet::~SdkSetRet() {
  SharedDtor();
}

void SdkSetRet::SharedDtor() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkSetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkSetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkSetRet_descriptor_;
}

const SdkSetRet& SdkSetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkSetRet* SdkSetRet::default_instance_ = NULL;

SdkSetRet* SdkSetRet::New() const {
  return new SdkSetRet;
}

void SdkSetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkSetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // optional string master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->master().data(), this->master().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkSetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->master(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkSetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkSetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional string master = 3;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkSetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkSetRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkSetRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkSetRet::MergeFrom(const SdkSetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkSetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkSetRet::CopyFrom(const SdkSetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkSetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkSetRet::Swap(SdkSetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkSetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkSetRet_descriptor_;
  metadata.reflection = SdkSetRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkCas::kOpcodeFieldNumber;
const int SdkCas::kTableFieldNumber;
const int SdkCas::kKeyFieldNumber;
const int SdkCas::kValueFieldNumber;
const int SdkCas::kVersionFieldNumber;
const int SdkCas::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkCas::SdkCas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkCas::InitAsDefaultInstance() {
}

SdkCas::SdkCas(const SdkCas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkCas::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkCas::~SdkCas() {
  SharedDtor();
}

void SdkCas::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkCas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkCas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkCas_descriptor_;
}

const SdkCas& SdkCas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkCas* SdkCas::default_instance_ = NULL;

SdkCas* SdkCas::New() const {
  return new SdkCas;
}

void SdkCas::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    version_ = 0;
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkCas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // required bytes value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_version;
        break;
      }

      // required int32 version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkCas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->key(), output);
  }

  // required bytes value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->value(), output);
  }

  // required int32 version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->version(), output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkCas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // required bytes value = 4;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // required int32 version = 5;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->version(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkCas::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // required int32 version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writesrc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkCas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkCas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkCas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkCas::MergeFrom(const SdkCas& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkCas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkCas::CopyFrom(const SdkCas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkCas::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkCas::Swap(SdkCas* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(version_, other->version_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkCas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkCas_descriptor_;
  metadata.reflection = SdkCas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkCasRet::kOpcodeFieldNumber;
const int SdkCasRet::kStatusFieldNumber;
const int SdkCasRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkCasRet::SdkCasRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkCasRet::InitAsDefaultInstance() {
}

SdkCasRet::SdkCasRet(const SdkCasRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkCasRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkCasRet::~SdkCasRet() {
  SharedDtor();
}

void SdkCasRet::SharedDtor() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkCasRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkCasRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkCasRet_descriptor_;
}

const SdkCasRet& SdkCasRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkCasRet* SdkCasRet::default_instance_ = NULL;

SdkCasRet* SdkCasRet::New() const {
  return new SdkCasRet;
}

void SdkCasRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkCasRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // optional string master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->master().data(), this->master().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkCasRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->master(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkCasRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkCasRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional string master = 3;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkCasRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkCasRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkCasRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkCasRet::MergeFrom(const SdkCasRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkCasRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkCasRet::CopyFrom(const SdkCasRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkCasRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkCasRet::Swap(SdkCasRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkCasRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkCasRet_descriptor_;
  metadata.reflection = SdkCasRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkGet::kOpcodeFieldNumber;
const int SdkGet::kTableFieldNumber;
const int SdkGet::kKeyFieldNumber;
#endif  // !_MSC_VER

SdkGet::SdkGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkGet::InitAsDefaultInstance() {
}

SdkGet::SdkGet(const SdkGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkGet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkGet::~SdkGet() {
  SharedDtor();
}

void SdkGet::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkGet_descriptor_;
}

const SdkGet& SdkGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkGet* SdkGet::default_instance_ = NULL;

SdkGet* SdkGet::New() const {
  return new SdkGet;
}

void SdkGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkGet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkGet::MergeFrom(const SdkGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkGet::CopyFrom(const SdkGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkGet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkGet::Swap(SdkGet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkGet_descriptor_;
  metadata.reflection = SdkGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkGetRet::kOpcodeFieldNumber;
const int SdkGetRet::kValueFieldNumber;
const int SdkGetRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkGetRet::SdkGetRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkGetRet::InitAsDefaultInstance() {
}

SdkGetRet::SdkGetRet(const SdkGetRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkGetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkGetRet::~SdkGetRet() {
  SharedDtor();
}

void SdkGetRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkGetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkGetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkGetRet_descriptor_;
}

const SdkGetRet& SdkGetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkGetRet* SdkGetRet::default_instance_ = NULL;

SdkGetRet* SdkGetRet::New() const {
  return new SdkGetRet;
}

void SdkGetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkGetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // optional string master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->master().data(), this->master().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkGetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->master(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkGetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkGetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional string master = 3;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkGetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkGetRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkGetRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkGetRet::MergeFrom(const SdkGetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkGetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkGetRet::CopyFrom(const SdkGetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkGetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkGetRet::Swap(SdkGetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkGetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkGetRet_descriptor_;
  metadata.reflection = SdkGetRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkGetV::kOpcodeFieldNumber;
const int SdkGetV::kTableFieldNumber;
const int SdkGetV::kKeyFieldNumber;
#endif  // !_MSC_VER

SdkGetV::SdkGetV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkGetV::InitAsDefaultInstance() {
}

SdkGetV::SdkGetV(const SdkGetV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkGetV::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkGetV::~SdkGetV() {
  SharedDtor();
}

void SdkGetV::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkGetV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkGetV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkGetV_descriptor_;
}

const SdkGetV& SdkGetV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkGetV* SdkGetV::default_instance_ = NULL;

SdkGetV* SdkGetV::New() const {
  return new SdkGetV;
}

void SdkGetV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkGetV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkGetV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkGetV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkGetV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkGetV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkGetV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkGetV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkGetV::MergeFrom(const SdkGetV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkGetV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkGetV::CopyFrom(const SdkGetV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkGetV::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkGetV::Swap(SdkGetV* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkGetV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkGetV_descriptor_;
  metadata.reflection = SdkGetV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkGetVRet::kOpcodeFieldNumber;
const int SdkGetVRet::kValueFieldNumber;
const int SdkGetVRet::kVersionFieldNumber;
const int SdkGetVRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkGetVRet::SdkGetVRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkGetVRet::InitAsDefaultInstance() {
}

SdkGetVRet::SdkGetVRet(const SdkGetVRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkGetVRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkGetVRet::~SdkGetVRet() {
  SharedDtor();
}

void SdkGetVRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkGetVRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkGetVRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkGetVRet_descriptor_;
}

const SdkGetVRet& SdkGetVRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkGetVRet* SdkGetVRet::default_instance_ = NULL;

SdkGetVRet* SdkGetVRet::New() const {
  return new SdkGetVRet;
}

void SdkGetVRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    version_ = 0;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkGetVRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // required int32 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_master;
        break;
      }

      // optional string master = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->master().data(), this->master().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkGetVRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  // required int32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }

  // optional string master = 4;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->master(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkGetVRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // required int32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->version(), target);
  }

  // optional string master = 4;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkGetVRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // required int32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional string master = 4;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkGetVRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkGetVRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkGetVRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkGetVRet::MergeFrom(const SdkGetVRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkGetVRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkGetVRet::CopyFrom(const SdkGetVRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkGetVRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkGetVRet::Swap(SdkGetVRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(version_, other->version_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkGetVRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkGetVRet_descriptor_;
  metadata.reflection = SdkGetVRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkDelete::kOpcodeFieldNumber;
const int SdkDelete::kTableFieldNumber;
const int SdkDelete::kKeyFieldNumber;
const int SdkDelete::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkDelete::SdkDelete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkDelete::InitAsDefaultInstance() {
}

SdkDelete::SdkDelete(const SdkDelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkDelete::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkDelete::~SdkDelete() {
  SharedDtor();
}

void SdkDelete::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkDelete_descriptor_;
}

const SdkDelete& SdkDelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkDelete* SdkDelete::default_instance_ = NULL;

SdkDelete* SdkDelete::New() const {
  return new SdkDelete;
}

void SdkDelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->key(), output);
  }

  // optional int32 writesrc = 4 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkDelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // optional int32 writesrc = 4 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkDelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional int32 writesrc = 4 [default = 0];
    if (has_writesrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writesrc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkDelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkDelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkDelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkDelete::MergeFrom(const SdkDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkDelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkDelete::CopyFrom(const SdkDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkDelete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkDelete::Swap(SdkDelete* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkDelete_descriptor_;
  metadata.reflection = SdkDelete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkDeleteRet::kOpcodeFieldNumber;
const int SdkDeleteRet::kStatusFieldNumber;
const int SdkDeleteRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkDeleteRet::SdkDeleteRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkDeleteRet::InitAsDefaultInstance() {
}

SdkDeleteRet::SdkDeleteRet(const SdkDeleteRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkDeleteRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkDeleteRet::~SdkDeleteRet() {
  SharedDtor();
}

void SdkDeleteRet::SharedDtor() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkDeleteRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkDeleteRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkDeleteRet_descriptor_;
}

const SdkDeleteRet& SdkDeleteRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkDeleteRet* SdkDeleteRet::default_instance_ = NULL;

SdkDeleteRet* SdkDeleteRet::New() const {
  return new SdkDeleteRet;
}

void SdkDeleteRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkDeleteRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // optional string master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->master().data(), this->master().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkDeleteRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->master(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkDeleteRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkDeleteRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional string master = 3;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkDeleteRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkDeleteRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkDeleteRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkDeleteRet::MergeFrom(const SdkDeleteRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkDeleteRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkDeleteRet::CopyFrom(const SdkDeleteRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkDeleteRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkDeleteRet::Swap(SdkDeleteRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkDeleteRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkDeleteRet_descriptor_;
  metadata.reflection = SdkDeleteRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkPing::kOpcodeFieldNumber;
#endif  // !_MSC_VER

SdkPing::SdkPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkPing::InitAsDefaultInstance() {
}

SdkPing::SdkPing(const SdkPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkPing::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkPing::~SdkPing() {
  SharedDtor();
}

void SdkPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkPing_descriptor_;
}

const SdkPing& SdkPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkPing* SdkPing::default_instance_ = NULL;

SdkPing* SdkPing::New() const {
  return new SdkPing;
}

void SdkPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkPing::MergeFrom(const SdkPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkPing::CopyFrom(const SdkPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkPing::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SdkPing::Swap(SdkPing* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkPing_descriptor_;
  metadata.reflection = SdkPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkPingRet::kOpcodeFieldNumber;
const int SdkPingRet::kStatusFieldNumber;
#endif  // !_MSC_VER

SdkPingRet::SdkPingRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkPingRet::InitAsDefaultInstance() {
}

SdkPingRet::SdkPingRet(const SdkPingRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkPingRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkPingRet::~SdkPingRet() {
  SharedDtor();
}

void SdkPingRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkPingRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkPingRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkPingRet_descriptor_;
}

const SdkPingRet& SdkPingRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkPingRet* SdkPingRet::default_instance_ = NULL;

SdkPingRet* SdkPingRet::New() const {
  return new SdkPingRet;
}

void SdkPingRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkPingRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkPingRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkPingRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkPingRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkPingRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkPingRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkPingRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkPingRet::MergeFrom(const SdkPingRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkPingRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkPingRet::CopyFrom(const SdkPingRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkPingRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkPingRet::Swap(SdkPingRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkPingRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkPingRet_descriptor_;
  metadata.reflection = SdkPingRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkGetIfAll::kOpcodeFieldNumber;
const int SdkGetIfAll::kTableFieldNumber;
const int SdkGetIfAll::kKeyFieldNumber;
const int SdkGetIfAll::kStrictFieldNumber;
#endif  // !_MSC_VER

SdkGetIfAll::SdkGetIfAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkGetIfAll::InitAsDefaultInstance() {
}

SdkGetIfAll::SdkGetIfAll(const SdkGetIfAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkGetIfAll::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strict_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkGetIfAll::~SdkGetIfAll() {
  SharedDtor();
}

void SdkGetIfAll::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkGetIfAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkGetIfAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkGetIfAll_descriptor_;
}

const SdkGetIfAll& SdkGetIfAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkGetIfAll* SdkGetIfAll::default_instance_ = NULL;

SdkGetIfAll* SdkGetIfAll::New() const {
  return new SdkGetIfAll;
}

void SdkGetIfAll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    strict_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkGetIfAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Strict;
        break;
      }

      // required bool Strict = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Strict:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strict_)));
          set_has_strict();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkGetIfAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->key(), output);
  }

  // required bool Strict = 4;
  if (has_strict()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->strict(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkGetIfAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // required bool Strict = 4;
  if (has_strict()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->strict(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkGetIfAll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bool Strict = 4;
    if (has_strict()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkGetIfAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkGetIfAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkGetIfAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkGetIfAll::MergeFrom(const SdkGetIfAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_strict()) {
      set_strict(from.strict());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkGetIfAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkGetIfAll::CopyFrom(const SdkGetIfAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkGetIfAll::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkGetIfAll::Swap(SdkGetIfAll* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(strict_, other->strict_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkGetIfAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkGetIfAll_descriptor_;
  metadata.reflection = SdkGetIfAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkGetIfAllRet::kOpcodeFieldNumber;
const int SdkGetIfAllRet::kValueFieldNumber;
const int SdkGetIfAllRet::kVersionFieldNumber;
const int SdkGetIfAllRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkGetIfAllRet::SdkGetIfAllRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkGetIfAllRet::InitAsDefaultInstance() {
}

SdkGetIfAllRet::SdkGetIfAllRet(const SdkGetIfAllRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkGetIfAllRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkGetIfAllRet::~SdkGetIfAllRet() {
  SharedDtor();
}

void SdkGetIfAllRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkGetIfAllRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkGetIfAllRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkGetIfAllRet_descriptor_;
}

const SdkGetIfAllRet& SdkGetIfAllRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkGetIfAllRet* SdkGetIfAllRet::default_instance_ = NULL;

SdkGetIfAllRet* SdkGetIfAllRet::New() const {
  return new SdkGetIfAllRet;
}

void SdkGetIfAllRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    version_ = 0;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkGetIfAllRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // required int32 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_master;
        break;
      }

      // optional string master = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->master().data(), this->master().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkGetIfAllRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  // required int32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }

  // optional string master = 4;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->master(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkGetIfAllRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // required int32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->version(), target);
  }

  // optional string master = 4;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkGetIfAllRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // required int32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional string master = 4;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkGetIfAllRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkGetIfAllRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkGetIfAllRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkGetIfAllRet::MergeFrom(const SdkGetIfAllRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkGetIfAllRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkGetIfAllRet::CopyFrom(const SdkGetIfAllRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkGetIfAllRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkGetIfAllRet::Swap(SdkGetIfAllRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(version_, other->version_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkGetIfAllRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkGetIfAllRet_descriptor_;
  metadata.reflection = SdkGetIfAllRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkMGet::kOpcodeFieldNumber;
const int SdkMGet::kTableFieldNumber;
const int SdkMGet::kKeyFieldNumber;
#endif  // !_MSC_VER

SdkMGet::SdkMGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkMGet::InitAsDefaultInstance() {
}

SdkMGet::SdkMGet(const SdkMGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkMGet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkMGet::~SdkMGet() {
  SharedDtor();
}

void SdkMGet::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void SdkMGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkMGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkMGet_descriptor_;
}

const SdkMGet& SdkMGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkMGet* SdkMGet::default_instance_ = NULL;

SdkMGet* SdkMGet::New() const {
  return new SdkMGet;
}

void SdkMGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
  }
  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkMGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // repeated bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkMGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // repeated bytes key = 3;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->key(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkMGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // repeated bytes key = 3;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->key(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkMGet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

  }
  // repeated bytes key = 3;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkMGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkMGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkMGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkMGet::MergeFrom(const SdkMGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkMGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkMGet::CopyFrom(const SdkMGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkMGet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkMGet::Swap(SdkMGet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    key_.Swap(&other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkMGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkMGet_descriptor_;
  metadata.reflection = SdkMGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkMGetRet_KeyValue::kKeyFieldNumber;
const int SdkMGetRet_KeyValue::kValueFieldNumber;
const int SdkMGetRet_KeyValue::kStatusFieldNumber;
#endif  // !_MSC_VER

SdkMGetRet_KeyValue::SdkMGetRet_KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkMGetRet_KeyValue::InitAsDefaultInstance() {
}

SdkMGetRet_KeyValue::SdkMGetRet_KeyValue(const SdkMGetRet_KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkMGetRet_KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkMGetRet_KeyValue::~SdkMGetRet_KeyValue() {
  SharedDtor();
}

void SdkMGetRet_KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkMGetRet_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkMGetRet_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkMGetRet_KeyValue_descriptor_;
}

const SdkMGetRet_KeyValue& SdkMGetRet_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkMGetRet_KeyValue* SdkMGetRet_KeyValue::default_instance_ = NULL;

SdkMGetRet_KeyValue* SdkMGetRet_KeyValue::New() const {
  return new SdkMGetRet_KeyValue;
}

void SdkMGetRet_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkMGetRet_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkMGetRet_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  // required int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkMGetRet_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // required int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkMGetRet_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // required int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkMGetRet_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkMGetRet_KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkMGetRet_KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkMGetRet_KeyValue::MergeFrom(const SdkMGetRet_KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkMGetRet_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkMGetRet_KeyValue::CopyFrom(const SdkMGetRet_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkMGetRet_KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkMGetRet_KeyValue::Swap(SdkMGetRet_KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkMGetRet_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkMGetRet_KeyValue_descriptor_;
  metadata.reflection = SdkMGetRet_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkMGetRet::kOpcodeFieldNumber;
const int SdkMGetRet::kRetsFieldNumber;
const int SdkMGetRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkMGetRet::SdkMGetRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkMGetRet::InitAsDefaultInstance() {
}

SdkMGetRet::SdkMGetRet(const SdkMGetRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkMGetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkMGetRet::~SdkMGetRet() {
  SharedDtor();
}

void SdkMGetRet::SharedDtor() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkMGetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkMGetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkMGetRet_descriptor_;
}

const SdkMGetRet& SdkMGetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkMGetRet* SdkMGetRet::default_instance_ = NULL;

SdkMGetRet* SdkMGetRet::New() const {
  return new SdkMGetRet;
}

void SdkMGetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  rets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkMGetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rets;
        break;
      }

      // repeated .SdkMGetRet.KeyValue rets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rets;
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // optional string master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->master().data(), this->master().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkMGetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // repeated .SdkMGetRet.KeyValue rets = 2;
  for (int i = 0; i < this->rets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rets(i), output);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->master(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkMGetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // repeated .SdkMGetRet.KeyValue rets = 2;
  for (int i = 0; i < this->rets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rets(i), target);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkMGetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // optional string master = 3;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master());
    }

  }
  // repeated .SdkMGetRet.KeyValue rets = 2;
  total_size += 1 * this->rets_size();
  for (int i = 0; i < this->rets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkMGetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkMGetRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkMGetRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkMGetRet::MergeFrom(const SdkMGetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  rets_.MergeFrom(from.rets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkMGetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkMGetRet::CopyFrom(const SdkMGetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkMGetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rets_size(); i++) {
    if (!this->rets(i).IsInitialized()) return false;
  }
  return true;
}

void SdkMGetRet::Swap(SdkMGetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    rets_.Swap(&other->rets_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkMGetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkMGetRet_descriptor_;
  metadata.reflection = SdkMGetRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMetadata4SDK2::kCmdFieldNumber;
const int GetMetadata4SDK2::kTableFieldNumber;
#endif  // !_MSC_VER

GetMetadata4SDK2::GetMetadata4SDK2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMetadata4SDK2::InitAsDefaultInstance() {
}

GetMetadata4SDK2::GetMetadata4SDK2(const GetMetadata4SDK2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMetadata4SDK2::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMetadata4SDK2::~GetMetadata4SDK2() {
  SharedDtor();
}

void GetMetadata4SDK2::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void GetMetadata4SDK2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMetadata4SDK2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMetadata4SDK2_descriptor_;
}

const GetMetadata4SDK2& GetMetadata4SDK2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

GetMetadata4SDK2* GetMetadata4SDK2::default_instance_ = NULL;

GetMetadata4SDK2* GetMetadata4SDK2::New() const {
  return new GetMetadata4SDK2;
}

void GetMetadata4SDK2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMetadata4SDK2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required string table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMetadata4SDK2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // required string table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMetadata4SDK2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }

  // required string table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMetadata4SDK2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // required string table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMetadata4SDK2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMetadata4SDK2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMetadata4SDK2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMetadata4SDK2::MergeFrom(const GetMetadata4SDK2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMetadata4SDK2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMetadata4SDK2::CopyFrom(const GetMetadata4SDK2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetadata4SDK2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetMetadata4SDK2::Swap(GetMetadata4SDK2* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(table_, other->table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMetadata4SDK2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMetadata4SDK2_descriptor_;
  metadata.reflection = GetMetadata4SDK2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rint32::kIdFieldNumber;
#endif  // !_MSC_VER

Rint32::Rint32()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rint32::InitAsDefaultInstance() {
}

Rint32::Rint32(const Rint32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rint32::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rint32::~Rint32() {
  SharedDtor();
}

void Rint32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rint32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rint32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rint32_descriptor_;
}

const Rint32& Rint32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

Rint32* Rint32::default_instance_ = NULL;

Rint32* Rint32::New() const {
  return new Rint32;
}

void Rint32::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rint32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rint32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rint32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rint32::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rint32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rint32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rint32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rint32::MergeFrom(const Rint32& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rint32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rint32::CopyFrom(const Rint32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rint32::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Rint32::Swap(Rint32* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rint32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rint32_descriptor_;
  metadata.reflection = Rint32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMetadata4SDK3_NPs::kHostFieldNumber;
const int GetMetadata4SDK3_NPs::kPortFieldNumber;
const int GetMetadata4SDK3_NPs::kPartitionsFieldNumber;
#endif  // !_MSC_VER

GetMetadata4SDK3_NPs::GetMetadata4SDK3_NPs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMetadata4SDK3_NPs::InitAsDefaultInstance() {
}

GetMetadata4SDK3_NPs::GetMetadata4SDK3_NPs(const GetMetadata4SDK3_NPs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMetadata4SDK3_NPs::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMetadata4SDK3_NPs::~GetMetadata4SDK3_NPs() {
  SharedDtor();
}

void GetMetadata4SDK3_NPs::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void GetMetadata4SDK3_NPs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMetadata4SDK3_NPs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMetadata4SDK3_NPs_descriptor_;
}

const GetMetadata4SDK3_NPs& GetMetadata4SDK3_NPs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

GetMetadata4SDK3_NPs* GetMetadata4SDK3_NPs::default_instance_ = NULL;

GetMetadata4SDK3_NPs* GetMetadata4SDK3_NPs::New() const {
  return new GetMetadata4SDK3_NPs;
}

void GetMetadata4SDK3_NPs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMetadata4SDK3_NPs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_partitions;
        break;
      }

      // repeated .Rint32 partitions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partitions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partitions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_partitions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMetadata4SDK3_NPs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // repeated .Rint32 partitions = 3;
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->partitions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMetadata4SDK3_NPs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // repeated .Rint32 partitions = 3;
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->partitions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMetadata4SDK3_NPs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  // repeated .Rint32 partitions = 3;
  total_size += 1 * this->partitions_size();
  for (int i = 0; i < this->partitions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partitions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMetadata4SDK3_NPs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMetadata4SDK3_NPs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMetadata4SDK3_NPs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMetadata4SDK3_NPs::MergeFrom(const GetMetadata4SDK3_NPs& from) {
  GOOGLE_CHECK_NE(&from, this);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMetadata4SDK3_NPs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMetadata4SDK3_NPs::CopyFrom(const GetMetadata4SDK3_NPs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetadata4SDK3_NPs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < partitions_size(); i++) {
    if (!this->partitions(i).IsInitialized()) return false;
  }
  return true;
}

void GetMetadata4SDK3_NPs::Swap(GetMetadata4SDK3_NPs* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    partitions_.Swap(&other->partitions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMetadata4SDK3_NPs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMetadata4SDK3_NPs_descriptor_;
  metadata.reflection = GetMetadata4SDK3_NPs_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetMetadata4SDK3::kCmdFieldNumber;
const int GetMetadata4SDK3::kNpsFieldNumber;
const int GetMetadata4SDK3::kPcntFieldNumber;
#endif  // !_MSC_VER

GetMetadata4SDK3::GetMetadata4SDK3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMetadata4SDK3::InitAsDefaultInstance() {
}

GetMetadata4SDK3::GetMetadata4SDK3(const GetMetadata4SDK3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMetadata4SDK3::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  pcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMetadata4SDK3::~GetMetadata4SDK3() {
  SharedDtor();
}

void GetMetadata4SDK3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMetadata4SDK3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMetadata4SDK3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMetadata4SDK3_descriptor_;
}

const GetMetadata4SDK3& GetMetadata4SDK3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

GetMetadata4SDK3* GetMetadata4SDK3::default_instance_ = NULL;

GetMetadata4SDK3* GetMetadata4SDK3::New() const {
  return new GetMetadata4SDK3;
}

void GetMetadata4SDK3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    pcnt_ = 0;
  }
  nps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMetadata4SDK3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nps;
        break;
      }

      // repeated .GetMetadata4SDK3.NPs nps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nps;
        if (input->ExpectTag(24)) goto parse_pcnt;
        break;
      }

      // required int32 pcnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pcnt_)));
          set_has_pcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMetadata4SDK3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // repeated .GetMetadata4SDK3.NPs nps = 2;
  for (int i = 0; i < this->nps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nps(i), output);
  }

  // required int32 pcnt = 3;
  if (has_pcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMetadata4SDK3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }

  // repeated .GetMetadata4SDK3.NPs nps = 2;
  for (int i = 0; i < this->nps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nps(i), target);
  }

  // required int32 pcnt = 3;
  if (has_pcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMetadata4SDK3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // required int32 pcnt = 3;
    if (has_pcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pcnt());
    }

  }
  // repeated .GetMetadata4SDK3.NPs nps = 2;
  total_size += 1 * this->nps_size();
  for (int i = 0; i < this->nps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMetadata4SDK3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMetadata4SDK3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMetadata4SDK3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMetadata4SDK3::MergeFrom(const GetMetadata4SDK3& from) {
  GOOGLE_CHECK_NE(&from, this);
  nps_.MergeFrom(from.nps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_pcnt()) {
      set_pcnt(from.pcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMetadata4SDK3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMetadata4SDK3::CopyFrom(const GetMetadata4SDK3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetadata4SDK3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < nps_size(); i++) {
    if (!this->nps(i).IsInitialized()) return false;
  }
  return true;
}

void GetMetadata4SDK3::Swap(GetMetadata4SDK3* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    nps_.Swap(&other->nps_);
    std::swap(pcnt_, other->pcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMetadata4SDK3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMetadata4SDK3_descriptor_;
  metadata.reflection = GetMetadata4SDK3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPrimary4SDK2::kCmdFieldNumber;
const int GetPrimary4SDK2::kTableFieldNumber;
const int GetPrimary4SDK2::kPartitionFieldNumber;
#endif  // !_MSC_VER

GetPrimary4SDK2::GetPrimary4SDK2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPrimary4SDK2::InitAsDefaultInstance() {
}

GetPrimary4SDK2::GetPrimary4SDK2(const GetPrimary4SDK2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPrimary4SDK2::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPrimary4SDK2::~GetPrimary4SDK2() {
  SharedDtor();
}

void GetPrimary4SDK2::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void GetPrimary4SDK2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPrimary4SDK2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPrimary4SDK2_descriptor_;
}

const GetPrimary4SDK2& GetPrimary4SDK2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

GetPrimary4SDK2* GetPrimary4SDK2::default_instance_ = NULL;

GetPrimary4SDK2* GetPrimary4SDK2::New() const {
  return new GetPrimary4SDK2;
}

void GetPrimary4SDK2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    partition_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPrimary4SDK2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required string table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_partition;
        break;
      }

      // required int32 partition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_)));
          set_has_partition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPrimary4SDK2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // required string table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->table(), output);
  }

  // required int32 partition = 3;
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->partition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPrimary4SDK2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }

  // required string table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // required int32 partition = 3;
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->partition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPrimary4SDK2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // required string table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table());
    }

    // required int32 partition = 3;
    if (has_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPrimary4SDK2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPrimary4SDK2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPrimary4SDK2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPrimary4SDK2::MergeFrom(const GetPrimary4SDK2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_partition()) {
      set_partition(from.partition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPrimary4SDK2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPrimary4SDK2::CopyFrom(const GetPrimary4SDK2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPrimary4SDK2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetPrimary4SDK2::Swap(GetPrimary4SDK2* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(table_, other->table_);
    std::swap(partition_, other->partition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPrimary4SDK2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPrimary4SDK2_descriptor_;
  metadata.reflection = GetPrimary4SDK2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPrimary4SDK3::kCmdFieldNumber;
const int GetPrimary4SDK3::kHostFieldNumber;
const int GetPrimary4SDK3::kPortFieldNumber;
#endif  // !_MSC_VER

GetPrimary4SDK3::GetPrimary4SDK3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPrimary4SDK3::InitAsDefaultInstance() {
}

GetPrimary4SDK3::GetPrimary4SDK3(const GetPrimary4SDK3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPrimary4SDK3::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPrimary4SDK3::~GetPrimary4SDK3() {
  SharedDtor();
}

void GetPrimary4SDK3::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void GetPrimary4SDK3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPrimary4SDK3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPrimary4SDK3_descriptor_;
}

const GetPrimary4SDK3& GetPrimary4SDK3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

GetPrimary4SDK3* GetPrimary4SDK3::default_instance_ = NULL;

GetPrimary4SDK3* GetPrimary4SDK3::New() const {
  return new GetPrimary4SDK3;
}

void GetPrimary4SDK3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPrimary4SDK3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }

      // required string host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPrimary4SDK3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // required string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPrimary4SDK3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }

  // required string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPrimary4SDK3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // required string host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPrimary4SDK3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPrimary4SDK3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPrimary4SDK3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPrimary4SDK3::MergeFrom(const GetPrimary4SDK3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPrimary4SDK3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPrimary4SDK3::CopyFrom(const GetPrimary4SDK3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPrimary4SDK3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetPrimary4SDK3::Swap(GetPrimary4SDK3* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPrimary4SDK3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPrimary4SDK3_descriptor_;
  metadata.reflection = GetPrimary4SDK3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkHGet::kOpcodeFieldNumber;
const int SdkHGet::kTableFieldNumber;
const int SdkHGet::kHnameFieldNumber;
const int SdkHGet::kKeyFieldNumber;
#endif  // !_MSC_VER

SdkHGet::SdkHGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHGet::InitAsDefaultInstance() {
}

SdkHGet::SdkHGet(const SdkHGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHGet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHGet::~SdkHGet() {
  SharedDtor();
}

void SdkHGet::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkHGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHGet_descriptor_;
}

const SdkHGet& SdkHGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHGet* SdkHGet::default_instance_ = NULL;

SdkHGet* SdkHGet::New() const {
  return new SdkHGet;
}

void SdkHGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->hname(), output);
  }

  // required bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  // required bytes key = 4;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHGet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hname());
    }

    // required bytes key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHGet::MergeFrom(const SdkHGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHGet::CopyFrom(const SdkHGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHGet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkHGet::Swap(SdkHGet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHGet_descriptor_;
  metadata.reflection = SdkHGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkHGetRet::kOpcodeFieldNumber;
const int SdkHGetRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkHGetRet::SdkHGetRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHGetRet::InitAsDefaultInstance() {
}

SdkHGetRet::SdkHGetRet(const SdkHGetRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHGetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHGetRet::~SdkHGetRet() {
  SharedDtor();
}

void SdkHGetRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkHGetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHGetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHGetRet_descriptor_;
}

const SdkHGetRet& SdkHGetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHGetRet* SdkHGetRet::default_instance_ = NULL;

SdkHGetRet* SdkHGetRet::New() const {
  return new SdkHGetRet;
}

void SdkHGetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHGetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHGetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHGetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHGetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHGetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHGetRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHGetRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHGetRet::MergeFrom(const SdkHGetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHGetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHGetRet::CopyFrom(const SdkHGetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHGetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHGetRet::Swap(SdkHGetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHGetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHGetRet_descriptor_;
  metadata.reflection = SdkHGetRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkHPut::kOpcodeFieldNumber;
const int SdkHPut::kTableFieldNumber;
const int SdkHPut::kHnameFieldNumber;
const int SdkHPut::kKeyFieldNumber;
const int SdkHPut::kValueFieldNumber;
const int SdkHPut::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkHPut::SdkHPut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHPut::InitAsDefaultInstance() {
}

SdkHPut::SdkHPut(const SdkHPut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHPut::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHPut::~SdkHPut() {
  SharedDtor();
}

void SdkHPut::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkHPut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHPut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHPut_descriptor_;
}

const SdkHPut& SdkHPut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHPut* SdkHPut::default_instance_ = NULL;

SdkHPut* SdkHPut::New() const {
  return new SdkHPut;
}

void SdkHPut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHPut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // required bytes value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHPut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->hname(), output);
  }

  // required bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->key(), output);
  }

  // required bytes value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->value(), output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHPut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  // required bytes key = 4;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  // required bytes value = 5;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->value(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHPut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hname());
    }

    // required bytes key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writesrc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHPut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHPut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHPut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHPut::MergeFrom(const SdkHPut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHPut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHPut::CopyFrom(const SdkHPut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHPut::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkHPut::Swap(SdkHPut* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHPut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHPut_descriptor_;
  metadata.reflection = SdkHPut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkHPutRet::kOpcodeFieldNumber;
const int SdkHPutRet::kStatusFieldNumber;
#endif  // !_MSC_VER

SdkHPutRet::SdkHPutRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHPutRet::InitAsDefaultInstance() {
}

SdkHPutRet::SdkHPutRet(const SdkHPutRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHPutRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHPutRet::~SdkHPutRet() {
  SharedDtor();
}

void SdkHPutRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHPutRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHPutRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHPutRet_descriptor_;
}

const SdkHPutRet& SdkHPutRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHPutRet* SdkHPutRet::default_instance_ = NULL;

SdkHPutRet* SdkHPutRet::New() const {
  return new SdkHPutRet;
}

void SdkHPutRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHPutRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHPutRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHPutRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHPutRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHPutRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHPutRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHPutRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHPutRet::MergeFrom(const SdkHPutRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHPutRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHPutRet::CopyFrom(const SdkHPutRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHPutRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHPutRet::Swap(SdkHPutRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHPutRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHPutRet_descriptor_;
  metadata.reflection = SdkHPutRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkHDelete::kOpcodeFieldNumber;
const int SdkHDelete::kTableFieldNumber;
const int SdkHDelete::kHnameFieldNumber;
const int SdkHDelete::kKeyFieldNumber;
const int SdkHDelete::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkHDelete::SdkHDelete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHDelete::InitAsDefaultInstance() {
}

SdkHDelete::SdkHDelete(const SdkHDelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHDelete::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHDelete::~SdkHDelete() {
  SharedDtor();
}

void SdkHDelete::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkHDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHDelete_descriptor_;
}

const SdkHDelete& SdkHDelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHDelete* SdkHDelete::default_instance_ = NULL;

SdkHDelete* SdkHDelete::New() const {
  return new SdkHDelete;
}

void SdkHDelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required bytes key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->hname(), output);
  }

  // required bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->key(), output);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHDelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  // required bytes key = 4;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHDelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hname());
    }

    // required bytes key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional int32 writesrc = 5 [default = 0];
    if (has_writesrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writesrc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHDelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHDelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHDelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHDelete::MergeFrom(const SdkHDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHDelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHDelete::CopyFrom(const SdkHDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHDelete::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkHDelete::Swap(SdkHDelete* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    std::swap(key_, other->key_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHDelete_descriptor_;
  metadata.reflection = SdkHDelete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkHDeleteRet::kOpcodeFieldNumber;
const int SdkHDeleteRet::kStatusFieldNumber;
#endif  // !_MSC_VER

SdkHDeleteRet::SdkHDeleteRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHDeleteRet::InitAsDefaultInstance() {
}

SdkHDeleteRet::SdkHDeleteRet(const SdkHDeleteRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHDeleteRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHDeleteRet::~SdkHDeleteRet() {
  SharedDtor();
}

void SdkHDeleteRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHDeleteRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHDeleteRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHDeleteRet_descriptor_;
}

const SdkHDeleteRet& SdkHDeleteRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHDeleteRet* SdkHDeleteRet::default_instance_ = NULL;

SdkHDeleteRet* SdkHDeleteRet::New() const {
  return new SdkHDeleteRet;
}

void SdkHDeleteRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHDeleteRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHDeleteRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHDeleteRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHDeleteRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHDeleteRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHDeleteRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHDeleteRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHDeleteRet::MergeFrom(const SdkHDeleteRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHDeleteRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHDeleteRet::CopyFrom(const SdkHDeleteRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHDeleteRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHDeleteRet::Swap(SdkHDeleteRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHDeleteRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHDeleteRet_descriptor_;
  metadata.reflection = SdkHDeleteRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkHGetAllKeysByName::kOpcodeFieldNumber;
const int SdkHGetAllKeysByName::kTableFieldNumber;
const int SdkHGetAllKeysByName::kHnameFieldNumber;
#endif  // !_MSC_VER

SdkHGetAllKeysByName::SdkHGetAllKeysByName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHGetAllKeysByName::InitAsDefaultInstance() {
}

SdkHGetAllKeysByName::SdkHGetAllKeysByName(const SdkHGetAllKeysByName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHGetAllKeysByName::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHGetAllKeysByName::~SdkHGetAllKeysByName() {
  SharedDtor();
}

void SdkHGetAllKeysByName::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (this != default_instance_) {
  }
}

void SdkHGetAllKeysByName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHGetAllKeysByName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHGetAllKeysByName_descriptor_;
}

const SdkHGetAllKeysByName& SdkHGetAllKeysByName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHGetAllKeysByName* SdkHGetAllKeysByName::default_instance_ = NULL;

SdkHGetAllKeysByName* SdkHGetAllKeysByName::New() const {
  return new SdkHGetAllKeysByName;
}

void SdkHGetAllKeysByName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHGetAllKeysByName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHGetAllKeysByName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->hname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHGetAllKeysByName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHGetAllKeysByName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHGetAllKeysByName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHGetAllKeysByName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHGetAllKeysByName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHGetAllKeysByName::MergeFrom(const SdkHGetAllKeysByName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHGetAllKeysByName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHGetAllKeysByName::CopyFrom(const SdkHGetAllKeysByName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHGetAllKeysByName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkHGetAllKeysByName::Swap(SdkHGetAllKeysByName* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHGetAllKeysByName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHGetAllKeysByName_descriptor_;
  metadata.reflection = SdkHGetAllKeysByName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkHGetAllKeysByNameRet::kOpcodeFieldNumber;
const int SdkHGetAllKeysByNameRet::kKeysFieldNumber;
#endif  // !_MSC_VER

SdkHGetAllKeysByNameRet::SdkHGetAllKeysByNameRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHGetAllKeysByNameRet::InitAsDefaultInstance() {
}

SdkHGetAllKeysByNameRet::SdkHGetAllKeysByNameRet(const SdkHGetAllKeysByNameRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHGetAllKeysByNameRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHGetAllKeysByNameRet::~SdkHGetAllKeysByNameRet() {
  SharedDtor();
}

void SdkHGetAllKeysByNameRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHGetAllKeysByNameRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHGetAllKeysByNameRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHGetAllKeysByNameRet_descriptor_;
}

const SdkHGetAllKeysByNameRet& SdkHGetAllKeysByNameRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHGetAllKeysByNameRet* SdkHGetAllKeysByNameRet::default_instance_ = NULL;

SdkHGetAllKeysByNameRet* SdkHGetAllKeysByNameRet::New() const {
  return new SdkHGetAllKeysByNameRet;
}

void SdkHGetAllKeysByNameRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHGetAllKeysByNameRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated bytes keys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHGetAllKeysByNameRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHGetAllKeysByNameRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHGetAllKeysByNameRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

  }
  // repeated bytes keys = 2;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHGetAllKeysByNameRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHGetAllKeysByNameRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHGetAllKeysByNameRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHGetAllKeysByNameRet::MergeFrom(const SdkHGetAllKeysByNameRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHGetAllKeysByNameRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHGetAllKeysByNameRet::CopyFrom(const SdkHGetAllKeysByNameRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHGetAllKeysByNameRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SdkHGetAllKeysByNameRet::Swap(SdkHGetAllKeysByNameRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHGetAllKeysByNameRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHGetAllKeysByNameRet_descriptor_;
  metadata.reflection = SdkHGetAllKeysByNameRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkHGetAllKVsByName::kOpcodeFieldNumber;
const int SdkHGetAllKVsByName::kTableFieldNumber;
const int SdkHGetAllKVsByName::kHnameFieldNumber;
#endif  // !_MSC_VER

SdkHGetAllKVsByName::SdkHGetAllKVsByName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHGetAllKVsByName::InitAsDefaultInstance() {
}

SdkHGetAllKVsByName::SdkHGetAllKVsByName(const SdkHGetAllKVsByName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHGetAllKVsByName::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHGetAllKVsByName::~SdkHGetAllKVsByName() {
  SharedDtor();
}

void SdkHGetAllKVsByName::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (this != default_instance_) {
  }
}

void SdkHGetAllKVsByName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHGetAllKVsByName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHGetAllKVsByName_descriptor_;
}

const SdkHGetAllKVsByName& SdkHGetAllKVsByName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHGetAllKVsByName* SdkHGetAllKVsByName::default_instance_ = NULL;

SdkHGetAllKVsByName* SdkHGetAllKVsByName::New() const {
  return new SdkHGetAllKVsByName;
}

void SdkHGetAllKVsByName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHGetAllKVsByName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHGetAllKVsByName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->hname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHGetAllKVsByName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHGetAllKVsByName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHGetAllKVsByName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHGetAllKVsByName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHGetAllKVsByName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHGetAllKVsByName::MergeFrom(const SdkHGetAllKVsByName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHGetAllKVsByName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHGetAllKVsByName::CopyFrom(const SdkHGetAllKVsByName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHGetAllKVsByName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkHGetAllKVsByName::Swap(SdkHGetAllKVsByName* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHGetAllKVsByName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHGetAllKVsByName_descriptor_;
  metadata.reflection = SdkHGetAllKVsByName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkHGetAllKVsByNameRet_HKeyValue::kKeyFieldNumber;
const int SdkHGetAllKVsByNameRet_HKeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

SdkHGetAllKVsByNameRet_HKeyValue::SdkHGetAllKVsByNameRet_HKeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHGetAllKVsByNameRet_HKeyValue::InitAsDefaultInstance() {
}

SdkHGetAllKVsByNameRet_HKeyValue::SdkHGetAllKVsByNameRet_HKeyValue(const SdkHGetAllKVsByNameRet_HKeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHGetAllKVsByNameRet_HKeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHGetAllKVsByNameRet_HKeyValue::~SdkHGetAllKVsByNameRet_HKeyValue() {
  SharedDtor();
}

void SdkHGetAllKVsByNameRet_HKeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkHGetAllKVsByNameRet_HKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHGetAllKVsByNameRet_HKeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHGetAllKVsByNameRet_HKeyValue_descriptor_;
}

const SdkHGetAllKVsByNameRet_HKeyValue& SdkHGetAllKVsByNameRet_HKeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHGetAllKVsByNameRet_HKeyValue* SdkHGetAllKVsByNameRet_HKeyValue::default_instance_ = NULL;

SdkHGetAllKVsByNameRet_HKeyValue* SdkHGetAllKVsByNameRet_HKeyValue::New() const {
  return new SdkHGetAllKVsByNameRet_HKeyValue;
}

void SdkHGetAllKVsByNameRet_HKeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHGetAllKVsByNameRet_HKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHGetAllKVsByNameRet_HKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHGetAllKVsByNameRet_HKeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHGetAllKVsByNameRet_HKeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHGetAllKVsByNameRet_HKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHGetAllKVsByNameRet_HKeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHGetAllKVsByNameRet_HKeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHGetAllKVsByNameRet_HKeyValue::MergeFrom(const SdkHGetAllKVsByNameRet_HKeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHGetAllKVsByNameRet_HKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHGetAllKVsByNameRet_HKeyValue::CopyFrom(const SdkHGetAllKVsByNameRet_HKeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHGetAllKVsByNameRet_HKeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHGetAllKVsByNameRet_HKeyValue::Swap(SdkHGetAllKVsByNameRet_HKeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHGetAllKVsByNameRet_HKeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHGetAllKVsByNameRet_HKeyValue_descriptor_;
  metadata.reflection = SdkHGetAllKVsByNameRet_HKeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkHGetAllKVsByNameRet::kOpcodeFieldNumber;
const int SdkHGetAllKVsByNameRet::kRetsFieldNumber;
#endif  // !_MSC_VER

SdkHGetAllKVsByNameRet::SdkHGetAllKVsByNameRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHGetAllKVsByNameRet::InitAsDefaultInstance() {
}

SdkHGetAllKVsByNameRet::SdkHGetAllKVsByNameRet(const SdkHGetAllKVsByNameRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHGetAllKVsByNameRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHGetAllKVsByNameRet::~SdkHGetAllKVsByNameRet() {
  SharedDtor();
}

void SdkHGetAllKVsByNameRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHGetAllKVsByNameRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHGetAllKVsByNameRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHGetAllKVsByNameRet_descriptor_;
}

const SdkHGetAllKVsByNameRet& SdkHGetAllKVsByNameRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHGetAllKVsByNameRet* SdkHGetAllKVsByNameRet::default_instance_ = NULL;

SdkHGetAllKVsByNameRet* SdkHGetAllKVsByNameRet::New() const {
  return new SdkHGetAllKVsByNameRet;
}

void SdkHGetAllKVsByNameRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  rets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHGetAllKVsByNameRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rets;
        break;
      }

      // repeated .SdkHGetAllKVsByNameRet.HKeyValue rets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHGetAllKVsByNameRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // repeated .SdkHGetAllKVsByNameRet.HKeyValue rets = 2;
  for (int i = 0; i < this->rets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHGetAllKVsByNameRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // repeated .SdkHGetAllKVsByNameRet.HKeyValue rets = 2;
  for (int i = 0; i < this->rets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHGetAllKVsByNameRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

  }
  // repeated .SdkHGetAllKVsByNameRet.HKeyValue rets = 2;
  total_size += 1 * this->rets_size();
  for (int i = 0; i < this->rets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHGetAllKVsByNameRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHGetAllKVsByNameRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHGetAllKVsByNameRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHGetAllKVsByNameRet::MergeFrom(const SdkHGetAllKVsByNameRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  rets_.MergeFrom(from.rets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHGetAllKVsByNameRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHGetAllKVsByNameRet::CopyFrom(const SdkHGetAllKVsByNameRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHGetAllKVsByNameRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rets_size(); i++) {
    if (!this->rets(i).IsInitialized()) return false;
  }
  return true;
}

void SdkHGetAllKVsByNameRet::Swap(SdkHGetAllKVsByNameRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    rets_.Swap(&other->rets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHGetAllKVsByNameRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHGetAllKVsByNameRet_descriptor_;
  metadata.reflection = SdkHGetAllKVsByNameRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkHMput_HKeyValue::kKeyFieldNumber;
const int SdkHMput_HKeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

SdkHMput_HKeyValue::SdkHMput_HKeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHMput_HKeyValue::InitAsDefaultInstance() {
}

SdkHMput_HKeyValue::SdkHMput_HKeyValue(const SdkHMput_HKeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHMput_HKeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHMput_HKeyValue::~SdkHMput_HKeyValue() {
  SharedDtor();
}

void SdkHMput_HKeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkHMput_HKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHMput_HKeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHMput_HKeyValue_descriptor_;
}

const SdkHMput_HKeyValue& SdkHMput_HKeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHMput_HKeyValue* SdkHMput_HKeyValue::default_instance_ = NULL;

SdkHMput_HKeyValue* SdkHMput_HKeyValue::New() const {
  return new SdkHMput_HKeyValue;
}

void SdkHMput_HKeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHMput_HKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHMput_HKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHMput_HKeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHMput_HKeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHMput_HKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHMput_HKeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHMput_HKeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHMput_HKeyValue::MergeFrom(const SdkHMput_HKeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHMput_HKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHMput_HKeyValue::CopyFrom(const SdkHMput_HKeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHMput_HKeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHMput_HKeyValue::Swap(SdkHMput_HKeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHMput_HKeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHMput_HKeyValue_descriptor_;
  metadata.reflection = SdkHMput_HKeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkHMput::kOpcodeFieldNumber;
const int SdkHMput::kTableFieldNumber;
const int SdkHMput::kHnameFieldNumber;
const int SdkHMput::kKvsFieldNumber;
const int SdkHMput::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkHMput::SdkHMput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHMput::InitAsDefaultInstance() {
}

SdkHMput::SdkHMput(const SdkHMput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHMput::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHMput::~SdkHMput() {
  SharedDtor();
}

void SdkHMput::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (this != default_instance_) {
  }
}

void SdkHMput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHMput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHMput_descriptor_;
}

const SdkHMput& SdkHMput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHMput* SdkHMput::default_instance_ = NULL;

SdkHMput* SdkHMput::New() const {
  return new SdkHMput;
}

void SdkHMput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
    writesrc_ = 0;
  }
  kvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHMput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kvs;
        break;
      }

      // repeated .SdkHMput.HKeyValue kvs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kvs;
        if (input->ExpectTag(40)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHMput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->hname(), output);
  }

  // repeated .SdkHMput.HKeyValue kvs = 4;
  for (int i = 0; i < this->kvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->kvs(i), output);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHMput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  // repeated .SdkHMput.HKeyValue kvs = 4;
  for (int i = 0; i < this->kvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->kvs(i), target);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHMput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hname());
    }

    // optional int32 writesrc = 5 [default = 0];
    if (has_writesrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writesrc());
    }

  }
  // repeated .SdkHMput.HKeyValue kvs = 4;
  total_size += 1 * this->kvs_size();
  for (int i = 0; i < this->kvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHMput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHMput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHMput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHMput::MergeFrom(const SdkHMput& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvs_.MergeFrom(from.kvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHMput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHMput::CopyFrom(const SdkHMput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHMput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < kvs_size(); i++) {
    if (!this->kvs(i).IsInitialized()) return false;
  }
  return true;
}

void SdkHMput::Swap(SdkHMput* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    kvs_.Swap(&other->kvs_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHMput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHMput_descriptor_;
  metadata.reflection = SdkHMput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkHMputRet_HKeyRetval::kKeyFieldNumber;
const int SdkHMputRet_HKeyRetval::kRetvalFieldNumber;
#endif  // !_MSC_VER

SdkHMputRet_HKeyRetval::SdkHMputRet_HKeyRetval()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHMputRet_HKeyRetval::InitAsDefaultInstance() {
}

SdkHMputRet_HKeyRetval::SdkHMputRet_HKeyRetval(const SdkHMputRet_HKeyRetval& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHMputRet_HKeyRetval::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHMputRet_HKeyRetval::~SdkHMputRet_HKeyRetval() {
  SharedDtor();
}

void SdkHMputRet_HKeyRetval::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SdkHMputRet_HKeyRetval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHMputRet_HKeyRetval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHMputRet_HKeyRetval_descriptor_;
}

const SdkHMputRet_HKeyRetval& SdkHMputRet_HKeyRetval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHMputRet_HKeyRetval* SdkHMputRet_HKeyRetval::default_instance_ = NULL;

SdkHMputRet_HKeyRetval* SdkHMputRet_HKeyRetval::New() const {
  return new SdkHMputRet_HKeyRetval;
}

void SdkHMputRet_HKeyRetval::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    retval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHMputRet_HKeyRetval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retval;
        break;
      }

      // required int32 retval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retval_)));
          set_has_retval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHMputRet_HKeyRetval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }

  // required int32 retval = 2;
  if (has_retval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHMputRet_HKeyRetval::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required int32 retval = 2;
  if (has_retval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHMputRet_HKeyRetval::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required int32 retval = 2;
    if (has_retval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHMputRet_HKeyRetval::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHMputRet_HKeyRetval* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHMputRet_HKeyRetval*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHMputRet_HKeyRetval::MergeFrom(const SdkHMputRet_HKeyRetval& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_retval()) {
      set_retval(from.retval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHMputRet_HKeyRetval::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHMputRet_HKeyRetval::CopyFrom(const SdkHMputRet_HKeyRetval& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHMputRet_HKeyRetval::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkHMputRet_HKeyRetval::Swap(SdkHMputRet_HKeyRetval* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(retval_, other->retval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHMputRet_HKeyRetval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHMputRet_HKeyRetval_descriptor_;
  metadata.reflection = SdkHMputRet_HKeyRetval_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkHMputRet::kOpcodeFieldNumber;
const int SdkHMputRet::kKrvsFieldNumber;
#endif  // !_MSC_VER

SdkHMputRet::SdkHMputRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHMputRet::InitAsDefaultInstance() {
}

SdkHMputRet::SdkHMputRet(const SdkHMputRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHMputRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHMputRet::~SdkHMputRet() {
  SharedDtor();
}

void SdkHMputRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHMputRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHMputRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHMputRet_descriptor_;
}

const SdkHMputRet& SdkHMputRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHMputRet* SdkHMputRet::default_instance_ = NULL;

SdkHMputRet* SdkHMputRet::New() const {
  return new SdkHMputRet;
}

void SdkHMputRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  krvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHMputRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_krvs;
        break;
      }

      // repeated .SdkHMputRet.HKeyRetval krvs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_krvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_krvs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_krvs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHMputRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // repeated .SdkHMputRet.HKeyRetval krvs = 2;
  for (int i = 0; i < this->krvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->krvs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHMputRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // repeated .SdkHMputRet.HKeyRetval krvs = 2;
  for (int i = 0; i < this->krvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->krvs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHMputRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

  }
  // repeated .SdkHMputRet.HKeyRetval krvs = 2;
  total_size += 1 * this->krvs_size();
  for (int i = 0; i < this->krvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->krvs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHMputRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHMputRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHMputRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHMputRet::MergeFrom(const SdkHMputRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  krvs_.MergeFrom(from.krvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHMputRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHMputRet::CopyFrom(const SdkHMputRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHMputRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < krvs_size(); i++) {
    if (!this->krvs(i).IsInitialized()) return false;
  }
  return true;
}

void SdkHMputRet::Swap(SdkHMputRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    krvs_.Swap(&other->krvs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHMputRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHMputRet_descriptor_;
  metadata.reflection = SdkHMputRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkHMget::kOpcodeFieldNumber;
const int SdkHMget::kTableFieldNumber;
const int SdkHMget::kHnameFieldNumber;
const int SdkHMget::kKeysFieldNumber;
#endif  // !_MSC_VER

SdkHMget::SdkHMget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHMget::InitAsDefaultInstance() {
}

SdkHMget::SdkHMget(const SdkHMget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHMget::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHMget::~SdkHMget() {
  SharedDtor();
}

void SdkHMget::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (hname_ != &::google::protobuf::internal::kEmptyString) {
    delete hname_;
  }
  if (this != default_instance_) {
  }
}

void SdkHMget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHMget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHMget_descriptor_;
}

const SdkHMget& SdkHMget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHMget* SdkHMget::default_instance_ = NULL;

SdkHMget* SdkHMget::New() const {
  return new SdkHMget;
}

void SdkHMget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_hname()) {
      if (hname_ != &::google::protobuf::internal::kEmptyString) {
        hname_->clear();
      }
    }
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHMget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hname;
        break;
      }

      // required bytes hname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keys;
        break;
      }

      // repeated bytes keys = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHMget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->hname(), output);
  }

  // repeated bytes keys = 4;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHMget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes hname = 3;
  if (has_hname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hname(), target);
  }

  // repeated bytes keys = 4;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHMget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes hname = 3;
    if (has_hname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hname());
    }

  }
  // repeated bytes keys = 4;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHMget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHMget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHMget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHMget::MergeFrom(const SdkHMget& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_hname()) {
      set_hname(from.hname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHMget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHMget::CopyFrom(const SdkHMget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHMget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkHMget::Swap(SdkHMget* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(hname_, other->hname_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHMget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHMget_descriptor_;
  metadata.reflection = SdkHMget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkHMgetRet_HKeyValue::kKeyFieldNumber;
const int SdkHMgetRet_HKeyValue::kValueFieldNumber;
const int SdkHMgetRet_HKeyValue::kRetvalFieldNumber;
#endif  // !_MSC_VER

SdkHMgetRet_HKeyValue::SdkHMgetRet_HKeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHMgetRet_HKeyValue::InitAsDefaultInstance() {
}

SdkHMgetRet_HKeyValue::SdkHMgetRet_HKeyValue(const SdkHMgetRet_HKeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHMgetRet_HKeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHMgetRet_HKeyValue::~SdkHMgetRet_HKeyValue() {
  SharedDtor();
}

void SdkHMgetRet_HKeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkHMgetRet_HKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHMgetRet_HKeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHMgetRet_HKeyValue_descriptor_;
}

const SdkHMgetRet_HKeyValue& SdkHMgetRet_HKeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHMgetRet_HKeyValue* SdkHMgetRet_HKeyValue::default_instance_ = NULL;

SdkHMgetRet_HKeyValue* SdkHMgetRet_HKeyValue::New() const {
  return new SdkHMgetRet_HKeyValue;
}

void SdkHMgetRet_HKeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    retval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHMgetRet_HKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_retval;
        break;
      }

      // required int32 retval = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retval_)));
          set_has_retval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHMgetRet_HKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  // required int32 retval = 3;
  if (has_retval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->retval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHMgetRet_HKeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // required int32 retval = 3;
  if (has_retval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->retval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHMgetRet_HKeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // required int32 retval = 3;
    if (has_retval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHMgetRet_HKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHMgetRet_HKeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHMgetRet_HKeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHMgetRet_HKeyValue::MergeFrom(const SdkHMgetRet_HKeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_retval()) {
      set_retval(from.retval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHMgetRet_HKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHMgetRet_HKeyValue::CopyFrom(const SdkHMgetRet_HKeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHMgetRet_HKeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkHMgetRet_HKeyValue::Swap(SdkHMgetRet_HKeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(retval_, other->retval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHMgetRet_HKeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHMgetRet_HKeyValue_descriptor_;
  metadata.reflection = SdkHMgetRet_HKeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SdkHMgetRet::kOpcodeFieldNumber;
const int SdkHMgetRet::kKvsFieldNumber;
#endif  // !_MSC_VER

SdkHMgetRet::SdkHMgetRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkHMgetRet::InitAsDefaultInstance() {
}

SdkHMgetRet::SdkHMgetRet(const SdkHMgetRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkHMgetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkHMgetRet::~SdkHMgetRet() {
  SharedDtor();
}

void SdkHMgetRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkHMgetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkHMgetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkHMgetRet_descriptor_;
}

const SdkHMgetRet& SdkHMgetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkHMgetRet* SdkHMgetRet::default_instance_ = NULL;

SdkHMgetRet* SdkHMgetRet::New() const {
  return new SdkHMgetRet;
}

void SdkHMgetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  kvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkHMgetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kvs;
        break;
      }

      // repeated .SdkHMgetRet.HKeyValue kvs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kvs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkHMgetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // repeated .SdkHMgetRet.HKeyValue kvs = 2;
  for (int i = 0; i < this->kvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kvs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkHMgetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // repeated .SdkHMgetRet.HKeyValue kvs = 2;
  for (int i = 0; i < this->kvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kvs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkHMgetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

  }
  // repeated .SdkHMgetRet.HKeyValue kvs = 2;
  total_size += 1 * this->kvs_size();
  for (int i = 0; i < this->kvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkHMgetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkHMgetRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkHMgetRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkHMgetRet::MergeFrom(const SdkHMgetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  kvs_.MergeFrom(from.kvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkHMgetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkHMgetRet::CopyFrom(const SdkHMgetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkHMgetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < kvs_size(); i++) {
    if (!this->kvs(i).IsInitialized()) return false;
  }
  return true;
}

void SdkHMgetRet::Swap(SdkHMgetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    kvs_.Swap(&other->kvs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkHMgetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkHMgetRet_descriptor_;
  metadata.reflection = SdkHMgetRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkSetWithTTL::kOpcodeFieldNumber;
const int SdkSetWithTTL::kTableFieldNumber;
const int SdkSetWithTTL::kKeyFieldNumber;
const int SdkSetWithTTL::kValueFieldNumber;
const int SdkSetWithTTL::kTtlFieldNumber;
const int SdkSetWithTTL::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkSetWithTTL::SdkSetWithTTL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkSetWithTTL::InitAsDefaultInstance() {
}

SdkSetWithTTL::SdkSetWithTTL(const SdkSetWithTTL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkSetWithTTL::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ttl_ = 0;
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkSetWithTTL::~SdkSetWithTTL() {
  SharedDtor();
}

void SdkSetWithTTL::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkSetWithTTL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkSetWithTTL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkSetWithTTL_descriptor_;
}

const SdkSetWithTTL& SdkSetWithTTL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkSetWithTTL* SdkSetWithTTL::default_instance_ = NULL;

SdkSetWithTTL* SdkSetWithTTL::New() const {
  return new SdkSetWithTTL;
}

void SdkSetWithTTL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    ttl_ = 0;
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkSetWithTTL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required bytes key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // required bytes value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ttl;
        break;
      }

      // required int32 ttl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkSetWithTTL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->key(), output);
  }

  // required bytes value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->value(), output);
  }

  // required int32 ttl = 5;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ttl(), output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkSetWithTTL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // required bytes value = 4;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // required int32 ttl = 5;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ttl(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkSetWithTTL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // required int32 ttl = 5;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ttl());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writesrc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkSetWithTTL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkSetWithTTL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkSetWithTTL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkSetWithTTL::MergeFrom(const SdkSetWithTTL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkSetWithTTL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkSetWithTTL::CopyFrom(const SdkSetWithTTL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkSetWithTTL::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkSetWithTTL::Swap(SdkSetWithTTL* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(ttl_, other->ttl_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkSetWithTTL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkSetWithTTL_descriptor_;
  metadata.reflection = SdkSetWithTTL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkSetWithTTLRet::kOpcodeFieldNumber;
const int SdkSetWithTTLRet::kStatusFieldNumber;
const int SdkSetWithTTLRet::kMasterFieldNumber;
#endif  // !_MSC_VER

SdkSetWithTTLRet::SdkSetWithTTLRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkSetWithTTLRet::InitAsDefaultInstance() {
}

SdkSetWithTTLRet::SdkSetWithTTLRet(const SdkSetWithTTLRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkSetWithTTLRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkSetWithTTLRet::~SdkSetWithTTLRet() {
  SharedDtor();
}

void SdkSetWithTTLRet::SharedDtor() {
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SdkSetWithTTLRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkSetWithTTLRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkSetWithTTLRet_descriptor_;
}

const SdkSetWithTTLRet& SdkSetWithTTLRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkSetWithTTLRet* SdkSetWithTTLRet::default_instance_ = NULL;

SdkSetWithTTLRet* SdkSetWithTTLRet::New() const {
  return new SdkSetWithTTLRet;
}

void SdkSetWithTTLRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkSetWithTTLRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // optional string master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->master().data(), this->master().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkSetWithTTLRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->master(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkSetWithTTLRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  // optional string master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkSetWithTTLRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // optional string master = 3;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkSetWithTTLRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkSetWithTTLRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkSetWithTTLRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkSetWithTTLRet::MergeFrom(const SdkSetWithTTLRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkSetWithTTLRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkSetWithTTLRet::CopyFrom(const SdkSetWithTTLRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkSetWithTTLRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkSetWithTTLRet::Swap(SdkSetWithTTLRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkSetWithTTLRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkSetWithTTLRet_descriptor_;
  metadata.reflection = SdkSetWithTTLRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkLSize::kOpcodeFieldNumber;
const int SdkLSize::kTableFieldNumber;
const int SdkLSize::kNameFieldNumber;
#endif  // !_MSC_VER

SdkLSize::SdkLSize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkLSize::InitAsDefaultInstance() {
}

SdkLSize::SdkLSize(const SdkLSize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLSize::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLSize::~SdkLSize() {
  SharedDtor();
}

void SdkLSize::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkLSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLSize_descriptor_;
}

const SdkLSize& SdkLSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLSize* SdkLSize::default_instance_ = NULL;

SdkLSize* SdkLSize::New() const {
  return new SdkLSize;
}

void SdkLSize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLSize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkLSize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLSize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLSize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkLSize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLSize::MergeFrom(const SdkLSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLSize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLSize::CopyFrom(const SdkLSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SdkLSize::Swap(SdkLSize* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLSize_descriptor_;
  metadata.reflection = SdkLSize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkLSizeRet::kOpcodeFieldNumber;
const int SdkLSizeRet::kSizeRFieldNumber;
#endif  // !_MSC_VER

SdkLSizeRet::SdkLSizeRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkLSizeRet::InitAsDefaultInstance() {
}

SdkLSizeRet::SdkLSizeRet(const SdkLSizeRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLSizeRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  size_r_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLSizeRet::~SdkLSizeRet() {
  SharedDtor();
}

void SdkLSizeRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkLSizeRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLSizeRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLSizeRet_descriptor_;
}

const SdkLSizeRet& SdkLSizeRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLSizeRet* SdkLSizeRet::default_instance_ = NULL;

SdkLSizeRet* SdkLSizeRet::New() const {
  return new SdkLSizeRet;
}

void SdkLSizeRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    size_r_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLSizeRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size_r;
        break;
      }

      // required uint64 size_r = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_r_)));
          set_has_size_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLSizeRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required uint64 size_r = 2;
  if (has_size_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size_r(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLSizeRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required uint64 size_r = 2;
  if (has_size_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size_r(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkLSizeRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required uint64 size_r = 2;
    if (has_size_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size_r());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLSizeRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLSizeRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkLSizeRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLSizeRet::MergeFrom(const SdkLSizeRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_size_r()) {
      set_size_r(from.size_r());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLSizeRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLSizeRet::CopyFrom(const SdkLSizeRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLSizeRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkLSizeRet::Swap(SdkLSizeRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(size_r_, other->size_r_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLSizeRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLSizeRet_descriptor_;
  metadata.reflection = SdkLSizeRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkLGet::kOpcodeFieldNumber;
const int SdkLGet::kTableFieldNumber;
const int SdkLGet::kNameFieldNumber;
const int SdkLGet::kFrontorbackFieldNumber;
#endif  // !_MSC_VER

SdkLGet::SdkLGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkLGet::InitAsDefaultInstance() {
}

SdkLGet::SdkLGet(const SdkLGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLGet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frontorback_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLGet::~SdkLGet() {
  SharedDtor();
}

void SdkLGet::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkLGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLGet_descriptor_;
}

const SdkLGet& SdkLGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLGet* SdkLGet::default_instance_ = NULL;

SdkLGet* SdkLGet::New() const {
  return new SdkLGet;
}

void SdkLGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    frontorback_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_frontorback;
        break;
      }

      // required int32 frontorback = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frontorback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontorback_)));
          set_has_frontorback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // required int32 frontorback = 4;
  if (has_frontorback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frontorback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int32 frontorback = 4;
  if (has_frontorback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->frontorback(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkLGet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required int32 frontorback = 4;
    if (has_frontorback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontorback());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkLGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLGet::MergeFrom(const SdkLGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_frontorback()) {
      set_frontorback(from.frontorback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLGet::CopyFrom(const SdkLGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLGet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkLGet::Swap(SdkLGet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(frontorback_, other->frontorback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLGet_descriptor_;
  metadata.reflection = SdkLGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkLGetRet::kOpcodeFieldNumber;
const int SdkLGetRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkLGetRet::SdkLGetRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkLGetRet::InitAsDefaultInstance() {
}

SdkLGetRet::SdkLGetRet(const SdkLGetRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLGetRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLGetRet::~SdkLGetRet() {
  SharedDtor();
}

void SdkLGetRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkLGetRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLGetRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLGetRet_descriptor_;
}

const SdkLGetRet& SdkLGetRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLGetRet* SdkLGetRet::default_instance_ = NULL;

SdkLGetRet* SdkLGetRet::New() const {
  return new SdkLGetRet;
}

void SdkLGetRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLGetRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLGetRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLGetRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkLGetRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLGetRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLGetRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkLGetRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLGetRet::MergeFrom(const SdkLGetRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLGetRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLGetRet::CopyFrom(const SdkLGetRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLGetRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkLGetRet::Swap(SdkLGetRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLGetRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLGetRet_descriptor_;
  metadata.reflection = SdkLGetRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkLPut::kOpcodeFieldNumber;
const int SdkLPut::kTableFieldNumber;
const int SdkLPut::kNameFieldNumber;
const int SdkLPut::kValueFieldNumber;
const int SdkLPut::kFrontorbackFieldNumber;
const int SdkLPut::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkLPut::SdkLPut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkLPut::InitAsDefaultInstance() {
}

SdkLPut::SdkLPut(const SdkLPut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLPut::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frontorback_ = 0;
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLPut::~SdkLPut() {
  SharedDtor();
}

void SdkLPut::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkLPut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLPut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLPut_descriptor_;
}

const SdkLPut& SdkLPut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLPut* SdkLPut::default_instance_ = NULL;

SdkLPut* SdkLPut::New() const {
  return new SdkLPut;
}

void SdkLPut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    frontorback_ = 0;
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLPut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // required bytes value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frontorback;
        break;
      }

      // required int32 frontorback = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frontorback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontorback_)));
          set_has_frontorback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLPut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // required bytes value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->value(), output);
  }

  // required int32 frontorback = 5;
  if (has_frontorback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->frontorback(), output);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLPut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes value = 4;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // required int32 frontorback = 5;
  if (has_frontorback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->frontorback(), target);
  }

  // optional int32 writesrc = 6 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkLPut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // required int32 frontorback = 5;
    if (has_frontorback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontorback());
    }

    // optional int32 writesrc = 6 [default = 0];
    if (has_writesrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writesrc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLPut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLPut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkLPut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLPut::MergeFrom(const SdkLPut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_frontorback()) {
      set_frontorback(from.frontorback());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLPut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLPut::CopyFrom(const SdkLPut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLPut::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkLPut::Swap(SdkLPut* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(frontorback_, other->frontorback_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLPut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLPut_descriptor_;
  metadata.reflection = SdkLPut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkLPutRet::kOpcodeFieldNumber;
const int SdkLPutRet::kStatusFieldNumber;
#endif  // !_MSC_VER

SdkLPutRet::SdkLPutRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkLPutRet::InitAsDefaultInstance() {
}

SdkLPutRet::SdkLPutRet(const SdkLPutRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLPutRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLPutRet::~SdkLPutRet() {
  SharedDtor();
}

void SdkLPutRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkLPutRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLPutRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLPutRet_descriptor_;
}

const SdkLPutRet& SdkLPutRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLPutRet* SdkLPutRet::default_instance_ = NULL;

SdkLPutRet* SdkLPutRet::New() const {
  return new SdkLPutRet;
}

void SdkLPutRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLPutRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLPutRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLPutRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkLPutRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLPutRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLPutRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkLPutRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLPutRet::MergeFrom(const SdkLPutRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLPutRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLPutRet::CopyFrom(const SdkLPutRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLPutRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkLPutRet::Swap(SdkLPutRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLPutRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLPutRet_descriptor_;
  metadata.reflection = SdkLPutRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkLPop::kOpcodeFieldNumber;
const int SdkLPop::kTableFieldNumber;
const int SdkLPop::kNameFieldNumber;
const int SdkLPop::kFrontorbackFieldNumber;
const int SdkLPop::kWritesrcFieldNumber;
#endif  // !_MSC_VER

SdkLPop::SdkLPop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkLPop::InitAsDefaultInstance() {
}

SdkLPop::SdkLPop(const SdkLPop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLPop::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frontorback_ = 0;
  writesrc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLPop::~SdkLPop() {
  SharedDtor();
}

void SdkLPop::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkLPop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLPop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLPop_descriptor_;
}

const SdkLPop& SdkLPop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLPop* SdkLPop::default_instance_ = NULL;

SdkLPop* SdkLPop::New() const {
  return new SdkLPop;
}

void SdkLPop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    frontorback_ = 0;
    writesrc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLPop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_frontorback;
        break;
      }

      // required int32 frontorback = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frontorback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontorback_)));
          set_has_frontorback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_writesrc;
        break;
      }

      // optional int32 writesrc = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writesrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &writesrc_)));
          set_has_writesrc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLPop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // required int32 frontorback = 4;
  if (has_frontorback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frontorback(), output);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->writesrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLPop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int32 frontorback = 4;
  if (has_frontorback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->frontorback(), target);
  }

  // optional int32 writesrc = 5 [default = 0];
  if (has_writesrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->writesrc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkLPop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required int32 frontorback = 4;
    if (has_frontorback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontorback());
    }

    // optional int32 writesrc = 5 [default = 0];
    if (has_writesrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->writesrc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLPop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLPop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkLPop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLPop::MergeFrom(const SdkLPop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_frontorback()) {
      set_frontorback(from.frontorback());
    }
    if (from.has_writesrc()) {
      set_writesrc(from.writesrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLPop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLPop::CopyFrom(const SdkLPop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLPop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SdkLPop::Swap(SdkLPop* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(frontorback_, other->frontorback_);
    std::swap(writesrc_, other->writesrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLPop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLPop_descriptor_;
  metadata.reflection = SdkLPop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkLPopRet::kOpcodeFieldNumber;
const int SdkLPopRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkLPopRet::SdkLPopRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkLPopRet::InitAsDefaultInstance() {
}

SdkLPopRet::SdkLPopRet(const SdkLPopRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLPopRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLPopRet::~SdkLPopRet() {
  SharedDtor();
}

void SdkLPopRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkLPopRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLPopRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLPopRet_descriptor_;
}

const SdkLPopRet& SdkLPopRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLPopRet* SdkLPopRet::default_instance_ = NULL;

SdkLPopRet* SdkLPopRet::New() const {
  return new SdkLPopRet;
}

void SdkLPopRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLPopRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLPopRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLPopRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkLPopRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLPopRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLPopRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkLPopRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLPopRet::MergeFrom(const SdkLPopRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLPopRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLPopRet::CopyFrom(const SdkLPopRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLPopRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkLPopRet::Swap(SdkLPopRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLPopRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLPopRet_descriptor_;
  metadata.reflection = SdkLPopRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkLIndex::kOpcodeFieldNumber;
const int SdkLIndex::kTableFieldNumber;
const int SdkLIndex::kNameFieldNumber;
const int SdkLIndex::kIndexFieldNumber;
const int SdkLIndex::kFrontorbackFieldNumber;
#endif  // !_MSC_VER

SdkLIndex::SdkLIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkLIndex::InitAsDefaultInstance() {
}

SdkLIndex::SdkLIndex(const SdkLIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLIndex::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = GOOGLE_ULONGLONG(0);
  frontorback_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLIndex::~SdkLIndex() {
  SharedDtor();
}

void SdkLIndex::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkLIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLIndex_descriptor_;
}

const SdkLIndex& SdkLIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLIndex* SdkLIndex::default_instance_ = NULL;

SdkLIndex* SdkLIndex::New() const {
  return new SdkLIndex;
}

void SdkLIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    index_ = GOOGLE_ULONGLONG(0);
    frontorback_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required uint64 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frontorback;
        break;
      }

      // required int32 frontorback = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frontorback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontorback_)));
          set_has_frontorback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // required uint64 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->index(), output);
  }

  // required int32 frontorback = 5;
  if (has_frontorback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->frontorback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required uint64 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->index(), target);
  }

  // required int32 frontorback = 5;
  if (has_frontorback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->frontorback(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkLIndex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint64 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // required int32 frontorback = 5;
    if (has_frontorback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontorback());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkLIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLIndex::MergeFrom(const SdkLIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_frontorback()) {
      set_frontorback(from.frontorback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLIndex::CopyFrom(const SdkLIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SdkLIndex::Swap(SdkLIndex* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(index_, other->index_);
    std::swap(frontorback_, other->frontorback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLIndex_descriptor_;
  metadata.reflection = SdkLIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkLIndexRet::kOpcodeFieldNumber;
const int SdkLIndexRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkLIndexRet::SdkLIndexRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkLIndexRet::InitAsDefaultInstance() {
}

SdkLIndexRet::SdkLIndexRet(const SdkLIndexRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLIndexRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLIndexRet::~SdkLIndexRet() {
  SharedDtor();
}

void SdkLIndexRet::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void SdkLIndexRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLIndexRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLIndexRet_descriptor_;
}

const SdkLIndexRet& SdkLIndexRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLIndexRet* SdkLIndexRet::default_instance_ = NULL;

SdkLIndexRet* SdkLIndexRet::New() const {
  return new SdkLIndexRet;
}

void SdkLIndexRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLIndexRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLIndexRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLIndexRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkLIndexRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLIndexRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLIndexRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkLIndexRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLIndexRet::MergeFrom(const SdkLIndexRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLIndexRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLIndexRet::CopyFrom(const SdkLIndexRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLIndexRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SdkLIndexRet::Swap(SdkLIndexRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLIndexRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLIndexRet_descriptor_;
  metadata.reflection = SdkLIndexRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkLRange::kOpcodeFieldNumber;
const int SdkLRange::kTableFieldNumber;
const int SdkLRange::kNameFieldNumber;
const int SdkLRange::kFromFieldNumber;
const int SdkLRange::kToFieldNumber;
const int SdkLRange::kFrontorbackFieldNumber;
#endif  // !_MSC_VER

SdkLRange::SdkLRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkLRange::InitAsDefaultInstance() {
}

SdkLRange::SdkLRange(const SdkLRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLRange::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = GOOGLE_ULONGLONG(0);
  to_ = GOOGLE_ULONGLONG(0);
  frontorback_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLRange::~SdkLRange() {
  SharedDtor();
}

void SdkLRange::SharedDtor() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    delete table_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SdkLRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLRange_descriptor_;
}

const SdkLRange& SdkLRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLRange* SdkLRange::default_instance_ = NULL;

SdkLRange* SdkLRange::New() const {
  return new SdkLRange;
}

void SdkLRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::kEmptyString) {
        table_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    from_ = GOOGLE_ULONGLONG(0);
    to_ = GOOGLE_ULONGLONG(0);
    frontorback_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_from;
        break;
      }

      // required uint64 from = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_to;
        break;
      }

      // required uint64 to = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_frontorback;
        break;
      }

      // required int32 frontorback = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frontorback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontorback_)));
          set_has_frontorback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // required uint64 from = 4;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->from(), output);
  }

  // required uint64 to = 5;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->to(), output);
  }

  // required int32 frontorback = 6;
  if (has_frontorback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->frontorback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required uint64 from = 4;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->from(), target);
  }

  // required uint64 to = 5;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->to(), target);
  }

  // required int32 frontorback = 6;
  if (has_frontorback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->frontorback(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkLRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint64 from = 4;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from());
    }

    // required uint64 to = 5;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to());
    }

    // required int32 frontorback = 6;
    if (has_frontorback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontorback());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkLRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLRange::MergeFrom(const SdkLRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_frontorback()) {
      set_frontorback(from.frontorback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLRange::CopyFrom(const SdkLRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SdkLRange::Swap(SdkLRange* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(table_, other->table_);
    std::swap(name_, other->name_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(frontorback_, other->frontorback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLRange_descriptor_;
  metadata.reflection = SdkLRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SdkLRangeRet::kOpcodeFieldNumber;
const int SdkLRangeRet::kValueFieldNumber;
#endif  // !_MSC_VER

SdkLRangeRet::SdkLRangeRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SdkLRangeRet::InitAsDefaultInstance() {
}

SdkLRangeRet::SdkLRangeRet(const SdkLRangeRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SdkLRangeRet::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SdkLRangeRet::~SdkLRangeRet() {
  SharedDtor();
}

void SdkLRangeRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SdkLRangeRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdkLRangeRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdkLRangeRet_descriptor_;
}

const SdkLRangeRet& SdkLRangeRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bada_5fsdk_2eproto();
  return *default_instance_;
}

SdkLRangeRet* SdkLRangeRet::default_instance_ = NULL;

SdkLRangeRet* SdkLRangeRet::New() const {
  return new SdkLRangeRet;
}

void SdkLRangeRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SdkLRangeRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SdkLRangeRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // repeated bytes value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SdkLRangeRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // repeated bytes value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SdkLRangeRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

  }
  // repeated bytes value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdkLRangeRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SdkLRangeRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SdkLRangeRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SdkLRangeRet::MergeFrom(const SdkLRangeRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SdkLRangeRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdkLRangeRet::CopyFrom(const SdkLRangeRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkLRangeRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SdkLRangeRet::Swap(SdkLRangeRet* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SdkLRangeRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdkLRangeRet_descriptor_;
  metadata.reflection = SdkLRangeRet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
